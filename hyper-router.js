/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_json_1;

    return (Opal.defn(self, '$to_json', TMP_String_to_json_1 = function $$to_json() {
      var self = this;

      return JSON.stringify(self)
    }, TMP_String_to_json_1.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/client_stubs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_import_1, TMP_imports_2, TMP_import_tree_3;

      
      
      Opal.defn(self, '$import', TMP_import_1 = function($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil
      }, TMP_import_1.$$arity = -1);
      
      Opal.defn(self, '$imports', TMP_imports_2 = function $$imports($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil
      }, TMP_imports_2.$$arity = -1);
      return (Opal.defn(self, '$import_tree', TMP_import_tree_3 = function $$import_tree($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil
      }, TMP_import_tree_3.$$arity = -1), nil) && 'import_tree';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/context"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_variable_get', '$!', '$key?', '$[]', '$dup', '$[]=', '$-', '$instance_variable_set', '$each', '$run', '$new']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Context, self = $Context = $module($base, 'Context');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Context_set_var_1, TMP_Context_reset$B_5;

      
      Opal.defs(self, '$set_var', TMP_Context_set_var_1 = function $$set_var(ctx, var$, $kwargs) {
        var $a, $b, self = this, force, $iter = TMP_Context_set_var_1.$$p, $yield = $iter || nil, inst_value_b4 = nil, $writer = nil;
        if (self.context == null) self.context = nil;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        force = $kwargs.$$smap["force"];
        if (force == null) {
          force = nil
        }
        if ($iter) TMP_Context_set_var_1.$$p = null;
        
        inst_value_b4 = ctx.$instance_variable_get(var$);
        if ($truthy(($truthy($a = ($truthy($b = self.context) ? self.context['$[]'](ctx)['$key?'](var$)['$!']() : $b)) ? ($truthy($b = force) ? $b : inst_value_b4['$!']()) : $a))) {
          
          $writer = [var$, ($truthy($a = inst_value_b4) ? inst_value_b4.$dup() : $a)];
          $send(self.context['$[]'](ctx), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return ($truthy($a = inst_value_b4) ? $a : ctx.$instance_variable_set(var$, Opal.yieldX($yield, [])));
      }, TMP_Context_set_var_1.$$arity = -3);
      Opal.defs(self, '$reset!', TMP_Context_reset$B_5 = function(reboot) {
        var TMP_2, TMP_4, self = this;
        if (self.context == null) self.context = nil;

        if (reboot == null) {
          reboot = true;
        }
        if ($truthy(self.context)) {
          
          $send(self.context, 'each', [], (TMP_2 = function(ctx, vars){var self = TMP_2.$$s || this, TMP_3;
if (ctx == null) ctx = nil;if (vars == null) vars = nil;
          return $send(vars, 'each', [], (TMP_3 = function(var$, init){var self = TMP_3.$$s || this;
if (var$ == null) var$ = nil;if (init == null) init = nil;
            return ctx.$instance_variable_set(var$, init)}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3))}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2));
          if ($truthy(reboot)) {
            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Application'), 'Boot').$run()
            } else {
            return nil
          };
          } else {
          return (self.context = $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_4 = function(h, k){var self = TMP_4.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
          
            $writer = [k, $hash2([], {})];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4)))
        }
      }, TMP_Context_reset$B_5.$$arity = -1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/js_imports"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$!=', '$!', '$each', '$raise']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_js_import_2;

      return (Opal.defn(self, '$js_import', TMP_js_import_2 = function $$js_import(value, $kwargs) {
        var $a, $b, TMP_1, self = this, client_only, server_only, defines, on_server = nil;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        client_only = $kwargs.$$smap["client_only"];
        if (client_only == null) {
          client_only = nil
        }
        server_only = $kwargs.$$smap["server_only"];
        if (server_only == null) {
          server_only = nil
        }
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'defines')) {
          throw Opal.ArgumentError.$new('missing keyword: defines');
        }
        defines = $kwargs.$$smap["defines"];
        
        defines = [].concat(Opal.to_a(defines));
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          return nil
          } else {
          
          on_server = typeof Opal.global.document === 'undefined';
          if ($truthy(($truthy($a = ($truthy($b = server_only) ? on_server['$!']() : $b)) ? $a : ($truthy($b = client_only) ? on_server : $b)))) {
            return nil};
          return $send(defines, 'each', [], (TMP_1 = function(name){var self = TMP_1.$$s || this;
if (name == null) name = nil;
          
            if ($truthy(Opal.global[name] === undefined)) {
              } else {
              return nil;
            };
            return self.$raise("" + ("" + "The package " + (name) + " was not found. Add it to the webpack ") + ("" + ((function() {if ($truthy(client_only)) {
              return "client_only.js"
              } else {
              return "client_and_server.js"
            }; return nil; })()) + " manifest."));}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        };
      }, TMP_js_import_2.$$arity = 2), nil) && 'js_import'
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/on_client"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$!']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperloop_on_client$q_1;

    Opal.defs(self, '$on_client?', TMP_Hyperloop_on_client$q_1 = function() {
      var self = this;

      if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
        return (typeof Opal.global.document === 'undefined')['$!']()
        } else {
        return nil
      }
    }, TMP_Hyperloop_on_client$q_1.$$arity = 0)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/active_support_string_inquirer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$private', '$==', '$[]']);
  return (function($base, $parent_nesting) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $StringInquirer(){};
      var self = $StringInquirer = $klass($base, $super, 'StringInquirer', $StringInquirer);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StringInquirer_respond_to_missing$q_1, TMP_StringInquirer_method_missing_2;

      
      self.$private();
      
      Opal.defn(self, '$respond_to_missing?', TMP_StringInquirer_respond_to_missing$q_1 = function(method_name, include_private) {
        var $a, self = this, $iter = TMP_StringInquirer_respond_to_missing$q_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if (include_private == null) {
          include_private = false;
        }
        if ($iter) TMP_StringInquirer_respond_to_missing$q_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return ($truthy($a = method_name['$[]'](-1)['$==']("?")) ? $a : $send(self, Opal.find_super_dispatcher(self, 'respond_to_missing?', TMP_StringInquirer_respond_to_missing$q_1, false), $zuper, $iter))
      }, TMP_StringInquirer_respond_to_missing$q_1.$$arity = -2);
      return (Opal.defn(self, '$method_missing', TMP_StringInquirer_method_missing_2 = function $$method_missing(method_name, $a_rest) {
        var self = this, arguments$, $iter = TMP_StringInquirer_method_missing_2.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        arguments$ = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          arguments$[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_StringInquirer_method_missing_2.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if (method_name['$[]'](-1)['$==']("?")) {
          return self['$=='](method_name['$[]']($range(0, -2, false)))
          } else {
          return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_StringInquirer_method_missing_2, false), $zuper, $iter)
        }
      }, TMP_StringInquirer_method_missing_2.$$arity = -2), nil) && 'method_missing';
    })($nesting[0], Opal.const_get_relative($nesting, 'String'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop_env"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperloop_env_1;

    Opal.defs(self, '$env', TMP_Hyperloop_env_1 = function $$env() {
      var $a, self = this;
      if (self.environment == null) self.environment = nil;

      return (self.environment = ($truthy($a = self.environment) ? $a : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'StringInquirer').$new("development")))
    }, TMP_Hyperloop_env_1.$$arity = 0)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop-config"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("hyperloop/string");
    self.$require("hyperloop/client_stubs");
    self.$require("hyperloop/context");
    self.$require("hyperloop/js_imports");
    self.$require("hyperloop/on_client");
    self.$require("hyperloop/active_support_string_inquirer.rb");
    return self.$require("hyperloop_env");
    } else {
    return nil
  }
};

/* Generated by Opal 0.11.3 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$slice', '$-', '$length', '$[]=', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  
  (function($base, $parent_nesting) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Native_is_a$q_1, TMP_Native_try_convert_2, TMP_Native_convert_3, TMP_Native_call_4, TMP_Native_proc_5, TMP_Native_included_19, TMP_Native_initialize_20, TMP_Native_to_n_21;

    
    Opal.defs(self, '$is_a?', TMP_Native_is_a$q_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, TMP_Native_is_a$q_1.$$arity = 2);
    Opal.defs(self, '$try_convert', TMP_Native_try_convert_2 = function $$try_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    
    }, TMP_Native_try_convert_2.$$arity = -2);
    Opal.defs(self, '$convert', TMP_Native_convert_3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, TMP_Native_convert_3.$$arity = 1);
    Opal.defs(self, '$call', TMP_Native_call_4 = function $$call(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_Native_call_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      if ($iter) TMP_Native_call_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    
    }, TMP_Native_call_4.$$arity = -3);
    Opal.defs(self, '$proc', TMP_Native_proc_5 = function $$proc() {
      var TMP_6, self = this, $iter = TMP_Native_proc_5.$$p, block = $iter || nil;

      if ($iter) TMP_Native_proc_5.$$p = null;
      
      if ($truthy(block)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'LocalJumpError'), "no block given")
      };
      return $send(Opal.const_get_qualified('::', 'Kernel'), 'proc', [], (TMP_6 = function($a_rest){var self = TMP_6.$$s || this, args, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        $send(args, 'map!', [], (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6));
    }, TMP_Native_proc_5.$$arity = 0);
    (function($base, $parent_nesting) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Helpers_alias_native_11, TMP_Helpers_native_reader_14, TMP_Helpers_native_writer_17, TMP_Helpers_native_accessor_18;

      
      
      Opal.defn(self, '$alias_native', TMP_Helpers_alias_native_11 = function $$alias_native(new$, $old, $kwargs) {
        var TMP_8, TMP_9, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        as = $kwargs.$$smap["as"];
        if (as == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          
            self["native"][old['$[]']($range(0, -2, false))] = Opal.const_get_relative($nesting, 'Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], (TMP_9 = function($a_rest){var self = TMP_9.$$s || this, block, args, value = nil;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_9.$$p || nil;
            if (block) TMP_9.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ($truthy((value = $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9))
          } else {
          return $send(self, 'define_method', [new$], (TMP_10 = function($a_rest){var self = TMP_10.$$s || this, block, args;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_10.$$p || nil;
            if (block) TMP_10.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10))
        }
      }, TMP_Helpers_alias_native_11.$$arity = -2);
      
      Opal.defn(self, '$native_reader', TMP_Helpers_native_reader_14 = function $$native_reader($a_rest) {
        var TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_12 = function(name){var self = TMP_12.$$s || this, TMP_13;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
      }, TMP_Helpers_native_reader_14.$$arity = -1);
      
      Opal.defn(self, '$native_writer', TMP_Helpers_native_writer_17 = function $$native_writer($a_rest) {
        var TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_15 = function(name){var self = TMP_15.$$s || this, TMP_16;
if (name == null) name = nil;
        return $send(self, 'define_method', ["" + (name) + "="], (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))
      }, TMP_Helpers_native_writer_17.$$arity = -1);
      
      Opal.defn(self, '$native_accessor', TMP_Helpers_native_accessor_18 = function $$native_accessor($a_rest) {
        var self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        $send(self, 'native_reader', Opal.to_a(names));
        return $send(self, 'native_writer', Opal.to_a(names));
      }, TMP_Helpers_native_accessor_18.$$arity = -1);
    })($nesting[0], $nesting);
    Opal.defs(self, '$included', TMP_Native_included_19 = function $$included(klass) {
      var self = this;

      return klass.$extend(Opal.const_get_relative($nesting, 'Helpers'))
    }, TMP_Native_included_19.$$arity = 1);
    
    Opal.defn(self, '$initialize', TMP_Native_initialize_20 = function $$initialize(native$) {
      var self = this;

      
      if ($truthy(Opal.const_get_qualified('::', 'Kernel')['$native?'](native$))) {
        } else {
        Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return (self["native"] = native$);
    }, TMP_Native_initialize_20.$$arity = 1);
    
    Opal.defn(self, '$to_n', TMP_Native_to_n_21 = function $$to_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"]
    }, TMP_Native_to_n_21.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_native$q_22, TMP_Kernel_Native_25, TMP_Kernel_Array_26;

    
    
    Opal.defn(self, '$native?', TMP_Kernel_native$q_22 = function(value) {
      var self = this;

      return value == null || !value.$$class
    }, TMP_Kernel_native$q_22.$$arity = 1);
    
    Opal.defn(self, '$Native', TMP_Kernel_Native_25 = function $$Native(obj) {
      var TMP_23, TMP_24, self = this;

      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
        return $send(obj, 'map', [], (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23))
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
        return $send(self, 'proc', [], (TMP_24 = function($a_rest){var self = TMP_24.$$s || this, block, args;

          block = TMP_24.$$p || nil;
          if (block) TMP_24.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return self.$Native($send(obj, 'call', Opal.to_a(args), block.$to_proc()))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24))
        } else {
        return obj
      }
    }, TMP_Kernel_Native_25.$$arity = 1);
    self.$alias_method("_Array", "Array");
    
    Opal.defn(self, '$Array', TMP_Kernel_Array_26 = function $$Array(object, $a_rest) {
      var self = this, args, $iter = TMP_Kernel_Array_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_Array_26.$$p = null;
      
      if ($truthy(self['$native?'](object))) {
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), 'new', [object].concat(Opal.to_a(args)), block.$to_proc()).$to_a()};
      return self.$_Array(object);
    }, TMP_Kernel_Array_26.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_$eq$eq_27, TMP_Object_has_key$q_28, TMP_Object_each_29, TMP_Object_$$_30, TMP_Object_$$$eq_31, TMP_Object_merge$B_32, TMP_Object_respond_to$q_33, TMP_Object_respond_to_missing$q_34, TMP_Object_method_missing_35, TMP_Object_nil$q_36, TMP_Object_is_a$q_37, TMP_Object_instance_of$q_38, TMP_Object_class_39, TMP_Object_to_a_40, TMP_Object_inspect_41;

    def["native"] = nil;
    
    self.$include(Opal.const_get_qualified('::', 'Native'));
    
    Opal.defn(self, '$==', TMP_Object_$eq$eq_27 = function(other) {
      var self = this;

      return self["native"] === Opal.const_get_qualified('::', 'Native').$try_convert(other)
    }, TMP_Object_$eq$eq_27.$$arity = 1);
    
    Opal.defn(self, '$has_key?', TMP_Object_has_key$q_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_has_key$q_28.$$arity = 1);
    Opal.alias(self, "key?", "has_key?");
    Opal.alias(self, "include?", "has_key?");
    Opal.alias(self, "member?", "has_key?");
    
    Opal.defn(self, '$each', TMP_Object_each_29 = function $$each($a_rest) {
      var self = this, args, $iter = TMP_Object_each_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_each_29.$$p = null;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return $send(self, 'method_missing', ["each"].concat(Opal.to_a(args)))
      }
    }, TMP_Object_each_29.$$arity = -1);
    
    Opal.defn(self, '$[]', TMP_Object_$$_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.const_get_qualified('::', 'Native').$call(self["native"], key)
      }
    
    }, TMP_Object_$$_30.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Object_$$$eq_31 = function(key, value) {
      var self = this, native$ = nil;

      
      native$ = Opal.const_get_qualified('::', 'Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
        } else {
        return self["native"][key] = native$
      };
    }, TMP_Object_$$$eq_31.$$arity = 2);
    
    Opal.defn(self, '$merge!', TMP_Object_merge$B_32 = function(other) {
      var self = this;

      
      
      other = Opal.const_get_qualified('::', 'Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_Object_merge$B_32.$$arity = 1);
    
    Opal.defn(self, '$respond_to?', TMP_Object_respond_to$q_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.const_get_qualified('::', 'Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all)
    }, TMP_Object_respond_to$q_33.$$arity = -2);
    
    Opal.defn(self, '$respond_to_missing?', TMP_Object_respond_to_missing$q_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_respond_to_missing$q_34.$$arity = -2);
    
    Opal.defn(self, '$method_missing', TMP_Object_method_missing_35 = function $$method_missing(mid, $a_rest) {
      var self = this, args, $iter = TMP_Object_method_missing_35.$$p, block = $iter || nil, $writer = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_method_missing_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return (($writer = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)]), $send(self, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }
      else {
        return $send(Opal.const_get_qualified('::', 'Native'), 'call', [self["native"], mid].concat(Opal.to_a(args)), block.$to_proc());
      }
    
    }, TMP_Object_method_missing_35.$$arity = -2);
    
    Opal.defn(self, '$nil?', TMP_Object_nil$q_36 = function() {
      var self = this;

      return false
    }, TMP_Object_nil$q_36.$$arity = 0);
    
    Opal.defn(self, '$is_a?', TMP_Object_is_a$q_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass)
    }, TMP_Object_is_a$q_37.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.defn(self, '$instance_of?', TMP_Object_instance_of$q_38 = function(klass) {
      var self = this;

      return self.$$class === klass
    }, TMP_Object_instance_of$q_38.$$arity = 1);
    
    Opal.defn(self, '$class', TMP_Object_class_39 = function() {
      var self = this;

      return self.$$class
    }, TMP_Object_class_39.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_Object_to_a_40 = function $$to_a(options) {
      var self = this, $iter = TMP_Object_to_a_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Object_to_a_40.$$p = null;
      return $send(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a()
    }, TMP_Object_to_a_40.$$arity = -1);
    return (Opal.defn(self, '$inspect', TMP_Object_inspect_41 = function $$inspect() {
      var self = this;

      return "" + "#<Native:" + (String(self["native"])) + ">"
    }, TMP_Object_inspect_41.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_initialize_42, TMP_Array_each_43, TMP_Array_$$_44, TMP_Array_$$$eq_45, TMP_Array_last_46, TMP_Array_length_47, TMP_Array_inspect_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Native'));
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    
    Opal.defn(self, '$initialize', TMP_Array_initialize_42 = function $$initialize(native$, options) {
      var $a, self = this, $iter = TMP_Array_initialize_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Array_initialize_42.$$p = null;
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_42, false), [native$], null);
      self.get = ($truthy($a = options['$[]']("get")) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ($truthy($a = options['$[]']("set")) ? $a : options['$[]']("access"));
      self.length = ($truthy($a = options['$[]']("length")) ? $a : "length");
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_Array_initialize_42.$$arity = -2);
    
    Opal.defn(self, '$each', TMP_Array_each_43 = function $$each() {
      var self = this, $iter = TMP_Array_each_43.$$p, block = $iter || nil;

      if ($iter) TMP_Array_each_43.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_Array_each_43.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Array_$$_44 = function(index) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = index;
      if (Opal.const_get_relative($nesting, 'String')['$===']($case) || Opal.const_get_relative($nesting, 'Symbol')['$===']($case)) {if ($truthy(self.named)) {
        return self["native"][self.named](index)
        } else {
        return self["native"][index]
      }}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {if ($truthy(self.get)) {
        return self["native"][self.get](index)
        } else {
        return self["native"][index]
      }}
      else { return nil }})();
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_Array_$$_44.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Array_$$$eq_45 = function(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, Opal.const_get_relative($nesting, 'Native').$convert(value))
        } else {
        return self["native"][index] = Opal.const_get_relative($nesting, 'Native').$convert(value)
      }
    }, TMP_Array_$$$eq_45.$$arity = 2);
    
    Opal.defn(self, '$last', TMP_Array_last_46 = function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      }
    }, TMP_Array_last_46.$$arity = -1);
    
    Opal.defn(self, '$length', TMP_Array_length_47 = function $$length() {
      var self = this;

      return self["native"][self.length]
    }, TMP_Array_length_47.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    return (Opal.defn(self, '$inspect', TMP_Array_inspect_48 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, TMP_Array_inspect_48.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_n_49;

    return (Opal.defn(self, '$to_n', TMP_Numeric_to_n_49 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Numeric_to_n_49.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_to_n_50;

    return (Opal.defn(self, '$to_n', TMP_Proc_to_n_50 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Proc_to_n_50.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_n_51;

    return (Opal.defn(self, '$to_n', TMP_String_to_n_51 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_String_to_n_51.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Regexp_to_n_52;

    return (Opal.defn(self, '$to_n', TMP_Regexp_to_n_52 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Regexp_to_n_52.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MatchData_to_n_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_MatchData_to_n_53 = function $$to_n() {
      var self = this;

      return self.matches
    }, TMP_MatchData_to_n_53.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Struct_to_n_55;

    return (Opal.defn(self, '$to_n', TMP_Struct_to_n_55 = function $$to_n() {
      var TMP_54, self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value)}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54));
      return result;
    }, TMP_Struct_to_n_55.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_n_56;

    return (Opal.defn(self, '$to_n', TMP_Array_to_n_56 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push(Opal.const_get_relative($nesting, 'Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_Array_to_n_56.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_n_57;

    return (Opal.defn(self, '$to_n', TMP_Boolean_to_n_57 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Boolean_to_n_57.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_n_58;

    return (Opal.defn(self, '$to_n', TMP_Time_to_n_58 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Time_to_n_58.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_n_59;

    return (Opal.defn(self, '$to_n', TMP_NilClass_to_n_59 = function $$to_n() {
      var self = this;

      return null
    }, TMP_NilClass_to_n_59.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_initialize_60, TMP_Hash_to_n_61;

    
    self.$alias_method("_initialize", "initialize");
    
    Opal.defn(self, '$initialize', TMP_Hash_initialize_60 = function $$initialize(defaults) {
      var self = this, $iter = TMP_Hash_initialize_60.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_initialize_60.$$p = null;
      
      if (defaults != null &&
           (defaults.constructor === undefined ||
             defaults.constructor === Object)) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value &&
               (value.constructor === undefined ||
                 value.constructor === Object)) {
            smap[key] = Opal.const_get_relative($nesting, 'Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item &&
                   (item.constructor === undefined ||
                     item.constructor === Object)) {
                return Opal.const_get_relative($nesting, 'Hash').$new(item);
              }

              return self.$Native(item);
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return $send(self, '_initialize', [defaults], block.$to_proc());
    
    }, TMP_Hash_initialize_60.$$arity = -1);
    return (Opal.defn(self, '$to_n', TMP_Hash_to_n_61 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_Hash_to_n_61.$$arity = 0), nil) && 'to_n';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_native_module_62;

    return (Opal.defn(self, '$native_module', TMP_Module_native_module_62 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, TMP_Module_native_module_62.$$arity = 0), nil) && 'native_module'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_native_alias_63, TMP_Class_native_class_64;

    
    
    Opal.defn(self, '$native_alias', TMP_Class_native_alias_63 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    
    }, TMP_Class_native_alias_63.$$arity = 2);
    return (Opal.defn(self, '$native_class', TMP_Class_native_class_64 = function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, TMP_Class_native_class_64.$$arity = 0), nil) && 'native_class';
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/observable"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tap', '$send', '$to_proc', '$call', '$include?', '$respond_to?', '$lambda']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Observable(){};
      var self = $Observable = $klass($base, $super, 'Observable', $Observable);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Observable_initialize_1, TMP_Observable_method_missing_2, TMP_Observable_respond_to$q_4, TMP_Observable_call_5, TMP_Observable_to_proc_7;

      def.value = def.on_change = nil;
      
      
      Opal.defn(self, '$initialize', TMP_Observable_initialize_1 = function $$initialize(value, on_change) {
        var $a, self = this, $iter = TMP_Observable_initialize_1.$$p, block = $iter || nil;

        if (on_change == null) {
          on_change = nil;
        }
        if ($iter) TMP_Observable_initialize_1.$$p = null;
        
        self.value = value;
        return (self.on_change = ($truthy($a = on_change) ? $a : block));
      }, TMP_Observable_initialize_1.$$arity = -2);
      
      Opal.defn(self, '$method_missing', TMP_Observable_method_missing_2 = function $$method_missing(method_sym, $a_rest) {
        var TMP_3, self = this, args, $iter = TMP_Observable_method_missing_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_Observable_method_missing_2.$$p = null;
        return $send($send(self.value, 'send', [method_sym].concat(Opal.to_a(args)), block.$to_proc()), 'tap', [], (TMP_3 = function(result){var self = TMP_3.$$s || this;
          if (self.on_change == null) self.on_change = nil;
          if (self.value == null) self.value = nil;
if (result == null) result = nil;
        return self.on_change.$call(self.value)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
      }, TMP_Observable_method_missing_2.$$arity = -2);
      
      Opal.defn(self, '$respond_to?', TMP_Observable_respond_to$q_4 = function(method, $a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($truthy(["call", "to_proc"]['$include?'](method))) {
          return true
          } else {
          return $send(self.value, 'respond_to?', [method].concat(Opal.to_a(args)))
        }
      }, TMP_Observable_respond_to$q_4.$$arity = -2);
      
      Opal.defn(self, '$call', TMP_Observable_call_5 = function $$call(new_value) {
        var self = this;

        
        self.on_change.$call(new_value);
        return (self.value = new_value);
      }, TMP_Observable_call_5.$$arity = 1);
      return (Opal.defn(self, '$to_proc', TMP_Observable_to_proc_7 = function $$to_proc() {
        var TMP_6, self = this;

        return $send(self, 'lambda', [], (TMP_6 = function(arg){var self = TMP_6.$$s || this;
          if (self.value == null) self.value = nil;
          if (self.on_change == null) self.on_change = nil;

          if (arg == null) {
            arg = self.value;
          }
        return self.on_change.$call(arg)}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6))
      }, TMP_Observable_to_proc_7.$$arity = 0), nil) && 'to_proc';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/validator"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$private', '$new', '$build', '$to_proc', '$instance_eval', '$[]=', '$-', '$define_rule', '$define_all_others', '$props_wrapper', '$reject', '$[]', '$rules', '$errors=', '$allow_undefined_props?', '$validate_undefined', '$coerce_native_hash_values', '$defined_props', '$validate_required', '$each', '$validate_types', '$validate_allowed', '$errors', '$inject', '$select', '$include?', '$keys', '$!', '$define_param', '$is_a?', '$type_check', '$>', '$length', '$validate_value_array', '$nil?', '$respond_to?', '$_react_param_conversion', '$<<', '$each_with_index', '$Native']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Validator(){};
      var self = $Validator = $klass($base, $super, 'Validator', $Validator);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Validator_initialize_1, TMP_Validator_build_2, TMP_Validator_build_3, TMP_Validator_requires_4, TMP_Validator_optional_5, TMP_Validator_all_other_params_8, TMP_Validator_validate_10, TMP_Validator_default_props_13, TMP_Validator_defined_props_15, TMP_Validator_allow_undefined_props$q_16, TMP_Validator_rules_17, TMP_Validator_define_rule_18, TMP_Validator_errors_19, TMP_Validator_validate_types_20, TMP_Validator_type_check_21, TMP_Validator_validate_allowed_22, TMP_Validator_validate_required_24, TMP_Validator_validate_undefined_26, TMP_Validator_validate_value_array_28, TMP_Validator_coerce_native_hash_values_30;

      def.allow_undefined_props = def.rules = def.errors = nil;
      
      self.$attr_accessor("errors");
      self.$attr_reader("props_wrapper");
      self.$private("errors", "props_wrapper");
      
      Opal.defn(self, '$initialize', TMP_Validator_initialize_1 = function $$initialize(props_wrapper) {
        var self = this;

        if (props_wrapper == null) {
          props_wrapper = Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Component'), 'PropsWrapper'));
        }
        return (self.props_wrapper = props_wrapper)
      }, TMP_Validator_initialize_1.$$arity = -1);
      Opal.defs(self, '$build', TMP_Validator_build_2 = function $$build() {
        var self = this, $iter = TMP_Validator_build_2.$$p, block = $iter || nil;

        if ($iter) TMP_Validator_build_2.$$p = null;
        return $send(self.$new(), 'build', [], block.$to_proc())
      }, TMP_Validator_build_2.$$arity = 0);
      
      Opal.defn(self, '$build', TMP_Validator_build_3 = function $$build() {
        var self = this, $iter = TMP_Validator_build_3.$$p, block = $iter || nil;

        if ($iter) TMP_Validator_build_3.$$p = null;
        
        $send(self, 'instance_eval', [], block.$to_proc());
        return self;
      }, TMP_Validator_build_3.$$arity = 0);
      
      Opal.defn(self, '$requires', TMP_Validator_requires_4 = function $$requires(name, options) {
        var self = this, $writer = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        
        
        $writer = ["required", true];
        $send(options, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$define_rule(name, options);
      }, TMP_Validator_requires_4.$$arity = -2);
      
      Opal.defn(self, '$optional', TMP_Validator_optional_5 = function $$optional(name, options) {
        var self = this, $writer = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        
        
        $writer = ["required", false];
        $send(options, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$define_rule(name, options);
      }, TMP_Validator_optional_5.$$arity = -2);
      
      Opal.defn(self, '$all_other_params', TMP_Validator_all_other_params_8 = function $$all_other_params(name) {
        var TMP_6, self = this;

        
        self.allow_undefined_props = true;
        return $send(self.$props_wrapper(), 'define_all_others', [name], (TMP_6 = function(props){var self = TMP_6.$$s || this, TMP_7;
if (props == null) props = nil;
        return $send(props, 'reject', [], (TMP_7 = function(name, value){var self = TMP_7.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return self.$rules()['$[]'](name)}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
      }, TMP_Validator_all_other_params_8.$$arity = 1);
      
      Opal.defn(self, '$validate', TMP_Validator_validate_10 = function $$validate(props) {
        var TMP_9, self = this, $writer = nil;

        
        
        $writer = [[]];
        $send(self, 'errors=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(self['$allow_undefined_props?']())) {
          } else {
          self.$validate_undefined(props)
        };
        props = self.$coerce_native_hash_values(self.$defined_props(props));
        self.$validate_required(props);
        $send(props, 'each', [], (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
        
          self.$validate_types(name, value);
          return self.$validate_allowed(name, value);}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9));
        return self.$errors();
      }, TMP_Validator_validate_10.$$arity = 1);
      
      Opal.defn(self, '$default_props', TMP_Validator_default_props_13 = function $$default_props() {
        var TMP_11, TMP_12, self = this;

        return $send($send(self.$rules(), 'select', [], (TMP_11 = function(key, value){var self = TMP_11.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return value.$keys()['$include?']("default")}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11)), 'inject', [$hash2([], {})], (TMP_12 = function(memo, $a){var self = TMP_12.$$s || this, $a_args, k, v, $writer = nil;

          if ($a == null) {
            $a = nil;
          }
          $a = Opal.to_ary($a);
          $a_args = Opal.slice.call($a, 0, $a.length);
          k = $a_args.splice(0,1)[0];
          if (k == null) {
            k = nil;
          }
          v = $a_args.splice(0,1)[0];
          if (v == null) {
            v = nil;
          }if (memo == null) memo = nil;
        
          
          $writer = [k, v['$[]']("default")];
          $send(memo, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return memo;}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12.$$has_top_level_mlhs_arg = true, TMP_12))
      }, TMP_Validator_default_props_13.$$arity = 0);
      self.$private();
      
      Opal.defn(self, '$defined_props', TMP_Validator_defined_props_15 = function $$defined_props(props) {
        var TMP_14, self = this;

        return $send(props, 'select', [], (TMP_14 = function(name){var self = TMP_14.$$s || this;
if (name == null) name = nil;
        return self.$rules().$keys()['$include?'](name)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14))
      }, TMP_Validator_defined_props_15.$$arity = 1);
      
      Opal.defn(self, '$allow_undefined_props?', TMP_Validator_allow_undefined_props$q_16 = function() {
        var self = this;

        return self.allow_undefined_props['$!']()['$!']()
      }, TMP_Validator_allow_undefined_props$q_16.$$arity = 0);
      
      Opal.defn(self, '$rules', TMP_Validator_rules_17 = function $$rules() {
        var $a, self = this;

        return (self.rules = ($truthy($a = self.rules) ? $a : $hash2(["children"], {"children": $hash2(["required"], {"required": false})})))
      }, TMP_Validator_rules_17.$$arity = 0);
      
      Opal.defn(self, '$define_rule', TMP_Validator_define_rule_18 = function $$define_rule(name, options) {
        var self = this, $writer = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        
        
        $writer = [name, self.$coerce_native_hash_values(options)];
        $send(self.$rules(), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$props_wrapper().$define_param(name, options['$[]']("type"));
      }, TMP_Validator_define_rule_18.$$arity = -2);
      
      Opal.defn(self, '$errors', TMP_Validator_errors_19 = function $$errors() {
        var $a, self = this;

        return (self.errors = ($truthy($a = self.errors) ? $a : []))
      }, TMP_Validator_errors_19.$$arity = 0);
      
      Opal.defn(self, '$validate_types', TMP_Validator_validate_types_20 = function $$validate_types(prop_name, value) {
        var self = this, klass = nil, allow_nil = nil;

        
        if ($truthy((klass = self.$rules()['$[]'](prop_name)['$[]']("type")))) {
          } else {
          return nil
        };
        if ($truthy(klass['$is_a?'](Opal.const_get_relative($nesting, 'Array'))['$!']())) {
          
          allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
          return self.$type_check("" + "`" + (prop_name) + "`", value, klass, allow_nil);
        } else if ($truthy($rb_gt(klass.$length(), 0))) {
          return self.$validate_value_array(prop_name, value)
          } else {
          
          allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
          return self.$type_check("" + "`" + (prop_name) + "`", value, Opal.const_get_relative($nesting, 'Array'), allow_nil);
        };
      }, TMP_Validator_validate_types_20.$$arity = 2);
      
      Opal.defn(self, '$type_check', TMP_Validator_type_check_21 = function $$type_check(prop_name, value, klass, allow_nil) {
        var $a, self = this;

        
        if ($truthy(($truthy($a = allow_nil) ? value['$nil?']() : $a))) {
          return nil};
        if ($truthy(value['$is_a?'](klass))) {
          return nil};
        if ($truthy(($truthy($a = klass['$respond_to?']("_react_param_conversion")) ? klass.$_react_param_conversion(value, "validate_only") : $a))) {
          return nil};
        return self.$errors()['$<<']("" + "Provided prop " + (prop_name) + " could not be converted to " + (klass));
      }, TMP_Validator_type_check_21.$$arity = 4);
      
      Opal.defn(self, '$validate_allowed', TMP_Validator_validate_allowed_22 = function $$validate_allowed(prop_name, value) {
        var self = this, values = nil;

        
        if ($truthy((values = self.$rules()['$[]'](prop_name)['$[]']("values")))) {
          } else {
          return nil
        };
        if ($truthy(values['$include?'](value))) {
          return nil};
        return self.$errors()['$<<']("" + "Value `" + (value) + "` for prop `" + (prop_name) + "` is not an allowed value");
      }, TMP_Validator_validate_allowed_22.$$arity = 2);
      
      Opal.defn(self, '$validate_required', TMP_Validator_validate_required_24 = function $$validate_required(props) {
        var TMP_23, self = this;

        return $send($rb_minus(self.$rules().$keys(), props.$keys()), 'each', [], (TMP_23 = function(name){var self = TMP_23.$$s || this;
if (name == null) name = nil;
        
          if ($truthy(self.$rules()['$[]'](name)['$[]']("required"))) {
            } else {
            return nil;
          };
          return self.$errors()['$<<']("" + "Required prop `" + (name) + "` was not specified");}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23))
      }, TMP_Validator_validate_required_24.$$arity = 1);
      
      Opal.defn(self, '$validate_undefined', TMP_Validator_validate_undefined_26 = function $$validate_undefined(props) {
        var TMP_25, self = this;

        return $send($rb_minus(props.$keys(), self.$rules().$keys()), 'each', [], (TMP_25 = function(prop_name){var self = TMP_25.$$s || this;
if (prop_name == null) prop_name = nil;
        return self.$errors()['$<<']("" + "Provided prop `" + (prop_name) + "` not specified in spec")}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25))
      }, TMP_Validator_validate_undefined_26.$$arity = 1);
      
      Opal.defn(self, '$validate_value_array', TMP_Validator_validate_value_array_28 = function $$validate_value_array(name, value) {
        var TMP_27, self = this, klass = nil, allow_nil = nil;

        try {
          
          klass = self.$rules()['$[]'](name)['$[]']("type");
          allow_nil = self.$rules()['$[]'](name)['$[]']("allow_nil")['$!']()['$!']();
          return $send(value, 'each_with_index', [], (TMP_27 = function(item, index){var self = TMP_27.$$s || this;
if (item == null) item = nil;if (index == null) index = nil;
          return self.$type_check("" + "`" + (name) + "`[" + (index) + "]", self.$Native(item), klass['$[]'](0), allow_nil)}, TMP_27.$$s = self, TMP_27.$$arity = 2, TMP_27));
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NoMethodError')])) {
            try {
              return self.$errors()['$<<']("" + "Provided prop `" + (name) + "` was not an Array")
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_Validator_validate_value_array_28.$$arity = 2);
      return (Opal.defn(self, '$coerce_native_hash_values', TMP_Validator_coerce_native_hash_values_30 = function $$coerce_native_hash_values(hash) {
        var TMP_29, self = this;

        return $send(hash, 'each', [], (TMP_29 = function(key, value){var self = TMP_29.$$s || this, $writer = nil;
if (key == null) key = nil;if (value == null) value = nil;
        
          $writer = [key, self.$Native(value)];
          $send(hash, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29))
      }, TMP_Validator_coerce_native_hash_values_30.$$arity = 1), nil) && 'coerce_native_hash_values';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/ext/string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_event_camelize_1;

    return (Opal.defn(self, '$event_camelize', TMP_String_event_camelize_1 = function $$event_camelize() {
      var self = this;

      return self.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = true;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    })
    }, TMP_String_event_camelize_1.$$arity = 0), nil) && 'event_camelize'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/element"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$alias_native', '$attr_reader', '$attr_accessor', '$each', '$merge_event_prop!', '$to_proc', '$shallow_to_n', '$empty?', '$render', '$convert_props', '$new', '$type', '$merge', '$block', '$delete', '$rendered?', '$method_missing', '$dup', '$replace', '$build', '$build_new_properties', '$gsub', '$private', '$haml_class_name', '$class', '$join', '$uniq', '$split', '$[]', '$[]=', '$-', '$merge!', '$=~', '$merge_component_event_prop!', '$include?', '$event_camelize', '$merge_built_in_event_prop!', '$instance_variable_get', '$Array']);
  
  self.$require("react/ext/string");
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Element(){};
      var self = $Element = $klass($base, $super, 'Element', $Element);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_initialize_1, TMP_Element_on_2, TMP_Element_render_4, TMP_Element_delete_5, TMP_Element_method_missing_6, TMP_Element_rendered$q_8, TMP_Element_haml_class_name_9, TMP_Element_build_new_properties_10, TMP_Element_merge_event_prop$B_11, TMP_Element_merge_built_in_event_prop$B_12, TMP_Element_merge_component_event_prop$B_13;

      def["native"] = def.properties = def.type = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      self.$alias_native("element_type", "type");
      self.$alias_native("props", "props");
      self.$attr_reader("type");
      self.$attr_reader("properties");
      self.$attr_reader("block");
      self.$attr_accessor("waiting_on_resources");
      
      Opal.defn(self, '$initialize', TMP_Element_initialize_1 = function $$initialize(native_element, type, properties, block) {
        var $a, self = this;

        if (type == null) {
          type = nil;
        }
        if (properties == null) {
          properties = $hash2([], {});
        }
        if (block == null) {
          block = nil;
        }
        
        self.type = type;
        self.properties = ($truthy($a = (function() {if ($truthy(typeof properties === 'undefined')) {
          return nil
          } else {
          return properties
        }; return nil; })()) ? $a : $hash2([], {}));
        self.block = block;
        return (self["native"] = native_element);
      }, TMP_Element_initialize_1.$$arity = -2);
      
      Opal.defn(self, '$on', TMP_Element_on_2 = function $$on($a_rest) {
        var TMP_3, self = this, event_names, $iter = TMP_Element_on_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        event_names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          event_names[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_Element_on_2.$$p = null;
        
        $send(event_names, 'each', [], (TMP_3 = function(event_name){var self = TMP_3.$$s || this;
if (event_name == null) event_name = nil;
        return $send(self, 'merge_event_prop!', [event_name], block.$to_proc())}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
        self["native"] = React.cloneElement(self["native"], self.properties.$shallow_to_n());
        return self;
      }, TMP_Element_on_2.$$arity = -1);
      
      Opal.defn(self, '$render', TMP_Element_render_4 = function $$render(props) {
        var self = this, $iter = TMP_Element_render_4.$$p, new_block = $iter || nil;

        if (props == null) {
          props = $hash2([], {});
        }
        if ($iter) TMP_Element_render_4.$$p = null;
        if ($truthy(props['$empty?']())) {
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext').$render(self)
          } else {
          
          props = Opal.const_get_relative($nesting, 'API').$convert_props(props);
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext').$render(Opal.const_get_relative($nesting, 'Element').$new(React.cloneElement(self["native"], props.$shallow_to_n()), self.$type(), self.properties.$merge(props), self.$block()));
        }
      }, TMP_Element_render_4.$$arity = -1);
      
      Opal.defn(self, '$delete', TMP_Element_delete_5 = function() {
        var self = this;

        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext').$delete(self)
      }, TMP_Element_delete_5.$$arity = 0);
      Opal.alias(self, "as_node", "delete");
      
      Opal.defn(self, '$method_missing', TMP_Element_method_missing_6 = function $$method_missing(class_name, args) {
        var TMP_7, self = this, $iter = TMP_Element_method_missing_6.$$p, new_block = $iter || nil;

        if (args == null) {
          args = $hash2([], {});
        }
        if ($iter) TMP_Element_method_missing_6.$$p = null;
        
        if ($truthy(self['$rendered?']())) {
          } else {
          return $send(self.$dup().$render(), 'method_missing', [class_name, args], new_block.$to_proc())
        };
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext').$replace(self, $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'build', [], (TMP_7 = function(){var self = TMP_7.$$s || this;

        return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [self.$type(), self.$build_new_properties(class_name, args)], new_block.$to_proc())}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7)));
      }, TMP_Element_method_missing_6.$$arity = -2);
      
      Opal.defn(self, '$rendered?', TMP_Element_rendered$q_8 = function() {
        var self = this;

        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext')['$rendered?'](self)
      }, TMP_Element_rendered$q_8.$$arity = 0);
      Opal.defs(self, '$haml_class_name', TMP_Element_haml_class_name_9 = function $$haml_class_name(class_name) {
        var self = this;

        return class_name.$gsub(/__|_/, $hash2(["__", "_"], {"__": "_", "_": "-"}))
      }, TMP_Element_haml_class_name_9.$$arity = 1);
      self.$private();
      
      Opal.defn(self, '$build_new_properties', TMP_Element_build_new_properties_10 = function $$build_new_properties(class_name, args) {
        var self = this, new_props = nil, $writer = nil;

        
        class_name = self.$class().$haml_class_name(class_name);
        new_props = self.properties.$dup();
        
        $writer = ["className", ((((((((("" + "\n        ") + (class_name)) + " ") + (new_props['$[]']("className"))) + " ") + (args.$delete("class"))) + " ") + (args.$delete("className"))) + "\n      ").$split(" ").$uniq().$join(" ")];
        $send(new_props, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return new_props['$merge!'](args);
      }, TMP_Element_build_new_properties_10.$$arity = 2);
      
      Opal.defn(self, '$merge_event_prop!', TMP_Element_merge_event_prop$B_11 = function(event_name) {
        var self = this, $iter = TMP_Element_merge_event_prop$B_11.$$p, block = $iter || nil, name = nil;

        if ($iter) TMP_Element_merge_event_prop$B_11.$$p = null;
        if ($truthy(event_name['$=~'](/^<(.+)>$/))) {
          return $send(self, 'merge_component_event_prop!', [event_name.$gsub(/^<(.+)>$/, "\\1")], block.$to_proc())
        } else if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Event'), 'BUILT_IN_EVENTS')['$include?']((name = "" + "on" + (event_name.$event_camelize()))))) {
          return $send(self, 'merge_built_in_event_prop!', [name], block.$to_proc())
        } else if ($truthy(self.type.$instance_variable_get("@native_import"))) {
          return $send(self, 'merge_component_event_prop!', [name], block.$to_proc())
          } else {
          return $send(self, 'merge_component_event_prop!', ["" + "on_" + (event_name)], block.$to_proc())
        }
      }, TMP_Element_merge_event_prop$B_11.$$arity = 1);
      
      Opal.defn(self, '$merge_built_in_event_prop!', TMP_Element_merge_built_in_event_prop$B_12 = function(prop_name) {
        var self = this, $iter = TMP_Element_merge_built_in_event_prop$B_12.$$p, $yield = $iter || nil;

        if ($iter) TMP_Element_merge_built_in_event_prop$B_12.$$p = null;
        return self.properties['$merge!']($hash(prop_name, 
          function(){
            var react_event = arguments[0];
            var all_args;
            var other_args;
            if (arguments.length > 1) {
              all_args = Array.prototype.slice.call(arguments);
              other_args = all_args.slice(1, arguments.length);
              return Opal.yieldX($yield, [Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Event').$new(react_event)].concat(Opal.to_a((other_args))));
            } else {
              return Opal.yield1($yield, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Event').$new(react_event));
            }
          }
        ))
      }, TMP_Element_merge_built_in_event_prop$B_12.$$arity = 1);
      return (Opal.defn(self, '$merge_component_event_prop!', TMP_Element_merge_component_event_prop$B_13 = function(prop_name) {
        var self = this, $iter = TMP_Element_merge_component_event_prop$B_13.$$p, $yield = $iter || nil;

        if ($iter) TMP_Element_merge_component_event_prop$B_13.$$p = null;
        return self.properties['$merge!']($hash(prop_name, 
          function(){
            return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
          }
        ))
      }, TMP_Element_merge_component_event_prop$B_13.$$arity = 1), nil) && 'merge_component_event_prop!';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/native_library"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$each', '$lookup_native_name', '$create_component_wrapper', '$create_library_wrapper', '$raise', '$name', '$scope_native_name', '$+', '$downcase', '$[]', '$import_const_from_native', '$const_defined?', '$const_get', '$render', '$to_proc', '$private', '$native_react_component?', '$const_set', '$new', '$class_eval', '$include', '$imports']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $NativeLibrary(){};
      var self = $NativeLibrary = $klass($base, $super, 'NativeLibrary', $NativeLibrary);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_imports_1, TMP_rename_3, TMP_import_const_from_native_4, TMP_const_missing_5, TMP_method_missing_6, TMP_lookup_native_name_7, TMP_scope_native_name_8, TMP_create_component_wrapper_10, TMP_create_library_wrapper_11;

        
        
        Opal.defn(self, '$imports', TMP_imports_1 = function $$imports(native_name) {
          var self = this;

          
          self.native_prefix = "" + (native_name) + ".";
          return self;
        }, TMP_imports_1.$$arity = 1);
        
        Opal.defn(self, '$rename', TMP_rename_3 = function $$rename(rename_list) {
          var TMP_2, self = this;

          return $send(rename_list, 'each', [], (TMP_2 = function(js_name, ruby_name){var self = TMP_2.$$s || this, $a, native_name = nil;
if (js_name == null) js_name = nil;if (ruby_name == null) ruby_name = nil;
          
            native_name = self.$lookup_native_name(js_name);
            if ($truthy(self.$lookup_native_name(js_name))) {
              return ($truthy($a = self.$create_component_wrapper(self, native_name, ruby_name)) ? $a : self.$create_library_wrapper(self, native_name, ruby_name))
              } else {
              return self.$raise("" + ("" + "class " + (self.$name()) + " < React::NativeLibrary could not import " + (js_name) + ". ") + ("" + "Native value " + (self.$scope_native_name(js_name)) + " is undefined."))
            };}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2))
        }, TMP_rename_3.$$arity = 1);
        
        Opal.defn(self, '$import_const_from_native', TMP_import_const_from_native_4 = function $$import_const_from_native(klass, const_name, create_library) {
          var $a, $b, $c, self = this, native_name = nil;

          
          native_name = ($truthy($a = self.$lookup_native_name(const_name)) ? $a : self.$lookup_native_name($rb_plus(const_name['$[]'](0).$downcase(), const_name['$[]']($range(1, -1, false)))));
          return ($truthy($a = native_name) ? ($truthy($b = self.$create_component_wrapper(klass, native_name, const_name)) ? $b : ($truthy($c = create_library) ? self.$create_library_wrapper(klass, native_name, const_name) : $c)) : $a);
        }, TMP_import_const_from_native_4.$$arity = 3);
        
        Opal.defn(self, '$const_missing', TMP_const_missing_5 = function $$const_missing(const_name) {
          var $a, self = this, $iter = TMP_const_missing_5.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) TMP_const_missing_5.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return ($truthy($a = self.$import_const_from_native(self, const_name, true)) ? $a : $send(self, Opal.find_super_dispatcher(self, 'const_missing', TMP_const_missing_5, false), $zuper, $iter))
        }, TMP_const_missing_5.$$arity = 1);
        
        Opal.defn(self, '$method_missing', TMP_method_missing_6 = function $$method_missing(method, $a_rest) {
          var $b, self = this, args, $iter = TMP_method_missing_6.$$p, block = $iter || nil, component_class = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_method_missing_6.$$p = null;
          
          if ($truthy(self['$const_defined?'](method, false))) {
            component_class = self.$const_get(method)};
          component_class = ($truthy($b = component_class) ? $b : self.$import_const_from_native(self, method, false));
          if ($truthy(component_class)) {
            } else {
            self.$raise("" + "could not import a react component named: " + ("" + (self.$scope_native_name(method))))
          };
          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', [component_class].concat(Opal.to_a(args)), block.$to_proc());
        }, TMP_method_missing_6.$$arity = -2);
        self.$private();
        
        Opal.defn(self, '$lookup_native_name', TMP_lookup_native_name_7 = function $$lookup_native_name(js_name) {
          var self = this, native_name = nil;

          try {
            
            native_name = self.$scope_native_name(js_name);
            return eval(native_name) !== undefined && native_name;
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        }, TMP_lookup_native_name_7.$$arity = 1);
        
        Opal.defn(self, '$scope_native_name', TMP_scope_native_name_8 = function $$scope_native_name(js_name) {
          var self = this;
          if (self.native_prefix == null) self.native_prefix = nil;

          return "" + (self.native_prefix) + (js_name)
        }, TMP_scope_native_name_8.$$arity = 1);
        
        Opal.defn(self, '$create_component_wrapper', TMP_create_component_wrapper_10 = function $$create_component_wrapper(klass, native_name, ruby_name) {
          var TMP_9, self = this, new_klass = nil;

          if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'API')['$native_react_component?'](native_name))) {
            
            new_klass = klass.$const_set(ruby_name, Opal.const_get_relative($nesting, 'Class').$new());
            $send(new_klass, 'class_eval', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

            
              self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'), 'Mixin'));
              return self.$imports(native_name);}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
            return new_klass;
            } else {
            return nil
          }
        }, TMP_create_component_wrapper_10.$$arity = 3);
        return (Opal.defn(self, '$create_library_wrapper', TMP_create_library_wrapper_11 = function $$create_library_wrapper(klass, native_name, ruby_name) {
          var self = this;

          return klass.$const_set(ruby_name, Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'NativeLibrary')).$imports(native_name))
        }, TMP_create_library_wrapper_11.$$arity = 3), nil) && 'create_library_wrapper';
      })(Opal.get_singleton_class(self), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/api"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$instance_variable_set', '$[]=', '$-', '$raise', '$eval_native_react_component', '$add_after_error_hook_to_native', '$[]', '$!', '$method_defined?', '$respond_to?', '$native_mixins', '$to_n', '$static_call_backs', '$new', '$name', '$default_props', '$prop_types', '$!=', '$callbacks_for', '$<<', '$is_a?', '$create_native_react_class', '$include?', '$convert_props', '$shallow_to_n', '$flatten', '$each', '$split', '$==', '$merge', '$lower_camelize', '$join', '$to_key', '$call', '$gsub', '$html_attr?', '$private', '$first', '$concat', '$map', '$+', '$upcase']);
  
  self.$require("react/native_library");
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $API(){};
      var self = $API = $klass($base, $super, 'API', $API);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_API_import_native_component_1, TMP_API_eval_native_react_component_2, TMP_API_native_react_component$q_3, TMP_API_add_after_error_hook_4, TMP_API_add_after_error_hook_to_native_5, TMP_API_create_native_react_class_6, TMP_API_create_element_7, TMP_API_clear_component_class_cache_8, TMP_API_convert_props_13, TMP_API_lower_camelize_15;

      
      (Opal.class_variable_set($API, '@@component_classes', $hash2([], {})));
      Opal.defs(self, '$import_native_component', TMP_API_import_native_component_1 = function $$import_native_component(opal_class, native_class) {
        var $a, self = this, $writer = nil;

        
        opal_class.$instance_variable_set("@native_import", true);
        
        $writer = [opal_class, native_class];
        $send((($a = $API.$$cvars['@@component_classes']) == null ? nil : $a), '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_API_import_native_component_1.$$arity = 2);
      Opal.defs(self, '$eval_native_react_component', TMP_API_eval_native_react_component_2 = function $$eval_native_react_component(name) {
        var $a, $b, self = this, component = nil, is_component_class = nil, is_functional_component = nil;

        
        component = eval(name);
        if ($truthy(component === undefined)) {
          self.$raise("" + (name) + " is not defined")};
        is_component_class = ($truthy($a = component.prototype !== undefined) ? ($truthy($b = !!component.prototype.isReactComponent) ? $b : !!component.prototype.render) : $a);
        is_functional_component = typeof component === "function";
        if ($truthy(($truthy($a = is_component_class) ? $a : is_functional_component))) {
          } else {
          self.$raise("does not appear to be a native react component")
        };
        return component;
      }, TMP_API_eval_native_react_component_2.$$arity = 1);
      Opal.defs(self, '$native_react_component?', TMP_API_native_react_component$q_3 = function(name) {
        var self = this;

        if (name == null) {
          name = nil;
        }
        try {
          
          if ($truthy(name)) {
            } else {
            return false
          };
          return self.$eval_native_react_component(name);
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
            try {
              return nil
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_API_native_react_component$q_3.$$arity = -1);
      Opal.defs(self, '$add_after_error_hook', TMP_API_add_after_error_hook_4 = function $$add_after_error_hook(klass) {
        var $a, self = this;

        return self.$add_after_error_hook_to_native((($a = $API.$$cvars['@@component_classes']) == null ? nil : $a)['$[]'](klass))
      }, TMP_API_add_after_error_hook_4.$$arity = 1);
      Opal.defs(self, '$add_after_error_hook_to_native', TMP_API_add_after_error_hook_to_native_5 = function $$add_after_error_hook_to_native(native_comp) {
        var self = this;

        
        if ($truthy(native_comp)) {
          } else {
          return nil
        };
        
        native_comp.prototype.componentDidCatch = function(error, info) {
          this.__opalInstanceSyncSetState = false;
          this.__opalInstance.$component_did_catch(error, Opal.Hash.$new(info));
        }
      ;
      }, TMP_API_add_after_error_hook_to_native_5.$$arity = 1);
      Opal.defs(self, '$create_native_react_class', TMP_API_create_native_react_class_6 = function $$create_native_react_class(type) {
        var $a, $b, self = this, render_fn = nil, $writer = nil, comp = nil;

        
        if ($truthy(type['$method_defined?']("render")['$!']())) {
          self.$raise("Provided class should define `render` method")};
        render_fn = (function() {if ($truthy(type['$method_defined?']("_render_wrapper"))) {
          return "_render_wrapper"
          } else {
          return "render"
        }; return nil; })();
        return ($truthy($a = (($b = $API.$$cvars['@@component_classes']) == null ? nil : $b)['$[]'](type)) ? $a : (($writer = [type, ((comp = 
          class extends React.Component {
            constructor(props) {
              super(props);
              this.mixins = (function() {if ($truthy(type['$respond_to?']("native_mixins"))) {
          return type.$native_mixins()
          } else {
          return []
        }; return nil; })();
              this.statics = (function() {if ($truthy(type['$respond_to?']("static_call_backs"))) {
          return type.$static_call_backs().$to_n()
          } else {
          return {}
        }; return nil; })();
              this.state = {};
              this.__opalInstanceInitializedState = false;
              this.__opalInstanceSyncSetState = true;
              this.__opalInstance = type.$new(this);
              this.__opalInstanceInitializedState = true;
              this.__opalInstanceSyncSetState = false;
              this.__name = type.$name();
            }
            static get displayName() {
              if (typeof this.__name != "undefined") {
                return this.__name;
              } else {
                return type.$name();
              }
            }
            static set displayName(name) {
              this.__name = name;
            }
            static get defaultProps() {
              return (function() {if ($truthy(type['$respond_to?']("default_props"))) {
          return type.$default_props().$to_n()
          } else {
          return {}
        }; return nil; })();
            }
            static get propTypes() {
              return  (function() {if ($truthy(type['$respond_to?']("prop_types"))) {
          return type.$prop_types().$to_n()
          } else {
          return {}
        }; return nil; })();
            }
            componentWillMount() {
              if (type['$method_defined?']("component_will_mount")) {
                this.__opalInstanceSyncSetState = true;
                this.__opalInstance.$component_will_mount();
                this.__opalInstanceSyncSetState = false;
              }
            }
            componentDidMount() {
              this.__opalInstance.is_mounted = true
              if (type['$method_defined?']("component_did_mount")) {
                this.__opalInstanceSyncSetState = false;
                this.__opalInstance.$component_did_mount();
              }
            }
            componentWillReceiveProps(next_props) {
              if (type['$method_defined?']("component_will_receive_props")) {
                this.__opalInstanceSyncSetState = true;
                this.__opalInstance.$component_will_receive_props(Opal.Hash.$new(next_props));
                this.__opalInstanceSyncSetState = false;
              }
            }
            shouldComponentUpdate(next_props, next_state) {
              if (type['$method_defined?']("should_component_update?")) {
                this.__opalInstanceSyncSetState = false;
                return this.__opalInstance["$should_component_update?"](Opal.Hash.$new(next_props), Opal.Hash.$new(next_state));
              } else { return true; }
            }
            componentWillUpdate(next_props, next_state) {
              if (type['$method_defined?']("component_will_update")) {
                this.__opalInstanceSyncSetState = false;
                this.__opalInstance.$component_will_update(Opal.Hash.$new(next_props), Opal.Hash.$new(next_state));
              }
            }
            componentDidUpdate(prev_props, prev_state) {
              if (type['$method_defined?']("component_did_update")) {
                this.__opalInstanceSyncSetState = false;
                this.__opalInstance.$component_did_update(Opal.Hash.$new(prev_props), Opal.Hash.$new(prev_state));
              }
            }
            componentWillUnmount() {
              if (type['$method_defined?']("component_will_unmount")) {
                this.__opalInstanceSyncSetState = false;
                this.__opalInstance.$component_will_unmount();
              }
              this.__opalInstance.is_mounted = false;
            }

            render() {
              this.__opalInstanceSyncSetState = false;
              return this.__opalInstance.$send(render_fn).$to_n();
            }
          }
        ), (function() {if ($truthy(($truthy($b = type['$respond_to?']("callbacks_for")) ? type.$callbacks_for("after_error")['$!=']([]) : $b))) {
          return self.$add_after_error_hook_to_native(comp)
          } else {
          return nil
        }; return nil; })(), comp)]), $send((($b = $API.$$cvars['@@component_classes']) == null ? nil : $b), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      }, TMP_API_create_native_react_class_6.$$arity = 1);
      Opal.defs(self, '$create_element', TMP_API_create_element_7 = function $$create_element(type, $a_rest) {
        var $b, self = this, args, $iter = TMP_API_create_element_7.$$p, block = $iter || nil, params = nil, ncc = nil, properties = nil, a = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_API_create_element_7.$$p = null;
        
        params = [];
        ncc = (($b = $API.$$cvars['@@component_classes']) == null ? nil : $b)['$[]'](type);
        if ($truthy(ncc)) {
          params['$<<'](ncc)
        } else if ($truthy(type['$is_a?'](Opal.const_get_relative($nesting, 'Class')))) {
          params['$<<'](self.$create_native_react_class(type))
        } else if ($truthy(($truthy($b = (block !== nil)) ? $b : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component'), 'Tags'), 'HTML_TAGS')['$include?'](type)))) {
          params['$<<'](type)
        } else if ($truthy(type['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Element').$new(type)
          } else {
          self.$raise("" + (type) + " not implemented")
        };
        properties = self.$convert_props(args);
        params['$<<'](properties.$shallow_to_n());
        if ((block !== nil)) {
          
          a = [Opal.yieldX(block, [])].$flatten();
          
          for(var i=0, l=a.length; i<l; i++) {
            params.push(a[i].$to_n());
          }
        ;};
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Element').$new(React.createElement.apply(null, params), type, properties, block);
      }, TMP_API_create_element_7.$$arity = -2);
      Opal.defs(self, '$clear_component_class_cache', TMP_API_clear_component_class_cache_8 = function $$clear_component_class_cache() {
        var self = this;

        return (Opal.class_variable_set($API, '@@component_classes', $hash2([], {})))
      }, TMP_API_clear_component_class_cache_8.$$arity = 0);
      Opal.defs(self, '$convert_props', TMP_API_convert_props_13 = function $$convert_props(args) {
        var TMP_9, TMP_11, self = this, properties = nil, props = nil;

        
        properties = $hash2([], {});
        $send(args, 'each', [], (TMP_9 = function(arg){var self = TMP_9.$$s || this, TMP_10, $writer = nil;
if (arg == null) arg = nil;
        if ($truthy(arg['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            
            $writer = [arg, true];
            $send(properties, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else if ($truthy(arg['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
            return $send(arg, 'each', [], (TMP_10 = function(key, value){var self = TMP_10.$$s || this, $a;
if (key == null) key = nil;if (value == null) value = nil;
            if ($truthy(["class", "className", "class_name"]['$include?'](key))) {
                
                if ($truthy(value)) {
                  } else {
                  return nil;
                };
                if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
                  value = value.$split(" ")
                } else if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Array'))['$!']())) {
                  self.$raise("The class param must be a string or array of strings")};
                
                $writer = ["className", [].concat(Opal.to_a(properties['$[]']("className"))).concat(Opal.to_a(value))];
                $send(properties, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if (key['$==']("style")) {
                
                if ($truthy(value)) {
                  } else {
                  return nil;
                };
                if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))['$!']())) {
                  self.$raise("The style param must be a Hash")};
                
                $writer = ["style", ($truthy($a = properties['$[]']("style")) ? $a : $hash2([], {})).$merge(value)];
                $send(properties, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if ($truthy(($truthy($a = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'HASH_ATTRIBUTES')['$include?'](key)) ? value['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $a))) {
                
                $writer = [key, ($truthy($a = properties['$[]'](key)) ? $a : $hash2([], {})).$merge(value)];
                $send(properties, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
                } else {
                
                $writer = [key, value];
                $send(properties, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10))
            } else {
            return nil
          }}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
        props = $hash2([], {});
        $send(properties, 'each', [], (TMP_11 = function(key, value){var self = TMP_11.$$s || this, $a, TMP_12, $writer = nil;
if (key == null) key = nil;if (value == null) value = nil;
        if ($truthy(["style", "dangerously_set_inner_HTML"]['$include?'](key))) {
            
            $writer = [self.$lower_camelize(key), value.$to_n()];
            $send(props, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else if (key['$==']("className")) {
            
            $writer = [key, value.$join(" ")];
            $send(props, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else if (key['$==']("key")) {
            
            $writer = ["key", value.$to_key()];
            $send(props, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else if ($truthy((($a = key['$==']("ref")) ? value['$is_a?'](Opal.const_get_relative($nesting, 'Proc')) : key['$==']("ref")))) {
            
            $writer = [key, 
                          function(dom_node){
                            if (dom_node !== null && dom_node.__opalInstance !== undefined && dom_node.__opalInstance !== null) {
                              value.$call(dom_node.__opalInstance);
                            } else if(dom_node !== null && ReactDOM.findDOMNode !== undefined && dom_node.nodeType === undefined) {
                              value.$call(ReactDOM.findDOMNode(dom_node));
                            } else {
                              value.$call(dom_node);
                            }
                          }
                        ];
            $send(props, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else if ($truthy(($truthy($a = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'HASH_ATTRIBUTES')['$include?'](key)) ? value['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $a))) {
            return $send(value, 'each', [], (TMP_12 = function(k, v){var self = TMP_12.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
            
              $writer = ["" + (key) + "-" + (k.$gsub(/__|_/, $hash2(["__", "_"], {"__": "_", "_": "-"}))), v.$to_n()];
              $send(props, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))
            } else {
            
            $writer = [(function() {if ($truthy(Opal.const_get_relative($nesting, 'React')['$html_attr?'](self.$lower_camelize(key)))) {
              return self.$lower_camelize(key)
              } else {
              return key
            }; return nil; })(), value];
            $send(props, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11));
        return props;
      }, TMP_API_convert_props_13.$$arity = 1);
      self.$private();
      return Opal.defs(self, '$lower_camelize', TMP_API_lower_camelize_15 = function $$lower_camelize(snake_cased_word) {
        var TMP_14, self = this, words = nil, result = nil;

        
        words = snake_cased_word.$split("_");
        result = [words.$first()];
        return result.$concat($send(words['$[]']($range(1, -1, false)), 'map', [], (TMP_14 = function(word){var self = TMP_14.$$s || this;
if (word == null) word = nil;
        return $rb_plus(word['$[]'](0).$upcase(), word['$[]']($range(1, -1, false)))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14))).$join("");
      }, TMP_API_lower_camelize_15.$$arity = 1);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/ext/hash"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each']);
  return (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_shallow_to_n_2;

    return (Opal.defn(self, '$shallow_to_n', TMP_Hash_shallow_to_n_2 = function $$shallow_to_n() {
      var TMP_1, self = this, hash = nil;

      
      hash = {};
      $send(self, 'each', [], (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
      return hash[key] = value}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1));
      return hash;
    }, TMP_Hash_shallow_to_n_2.$$arity = 0), nil) && 'shallow_to_n'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["active_support/core_ext/kernel/singleton_class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$class_eval', '$singleton_class', '$to_proc']);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_class_eval_1;

    
    Opal.defn(self, '$class_eval', TMP_Kernel_class_eval_1 = function $$class_eval($a_rest) {
      var self = this, args, $iter = TMP_Kernel_class_eval_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_class_eval_1.$$p = null;
      return $send(self.$singleton_class(), 'class_eval', Opal.to_a(args), block.$to_proc())
    }, TMP_Kernel_class_eval_1.$$arity = -1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["active_support/core_ext/module/remove_method"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$method_defined?', '$private_method_defined?', '$undef_method', '$remove_possible_method', '$define_method', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_remove_possible_method_1, TMP_Module_redefine_method_2;

    
    
    Opal.defn(self, '$remove_possible_method', TMP_Module_remove_possible_method_1 = function $$remove_possible_method(method) {
      var $a, self = this;

      if ($truthy(($truthy($a = self['$method_defined?'](method)) ? $a : self['$private_method_defined?'](method)))) {
        return self.$undef_method(method)
        } else {
        return nil
      }
    }, TMP_Module_remove_possible_method_1.$$arity = 1);
    return (Opal.defn(self, '$redefine_method', TMP_Module_redefine_method_2 = function $$redefine_method(method) {
      var self = this, $iter = TMP_Module_redefine_method_2.$$p, block = $iter || nil;

      if ($iter) TMP_Module_redefine_method_2.$$p = null;
      
      self.$remove_possible_method(method);
      return $send(self, 'define_method', [method], block.$to_proc());
    }, TMP_Module_redefine_method_2.$$arity = 1), nil) && 'redefine_method';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["active_support/core_ext/array/extract_options"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_of?', '$is_a?', '$last', '$extractable_options?', '$pop']);
  
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_extractable_options$q_1;

    return (Opal.defn(self, '$extractable_options?', TMP_Hash_extractable_options$q_1 = function() {
      var self = this;

      return self['$instance_of?'](Opal.const_get_relative($nesting, 'Hash'))
    }, TMP_Hash_extractable_options$q_1.$$arity = 0), nil) && 'extractable_options?'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_extract_options$B_2;

    return (Opal.defn(self, '$extract_options!', TMP_Array_extract_options$B_2 = function() {
      var $a, self = this;

      if ($truthy(($truthy($a = self.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))) ? self.$last()['$extractable_options?']() : $a))) {
        return self.$pop()
        } else {
        return $hash2([], {})
      }
    }, TMP_Array_extract_options$B_2.$$arity = 0), nil) && 'extract_options!'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["active_support/core_ext/class/attribute"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$extract_options!', '$fetch', '$each', '$define_singleton_method', '$!', '$public_send', '$class_eval', '$singleton_class', '$remove_possible_method', '$define_method', '$singleton_class?', '$instance_variable_defined?', '$instance_variable_get', '$send', '$class', '$attr_writer', '$private', '$respond_to?', '$!=', '$first', '$ancestors']);
  
  self.$require("active_support/core_ext/kernel/singleton_class");
  self.$require("active_support/core_ext/module/remove_method");
  self.$require("active_support/core_ext/array/extract_options");
  return (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_class_attribute_11, TMP_Class_singleton_class$q_12;

    
    
    Opal.defn(self, '$class_attribute', TMP_Class_class_attribute_11 = function $$class_attribute($a_rest) {
      var $b, TMP_1, self = this, attrs, options = nil, instance_reader = nil, instance_writer = nil, instance_predicate = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      attrs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        attrs[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      options = attrs['$extract_options!']();
      instance_reader = ($truthy($b = options.$fetch("instance_accessor", true)) ? options.$fetch("instance_reader", true) : $b);
      instance_writer = ($truthy($b = options.$fetch("instance_accessor", true)) ? options.$fetch("instance_writer", true) : $b);
      instance_predicate = options.$fetch("instance_predicate", true);
      return $send(attrs, 'each', [], (TMP_1 = function(name){var self = TMP_1.$$s || this, TMP_2, TMP_3, TMP_4, TMP_9, TMP_10, ivar = nil;
if (name == null) name = nil;
      
        $send(self, 'define_singleton_method', [name], (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
        if ($truthy(instance_predicate)) {
          $send(self, 'define_singleton_method', ["" + (name) + "?"], (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$public_send(name)['$!']()['$!']()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))};
        ivar = "" + "@" + (name);
        $send(self, 'define_singleton_method', ["" + (name) + "="], (TMP_4 = function(val){var self = TMP_4.$$s || this, TMP_5, TMP_7;
if (val == null) val = nil;
        
          $send(self.$singleton_class(), 'class_eval', [], (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6;

          
            self.$remove_possible_method(name);
            return $send(self, 'define_method', [name], (TMP_6 = function(){var self = TMP_6.$$s || this;

            return val}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
          if ($truthy(self['$singleton_class?']())) {
            $send(self, 'class_eval', [], (TMP_7 = function(){var self = TMP_7.$$s || this, TMP_8;

            
              self.$remove_possible_method(name);
              return $send(self, 'define_method', [name], (TMP_8 = function(){var self = TMP_8.$$s || this;

              if ($truthy(self['$instance_variable_defined?'](ivar))) {
                  return self.$instance_variable_get(ivar)
                  } else {
                  return self.$singleton_class().$send(name)
                }}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))};
          return val;}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        if ($truthy(instance_reader)) {
          
          self.$remove_possible_method(name);
          $send(self, 'define_method', [name], (TMP_9 = function(){var self = TMP_9.$$s || this;

          if ($truthy(self['$instance_variable_defined?'](ivar))) {
              return self.$instance_variable_get(ivar)
              } else {
              return self.$class().$public_send(name)
            }}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
          if ($truthy(instance_predicate)) {
            $send(self, 'define_method', ["" + (name) + "?"], (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$public_send(name)['$!']()['$!']()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10))};};
        if ($truthy(instance_writer)) {
          return self.$attr_writer(name)
          } else {
          return nil
        };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
    }, TMP_Class_class_attribute_11.$$arity = -1);
    self.$private();
    if ($truthy(self['$respond_to?']("singleton_class?"))) {
      return nil
      } else {
      return (Opal.defn(self, '$singleton_class?', TMP_Class_singleton_class$q_12 = function() {
        var $a, self = this;

        return ($truthy($a = true) ? $a : self.$ancestors().$first()['$!='](self))
      }, TMP_Class_singleton_class$q_12.$$arity = 0), nil) && 'singleton_class?'
    };
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/callbacks"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$each', '$callbacks_for', '$class', '$is_a?', '$instance_exec', '$to_proc', '$send', '$define_singleton_method', '$set_var', '$concat', '$push', '$call', '$+', '$respond_to?', '$superclass']);
  
  self.$require("hyperloop-config");
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Callbacks, self = $Callbacks = $module($base, 'Callbacks');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Callbacks_included_1, TMP_Callbacks_run_callback_3;

      
      Opal.defs(self, '$included', TMP_Callbacks_included_1 = function $$included(base) {
        var self = this;

        return base.$extend(Opal.const_get_relative($nesting, 'ClassMethods'))
      }, TMP_Callbacks_included_1.$$arity = 1);
      
      Opal.defn(self, '$run_callback', TMP_Callbacks_run_callback_3 = function $$run_callback(name, $a_rest) {
        var TMP_2, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        return $send(self.$class().$callbacks_for(name), 'each', [], (TMP_2 = function(callback){var self = TMP_2.$$s || this;
if (callback == null) callback = nil;
        if ($truthy(callback['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
            return $send(self, 'instance_exec', Opal.to_a(args), callback.$to_proc())
            } else {
            return $send(self, 'send', [callback].concat(Opal.to_a(args)))
          }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))
      }, TMP_Callbacks_run_callback_3.$$arity = -2);
      (function($base, $parent_nesting) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_define_callback_4, TMP_ClassMethods_callbacks_for_8;

        
        
        Opal.defn(self, '$define_callback', TMP_ClassMethods_define_callback_4 = function $$define_callback(callback_name) {
          var TMP_5, TMP_7, self = this, $iter = TMP_ClassMethods_define_callback_4.$$p, after_define_hook = $iter || nil, wrapper_name = nil;

          if ($iter) TMP_ClassMethods_define_callback_4.$$p = null;
          
          wrapper_name = "" + "_" + (callback_name) + "_callbacks";
          $send(self, 'define_singleton_method', [wrapper_name], (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Context'), 'set_var', [self, "" + "@" + (wrapper_name), $hash2(["force"], {"force": true})], (TMP_6 = function(){var self = TMP_6.$$s || this;

            return []}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
          return $send(self, 'define_singleton_method', [callback_name], (TMP_7 = function($a_rest){var self = TMP_7.$$s || this, block, args;

            block = TMP_7.$$p || nil;
            if (block) TMP_7.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          
            self.$send(wrapper_name).$concat(args);
            if ((block !== nil)) {
              self.$send(wrapper_name).$push(block)};
            if ($truthy(after_define_hook)) {
              return $send(after_define_hook, 'call', Opal.to_a(args), block.$to_proc())
              } else {
              return nil
            };}, TMP_7.$$s = self, TMP_7.$$arity = -1, TMP_7));
        }, TMP_ClassMethods_define_callback_4.$$arity = 1);
        
        Opal.defn(self, '$callbacks_for', TMP_ClassMethods_callbacks_for_8 = function $$callbacks_for(callback_name) {
          var self = this, wrapper_name = nil;

          
          wrapper_name = "" + "_" + (callback_name) + "_callbacks";
          return $rb_plus((function() {if ($truthy(self.$superclass()['$respond_to?']("callbacks_for"))) {
            return self.$superclass().$callbacks_for(callback_name)
            } else {
            return []
          }; return nil; })(), self.$send(wrapper_name));
        }, TMP_ClassMethods_callbacks_for_8.$$arity = 1);
      })($nesting[0], $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/rendering_context"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$!', '$remove_nodes_from_args', '$build', '$waiting_on_resources', '$waiting_on_resources=', '$-', '$run_child_block', '$nil?', '$to_proc', '$dup', '$tap', '$create_element', '$detect', '$respond_to?', '$is_a?', '$last', '$to_s', '$render', '$<<', '$delete', '$include?', '$index', '$[]=', '$[]', '$each', '$acts_as_string?', '$empty?', '$!=', '$raise_render_error', '$==', '$count', '$improper_render', '$>', '$try', '$class', '$raise', '$define_method', '$unshift', '$send']);
  
  (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $RenderingContext(){};
      var self = $RenderingContext = $klass($base, $super, 'RenderingContext', $RenderingContext);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_render_1, TMP_build_9, TMP_delete_10, TMP_rendered$q_11, TMP_replace_12, TMP_remove_nodes_from_args_14, TMP_run_child_block_15, TMP_raise_render_error_17, TMP_improper_render_18;

        
        self.$attr_accessor("waiting_on_resources");
        
        Opal.defn(self, '$render', TMP_render_1 = function $$render(name, $a_rest) {
          var $b, TMP_2, self = this, args, $iter = TMP_render_1.$$p, block = $iter || nil, was_outer_most = nil, element = nil, $writer = nil;
          if (self.not_outer_most == null) self.not_outer_most = nil;
          if (self.buffer == null) self.buffer = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_render_1.$$p = null;
          return (function() { try {
          
          was_outer_most = self.not_outer_most['$!']();
          self.not_outer_most = true;
          self.$remove_nodes_from_args(args);
          if ($truthy(self.buffer)) {
            } else {
            self.buffer = ($truthy($b = self.buffer) ? $b : [])
          };
          if ($truthy(block)) {
            element = $send(self, 'build', [], (TMP_2 = function(){var self = TMP_2.$$s || this, TMP_3, TMP_4, TMP_6, TMP_7, TMP_8, saved_waiting_on_resources = nil, $writer = nil, buffer = nil, buffer_s = nil;
              if (self.buffer == null) self.buffer = nil;

            
              saved_waiting_on_resources = self.$waiting_on_resources();
              
              $writer = [nil];
              $send(self, 'waiting_on_resources=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              $send(self, 'run_child_block', [name['$nil?']()], block.$to_proc());
              if ($truthy(name)) {
                
                buffer = self.buffer.$dup();
                return $send($send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'API'), 'create_element', [name].concat(Opal.to_a(args)), (TMP_3 = function(){var self = TMP_3.$$s || this;

                return buffer}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3)), 'tap', [], (TMP_4 = function(element){var self = TMP_4.$$s || this, $a, TMP_5;
if (element == null) element = nil;
                
                  
                  $writer = [($truthy($a = saved_waiting_on_resources) ? $a : $send(buffer, 'detect', [], (TMP_5 = function(e){var self = TMP_5.$$s || this;
if (e == null) e = nil;
                  if ($truthy(e['$respond_to?']("waiting_on_resources"))) {
                      return e.$waiting_on_resources()
                      } else {
                      return nil
                    }}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5))['$!']()['$!']())];
                  $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  if ($truthy(buffer.$last()['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
                    return ($truthy($a = element.$waiting_on_resources()) ? $a : (($writer = [self.$waiting_on_resources()]), $send(element, 'waiting_on_resources=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
                    } else {
                    return nil
                  };}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
              } else if ($truthy(self.buffer.$last()['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Element')))) {
                return $send(self.buffer.$last(), 'tap', [], (TMP_6 = function(element){var self = TMP_6.$$s || this, $a;
if (element == null) element = nil;
                return ($truthy($a = element.$waiting_on_resources()) ? $a : (($writer = [saved_waiting_on_resources]), $send(element, 'waiting_on_resources=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
                } else {
                
                buffer_s = self.buffer.$last().$to_s();
                return $send($send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', ["span"], (TMP_7 = function(){var self = TMP_7.$$s || this;

                return buffer_s}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7)), 'tap', [], (TMP_8 = function(element){var self = TMP_8.$$s || this;
if (element == null) element = nil;
                
                  $writer = [saved_waiting_on_resources];
                  $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
              };}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2))
          } else if ($truthy(name['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Element')))) {
            element = name
            } else {
            
            element = $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'API'), 'create_element', [name].concat(Opal.to_a(args)));
            
            $writer = [self.$waiting_on_resources()];
            $send(element, 'waiting_on_resources=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          };
          self.buffer['$<<'](element);
          
          $writer = [nil];
          $send(self, 'waiting_on_resources=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return element;
          } finally {
            (function() {if ($truthy(was_outer_most)) {
              return (self.not_outer_most = (self.buffer = nil))
              } else {
              return nil
            }; return nil; })()
          }; })()
        }, TMP_render_1.$$arity = -2);
        
        Opal.defn(self, '$build', TMP_build_9 = function $$build() {
          var self = this, $iter = TMP_build_9.$$p, $yield = $iter || nil, current = nil, return_val = nil;
          if (self.buffer == null) self.buffer = nil;

          if ($iter) TMP_build_9.$$p = null;
          
          current = self.buffer;
          self.buffer = [];
          return_val = Opal.yield1($yield, self.buffer);
          self.buffer = current;
          return return_val;
        }, TMP_build_9.$$arity = 0);
        
        Opal.defn(self, '$delete', TMP_delete_10 = function(element) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          
          self.buffer.$delete(element);
          return element;
        }, TMP_delete_10.$$arity = 1);
        Opal.alias(self, "as_node", "delete");
        
        Opal.defn(self, '$rendered?', TMP_rendered$q_11 = function(element) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          return self.buffer['$include?'](element)
        }, TMP_rendered$q_11.$$arity = 1);
        
        Opal.defn(self, '$replace', TMP_replace_12 = function $$replace(e1, e2) {
          var self = this, $writer = nil;
          if (self.buffer == null) self.buffer = nil;

          
          $writer = [self.buffer.$index(e1), e2];
          $send(self.buffer, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_replace_12.$$arity = 2);
        
        Opal.defn(self, '$remove_nodes_from_args', TMP_remove_nodes_from_args_14 = function $$remove_nodes_from_args(args) {
          var $a, TMP_13, self = this;

          if ($truthy(($truthy($a = args['$[]'](0)) ? args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $a))) {
            return $send(args['$[]'](0), 'each', [], (TMP_13 = function(key, value){var self = TMP_13.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
            
              try {
                if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Element')))) {
                  return value.$delete()
                  } else {
                  return nil
                }
              } catch ($err) {
                if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13))
            } else {
            return nil
          }
        }, TMP_remove_nodes_from_args_14.$$arity = 1);
        
        Opal.defn(self, '$run_child_block', TMP_run_child_block_15 = function $$run_child_block(is_outer_scope) {
          var $a, TMP_16, $b, self = this, $iter = TMP_run_child_block_15.$$p, $yield = $iter || nil, result = nil;
          if (self.buffer == null) self.buffer = nil;

          if ($iter) TMP_run_child_block_15.$$p = null;
          
          result = Opal.yieldX($yield, []);
          if ($truthy(($truthy($a = result['$respond_to?']("acts_as_string?")) ? result['$acts_as_string?']() : $a))) {
            $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', ["span"], (TMP_16 = function(){var self = TMP_16.$$s || this;

            return result.$to_s()}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16))
          } else if ($truthy(($truthy($a = result['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? $a : ($truthy($b = result['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Element'))) ? self.buffer['$empty?']() : $b)))) {
            self.buffer['$<<'](result)};
          if ($truthy(($truthy($a = is_outer_scope) ? self.buffer['$!=']([result]) : $a))) {
            return self.$raise_render_error(result)
            } else {
            return nil
          };
        }, TMP_run_child_block_15.$$arity = 1);
        
        Opal.defn(self, '$raise_render_error', TMP_raise_render_error_17 = function $$raise_render_error(result) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          
          if (self.buffer.$count()['$=='](1)) {
            self.$improper_render("A different element was returned than was generated within the DSL.", "Possibly improper use of Element#delete.")};
          if ($truthy($rb_gt(self.buffer.$count(), 1))) {
            self.$improper_render("" + "Instead " + (self.buffer.$count()) + " elements were generated.", "Do you want to wrap your elements in a div?")};
          if ($truthy(result.$try("reactrb_component?"))) {
            self.$improper_render("" + "Instead the component " + (result) + " was returned.", "" + "Did you mean " + (result) + "()?")};
          return self.$improper_render("" + "Instead the " + (result.$class()) + " " + (result) + " was returned.", "You may need to convert this to a string.");
        }, TMP_raise_render_error_17.$$arity = 1);
        return (Opal.defn(self, '$improper_render', TMP_improper_render_18 = function $$improper_render(message, solution) {
          var self = this;

          return self.$raise("" + "a component's render method must generate and return exactly 1 element or a string.\n" + ("" + "    " + (message) + "  " + (solution)))
        }, TMP_improper_render_18.$$arity = 2), nil) && 'improper_render';
      })(Opal.get_singleton_class(self), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_19, TMP_Object_para_22, TMP_Object_br_25;

    
    $send(["span", "td", "th", "while_loading"], 'each', [], (TMP_Object_19 = function(tag){var self = TMP_Object_19.$$s || this, TMP_20;
if (tag == null) tag = nil;
    return $send(self, 'define_method', [tag], (TMP_20 = function($a_rest){var self = TMP_20.$$s || this, block, args, TMP_21;

        block = TMP_20.$$p || nil;
        if (block) TMP_20.$$p = null;
        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        args.$unshift(tag);
        if ($truthy(self['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component')))) {
          return $send(self, 'send', Opal.to_a(args), block.$to_proc())};
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', Opal.to_a(args), (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$to_s()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21));}, TMP_20.$$s = self, TMP_20.$$arity = -1, TMP_20))}, TMP_Object_19.$$s = self, TMP_Object_19.$$arity = 1, TMP_Object_19));
    
    Opal.defn(self, '$para', TMP_Object_para_22 = function $$para($a_rest) {
      var TMP_23, self = this, args, $iter = TMP_Object_para_22.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_para_22.$$p = null;
      
      args.$unshift("p");
      if ($truthy(self['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component')))) {
        return $send(self, 'send', Opal.to_a(args), block.$to_proc())};
      return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', Opal.to_a(args), (TMP_23 = function(){var self = TMP_23.$$s || this;

      return self.$to_s()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23));
    }, TMP_Object_para_22.$$arity = -1);
    return (Opal.defn(self, '$br', TMP_Object_br_25 = function $$br() {
      var TMP_24, self = this;

      
      if ($truthy(self['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component')))) {
        return self.$send("br")};
      return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', ["span"], (TMP_24 = function(){var self = TMP_24.$$s || this;

      
        Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext').$render(self.$to_s());
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext').$render("br");}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24));
    }, TMP_Object_br_25.$$arity = 0), nil) && 'br';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["set"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  
  (function($base, $super, $parent_nesting) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Set_$$_1, TMP_Set_initialize_2, TMP_Set_dup_4, TMP_Set_$_5, TMP_Set_inspect_6, TMP_Set_$eq$eq_8, TMP_Set_add_9, TMP_Set_classify_10, TMP_Set_collect$B_13, TMP_Set_delete_15, TMP_Set_delete$q_16, TMP_Set_delete_if_17, TMP_Set_add$q_20, TMP_Set_each_21, TMP_Set_empty$q_22, TMP_Set_eql$q_24, TMP_Set_clear_25, TMP_Set_include$q_26, TMP_Set_merge_28, TMP_Set_replace_29, TMP_Set_size_30, TMP_Set_subtract_32, TMP_Set_$_33, TMP_Set_superset$q_35, TMP_Set_proper_superset$q_37, TMP_Set_subset$q_39, TMP_Set_proper_subset$q_41, TMP_Set_to_a_42;

    def.hash = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    Opal.defs(self, '$[]', TMP_Set_$$_1 = function($a_rest) {
      var self = this, ary;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      ary = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        ary[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$new(ary)
    }, TMP_Set_$$_1.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_Set_initialize_2 = function $$initialize(enum$) {
      var TMP_3, self = this, $iter = TMP_Set_initialize_2.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil;
      }
      if ($iter) TMP_Set_initialize_2.$$p = null;
      
      self.hash = Opal.const_get_relative($nesting, 'Hash').$new();
      if ($truthy(enum$['$nil?']())) {
        return nil};
      if ($truthy(Opal.const_get_relative($nesting, 'Enumerable')['$==='](enum$))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], (TMP_3 = function(item){var self = TMP_3.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
        } else {
        return self.$merge(enum$)
      };
    }, TMP_Set_initialize_2.$$arity = -1);
    
    Opal.defn(self, '$dup', TMP_Set_dup_4 = function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, TMP_Set_dup_4.$$arity = 0);
    
    Opal.defn(self, '$-', TMP_Set_$_5 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, TMP_Set_$_5.$$arity = 1);
    Opal.alias(self, "difference", "-");
    
    Opal.defn(self, '$inspect', TMP_Set_inspect_6 = function $$inspect() {
      var self = this;

      return "" + "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, TMP_Set_inspect_6.$$arity = 0);
    
    Opal.defn(self, '$==', TMP_Set_$eq$eq_8 = function(other) {
      var $a, TMP_7, self = this;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ($truthy(($truthy($a = other['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? self.$size()['$=='](other.$size()) : $a))) {
        return $send(other, 'all?', [], (TMP_7 = function(o){var self = TMP_7.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))
        } else {
        return false
      }
    }, TMP_Set_$eq$eq_8.$$arity = 1);
    
    Opal.defn(self, '$add', TMP_Set_add_9 = function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, TMP_Set_add_9.$$arity = 1);
    Opal.alias(self, "<<", "add");
    
    Opal.defn(self, '$classify', TMP_Set_classify_10 = function $$classify() {
      var TMP_11, TMP_12, self = this, $iter = TMP_Set_classify_10.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Set_classify_10.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_11 = function(h, k){var self = TMP_11.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
      
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11));
      $send(self, 'each', [], (TMP_12 = function(item){var self = TMP_12.$$s || this;
if (item == null) item = nil;
      return result['$[]'](Opal.yield1(block, item)).$add(item)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
      return result;
    }, TMP_Set_classify_10.$$arity = 0);
    
    Opal.defn(self, '$collect!', TMP_Set_collect$B_13 = function() {
      var TMP_14, self = this, $iter = TMP_Set_collect$B_13.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Set_collect$B_13.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return result['$<<'](Opal.yield1(block, item))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
      return self.$replace(result);
    }, TMP_Set_collect$B_13.$$arity = 0);
    Opal.alias(self, "map!", "collect!");
    
    Opal.defn(self, '$delete', TMP_Set_delete_15 = function(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, TMP_Set_delete_15.$$arity = 1);
    
    Opal.defn(self, '$delete?', TMP_Set_delete$q_16 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
        } else {
        return nil
      }
    }, TMP_Set_delete$q_16.$$arity = 1);
    
    Opal.defn(self, '$delete_if', TMP_Set_delete_if_17 = function $$delete_if() {try {

      var $a, TMP_18, TMP_19, self = this, $iter = TMP_Set_delete_if_17.$$p, $yield = $iter || nil;

      if ($iter) TMP_Set_delete_if_17.$$p = null;
      
      ($truthy($a = ($yield !== nil)) ? $a : Opal.ret(self.$enum_for("delete_if")));
      $send($send(self, 'select', [], (TMP_18 = function(o){var self = TMP_18.$$s || this;
if (o == null) o = nil;
      return Opal.yield1($yield, o);}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18)), 'each', [], (TMP_19 = function(o){var self = TMP_19.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Set_delete_if_17.$$arity = 0);
    
    Opal.defn(self, '$add?', TMP_Set_add$q_20 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
        } else {
        return self.$add(o)
      }
    }, TMP_Set_add$q_20.$$arity = 1);
    
    Opal.defn(self, '$each', TMP_Set_each_21 = function $$each() {
      var self = this, $iter = TMP_Set_each_21.$$p, block = $iter || nil;

      if ($iter) TMP_Set_each_21.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, TMP_Set_each_21.$$arity = 0);
    
    Opal.defn(self, '$empty?', TMP_Set_empty$q_22 = function() {
      var self = this;

      return self.hash['$empty?']()
    }, TMP_Set_empty$q_22.$$arity = 0);
    
    Opal.defn(self, '$eql?', TMP_Set_eql$q_24 = function(other) {
      var TMP_23, self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], (TMP_23 = function(){var self = TMP_23.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23)))
    }, TMP_Set_eql$q_24.$$arity = 1);
    
    Opal.defn(self, '$clear', TMP_Set_clear_25 = function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, TMP_Set_clear_25.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_Set_include$q_26 = function(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, TMP_Set_include$q_26.$$arity = 1);
    Opal.alias(self, "member?", "include?");
    
    Opal.defn(self, '$merge', TMP_Set_merge_28 = function $$merge(enum$) {
      var TMP_27, self = this;

      
      $send(enum$, 'each', [], (TMP_27 = function(item){var self = TMP_27.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27));
      return self;
    }, TMP_Set_merge_28.$$arity = 1);
    
    Opal.defn(self, '$replace', TMP_Set_replace_29 = function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, TMP_Set_replace_29.$$arity = 1);
    
    Opal.defn(self, '$size', TMP_Set_size_30 = function $$size() {
      var self = this;

      return self.hash.$size()
    }, TMP_Set_size_30.$$arity = 0);
    Opal.alias(self, "length", "size");
    
    Opal.defn(self, '$subtract', TMP_Set_subtract_32 = function $$subtract(enum$) {
      var TMP_31, self = this;

      
      $send(enum$, 'each', [], (TMP_31 = function(item){var self = TMP_31.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
      return self;
    }, TMP_Set_subtract_32.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_Set_$_33 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, TMP_Set_$_33.$$arity = 1);
    
    Opal.defn(self, '$superset?', TMP_Set_superset$q_35 = function(set) {
      var $a, TMP_34, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], (TMP_34 = function(o){var self = TMP_34.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34));
    }, TMP_Set_superset$q_35.$$arity = 1);
    Opal.alias(self, ">=", "superset?");
    
    Opal.defn(self, '$proper_superset?', TMP_Set_proper_superset$q_37 = function(set) {
      var $a, TMP_36, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], (TMP_36 = function(o){var self = TMP_36.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
    }, TMP_Set_proper_superset$q_37.$$arity = 1);
    Opal.alias(self, ">", "proper_superset?");
    
    Opal.defn(self, '$subset?', TMP_Set_subset$q_39 = function(set) {
      var $a, TMP_38, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], (TMP_38 = function(o){var self = TMP_38.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38));
    }, TMP_Set_subset$q_39.$$arity = 1);
    Opal.alias(self, "<=", "subset?");
    
    Opal.defn(self, '$proper_subset?', TMP_Set_proper_subset$q_41 = function(set) {
      var $a, TMP_40, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], (TMP_40 = function(o){var self = TMP_40.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40));
    }, TMP_Set_proper_subset$q_41.$$arity = 1);
    Opal.alias(self, "<", "proper_subset?");
    Opal.alias(self, "+", "|");
    Opal.alias(self, "union", "|");
    return (Opal.defn(self, '$to_a', TMP_Set_to_a_42 = function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, TMP_Set_to_a_42.$$arity = 0), nil) && 'to_a';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_to_set_43;

    
    Opal.defn(self, '$to_set', TMP_Enumerable_to_set_43 = function $$to_set(klass, $a_rest) {
      var self = this, args, $iter = TMP_Enumerable_to_set_43.$$p, block = $iter || nil;

      if (klass == null) {
        klass = Opal.const_get_relative($nesting, 'Set');
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerable_to_set_43.$$p = null;
      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc())
    }, TMP_Enumerable_to_set_43.$$arity = -1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-store/class_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$>', '$count', '$define_state_methods', '$class_state_wrapper', '$__state_wrapper', '$singleton_class', '$to_proc', '$new', '$class_mutator_wrapper']);
  return (function($base, $parent_nesting) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_state_1, TMP_ClassMethods_mutate_2, TMP_ClassMethods___shared_states_3, TMP_ClassMethods___class_states_4, TMP_ClassMethods___instance_states_5;

      
      self.$attr_accessor("__shared_states", "__class_states", "__instance_states");
      
      Opal.defn(self, '$state', TMP_ClassMethods_state_1 = function $$state($a_rest) {
        var $b, self = this, args, $iter = TMP_ClassMethods_state_1.$$p, block = $iter || nil;
        if (self.state == null) self.state = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_ClassMethods_state_1.$$p = null;
        if ($truthy($rb_gt(args.$count(), 0))) {
          return $send(self.$singleton_class().$__state_wrapper().$class_state_wrapper(), 'define_state_methods', [self].concat(Opal.to_a(args)), block.$to_proc())
          } else {
          return (self.state = ($truthy($b = self.state) ? $b : self.$singleton_class().$__state_wrapper().$class_state_wrapper().$new(self)))
        }
      }, TMP_ClassMethods_state_1.$$arity = -1);
      
      Opal.defn(self, '$mutate', TMP_ClassMethods_mutate_2 = function $$mutate() {
        var $a, self = this;
        if (self.mutate == null) self.mutate = nil;

        return (self.mutate = ($truthy($a = self.mutate) ? $a : self.$singleton_class().$__state_wrapper().$class_mutator_wrapper().$new(self)))
      }, TMP_ClassMethods_mutate_2.$$arity = 0);
      
      Opal.defn(self, '$__shared_states', TMP_ClassMethods___shared_states_3 = function $$__shared_states() {
        var $a, self = this;
        if (self.__shared_states == null) self.__shared_states = nil;

        return (self.__shared_states = ($truthy($a = self.__shared_states) ? $a : []))
      }, TMP_ClassMethods___shared_states_3.$$arity = 0);
      
      Opal.defn(self, '$__class_states', TMP_ClassMethods___class_states_4 = function $$__class_states() {
        var $a, self = this;
        if (self.__class_states == null) self.__class_states = nil;

        return (self.__class_states = ($truthy($a = self.__class_states) ? $a : []))
      }, TMP_ClassMethods___class_states_4.$$arity = 0);
      
      Opal.defn(self, '$__instance_states', TMP_ClassMethods___instance_states_5 = function $$__instance_states() {
        var $a, self = this;
        if (self.__instance_states == null) self.__instance_states = nil;

        return (self.__instance_states = ($truthy($a = self.__instance_states) ? $a : []))
      }, TMP_ClassMethods___instance_states_5.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-store/dispatch_receiver"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$format_callback', '$empty?', '$raise', '$each', '$on_dispatch', '$call', '$private', '$is_a?', '$last', '$pop', '$lambda', '$send']);
  return (function($base, $parent_nesting) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DispatchReceiver, self = $DispatchReceiver = $module($base, 'DispatchReceiver');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DispatchReceiver_receives_1, TMP_DispatchReceiver_format_callback_5;

      
      (function($base, $super, $parent_nesting) {
        function $InvalidOperationError(){};
        var self = $InvalidOperationError = $klass($base, $super, 'InvalidOperationError', $InvalidOperationError);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
      self.$attr_accessor("params");
      
      Opal.defn(self, '$receives', TMP_DispatchReceiver_receives_1 = function $$receives($a_rest) {
        var TMP_2, self = this, args, $iter = TMP_DispatchReceiver_receives_1.$$p, block = $iter || nil, callback = nil, message = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_DispatchReceiver_receives_1.$$p = null;
        
        callback = self.$format_callback(args);
        if ($truthy(args['$empty?']())) {
          
          message = "At least one operation must be passed in to the 'receives' macro";
          self.$raise(Opal.const_get_relative($nesting, 'InvalidOperationError'), message);};
        return $send(args, 'each', [], (TMP_2 = function(operation){var self = TMP_2.$$s || this, TMP_3;
if (operation == null) operation = nil;
        return $send(operation, 'on_dispatch', [], (TMP_3 = function(params){var self = TMP_3.$$s || this;
if (params == null) params = nil;
          
            self.params = params;
            if ($truthy(callback)) {
              callback.$call()};
            if ($truthy(block)) {
              return Opal.yield1(block, params);
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
      }, TMP_DispatchReceiver_receives_1.$$arity = -1);
      self.$private();
      
      Opal.defn(self, '$format_callback', TMP_DispatchReceiver_format_callback_5 = function $$format_callback(args) {
        var TMP_4, self = this, method_name = nil;

        if ($truthy(args.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
          
          method_name = args.$pop();
          return $send(self, 'lambda', [], (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$send("" + (method_name))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
        } else if ($truthy(args.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
          return args.$pop()
          } else {
          return nil
        }
      }, TMP_DispatchReceiver_format_callback_5.$$arity = 1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-store/instance_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$each', '$__instance_states', '$class', '$==', '$[]', '$initializer_value', '$__send__', '$mutate', '$instance_eval', '$to_proc', '$new', '$instance_state_wrapper', '$__state_wrapper', '$singleton_class', '$instance_mutator_wrapper', '$private', '$>', '$arity', '$call']);
  return (function($base, $parent_nesting) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $InstanceMethods, self = $InstanceMethods = $module($base, 'InstanceMethods');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_InstanceMethods_init_store_2, TMP_InstanceMethods_state_3, TMP_InstanceMethods_mutate_4, TMP_InstanceMethods_initializer_value_5;

      
      
      Opal.defn(self, '$init_store', TMP_InstanceMethods_init_store_2 = function $$init_store() {
        var TMP_1, self = this;

        return $send(self.$class().$__instance_states(), 'each', [], (TMP_1 = function(instance_state){var self = TMP_1.$$s || this, proc_value = nil, block_value = nil;
if (instance_state == null) instance_state = nil;
        
          if (instance_state['$[]'](1)['$[]']("scope")['$==']("shared")) {
            return nil;};
          proc_value = self.$initializer_value(instance_state['$[]'](1)['$[]']("initializer"));
          self.$mutate().$__send__("" + (instance_state['$[]'](0)), proc_value);
          if ($truthy(instance_state['$[]'](1)['$[]']("block"))) {
            } else {
            return nil;
          };
          block_value = $send(self, 'instance_eval', [], instance_state['$[]'](1)['$[]']("block").$to_proc());
          return self.$mutate().$__send__("" + (instance_state['$[]'](0)), block_value);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1))
      }, TMP_InstanceMethods_init_store_2.$$arity = 0);
      
      Opal.defn(self, '$state', TMP_InstanceMethods_state_3 = function $$state() {
        var $a, self = this;
        if (self.state == null) self.state = nil;

        return (self.state = ($truthy($a = self.state) ? $a : self.$class().$singleton_class().$__state_wrapper().$instance_state_wrapper().$new(self)))
      }, TMP_InstanceMethods_state_3.$$arity = 0);
      
      Opal.defn(self, '$mutate', TMP_InstanceMethods_mutate_4 = function $$mutate() {
        var $a, self = this;
        if (self.mutate == null) self.mutate = nil;

        return (self.mutate = ($truthy($a = self.mutate) ? $a : self.$class().$singleton_class().$__state_wrapper().$instance_mutator_wrapper().$new(self)))
      }, TMP_InstanceMethods_mutate_4.$$arity = 0);
      self.$private();
      
      Opal.defn(self, '$initializer_value', TMP_InstanceMethods_initializer_value_5 = function $$initializer_value(initializer) {
        var self = this;

        if ($truthy($rb_gt(initializer.$arity(), 0))) {
          return initializer.$call(self)
          } else {
          return initializer.$call()
        }
      }, TMP_InstanceMethods_initializer_value_5.$$arity = 1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-store/mutator_wrapper"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$define_method', '$==', '$[]', '$__from__', '$state', '$get_state', '$to_s', '$>', '$count', '$set_state', '$new', '$initialize_values?', '$initialize_values', '$include?', '$initializer_proc', '$receives', '$__send__', '$mutate', '$call', '$private', '$arity', '$lambda', '$attr_accessor', '$allocate', '$__from__=', '$-', '$add_method', '$to_proc']);
  return (function($base, $parent_nesting) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $MutatorWrapper(){};
      var self = $MutatorWrapper = $klass($base, $super, 'MutatorWrapper', $MutatorWrapper);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MutatorWrapper_new_11, TMP_MutatorWrapper_method_missing_12;

      
      (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_add_method_3, TMP_initialize_values$q_4, TMP_initialize_values_7, TMP_initializer_proc_10;

        
        
        Opal.defn(self, '$add_method', TMP_add_method_3 = function $$add_method(klass, method_name, opts) {
          var TMP_1, self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          
          $send(self, 'define_method', ["" + (method_name)], (TMP_1 = function($a_rest){var self = TMP_1.$$s || this, args, TMP_2, from = nil, current_value = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          
            from = (function() {if (opts['$[]']("scope")['$==']("shared")) {
              return klass.$state().$__from__()
              } else {
              return self.$__from__()
            }; return nil; })();
            current_value = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$get_state(from, method_name.$to_s());
            if ($truthy($rb_gt(args.$count(), 0))) {
              
              Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$set_state(from, method_name.$to_s(), args['$[]'](0));
              return current_value;
              } else {
              
              Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$set_state(from, method_name.$to_s(), current_value);
              return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Observable'), 'new', [current_value], (TMP_2 = function(update){var self = TMP_2.$$s || this;
if (update == null) update = nil;
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$set_state(from, method_name.$to_s(), update)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
            };}, TMP_1.$$s = self, TMP_1.$$arity = -1, TMP_1));
          if ($truthy(self['$initialize_values?'](opts))) {
            return self.$initialize_values(klass, method_name, opts)
            } else {
            return nil
          };
        }, TMP_add_method_3.$$arity = -3);
        
        Opal.defn(self, '$initialize_values?', TMP_initialize_values$q_4 = function(opts) {
          var $a, $b, self = this;

          return ($truthy($a = ["class", "shared"]['$include?'](opts['$[]']("scope"))) ? ($truthy($b = opts['$[]']("initializer")) ? $b : opts['$[]']("block")) : $a)
        }, TMP_initialize_values$q_4.$$arity = 1);
        
        Opal.defn(self, '$initialize_values', TMP_initialize_values_7 = function $$initialize_values(klass, name, opts) {
          var $a, TMP_5, TMP_6, self = this, initializer = nil;

          
          if ($truthy(opts['$[]']("initializer"))) {
            initializer = self.$initializer_proc(opts['$[]']("initializer"), klass, name)};
          if ($truthy(($truthy($a = initializer) ? opts['$[]']("block") : $a))) {
            return $send(klass, 'receives', [Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Application'), 'Boot'), initializer], (TMP_5 = function(){var self = TMP_5.$$s || this;

            return klass.$mutate().$__send__("" + (name), opts['$[]']("block").$call())}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5))
          } else if ($truthy(initializer)) {
            return klass.$receives(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Application'), 'Boot'), initializer)
          } else if ($truthy(opts['$[]']("block"))) {
            return $send(klass, 'receives', [Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Application'), 'Boot')], (TMP_6 = function(){var self = TMP_6.$$s || this;

            return klass.$mutate().$__send__("" + (name), opts['$[]']("block").$call())}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
            } else {
            return nil
          };
        }, TMP_initialize_values_7.$$arity = 3);
        self.$private();
        return (Opal.defn(self, '$initializer_proc', TMP_initializer_proc_10 = function $$initializer_proc(initializer, klass, name) {
          var TMP_8, TMP_9, self = this;

          if ($truthy($rb_gt(initializer.$arity(), 0))) {
            return $send(self, 'lambda', [], (TMP_8 = function(){var self = TMP_8.$$s || this;

            return klass.$mutate().$__send__("" + (name), initializer.$call(klass))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8))
            } else {
            return $send(self, 'lambda', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

            return klass.$mutate().$__send__("" + (name), initializer.$call())}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9))
          }
        }, TMP_initializer_proc_10.$$arity = 3), nil) && 'initializer_proc';
      })(Opal.get_singleton_class(self), $nesting);
      self.$attr_accessor("__from__");
      Opal.defs(self, '$new', TMP_MutatorWrapper_new_11 = function(from) {
        var self = this, instance = nil, $writer = nil;

        
        instance = self.$allocate();
        
        $writer = [from];
        $send(instance, '__from__=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return instance;
      }, TMP_MutatorWrapper_new_11.$$arity = 1);
      return (Opal.defn(self, '$method_missing', TMP_MutatorWrapper_method_missing_12 = function $$method_missing(name, $a_rest) {
        var self = this, args, $iter = TMP_MutatorWrapper_method_missing_12.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_MutatorWrapper_method_missing_12.$$p = null;
        
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          return self
        })(Opal.get_singleton_class(self), $nesting).$add_method(nil, name);
        return $send(self, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc());
      }, TMP_MutatorWrapper_method_missing_12.$$arity = -2), nil) && 'method_missing';
    })($nesting[0], Opal.const_get_relative($nesting, 'BaseStoreClass'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-store/state_wrapper/argument_validator"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$parse_arguments', '$to_proc', '$[]', '$default_scope', '$[]=', '$-', '$validate_initializer', '$==', '$private', '$raise', '$is_a?', '$first', '$include?', '$to_sym', '$keys', '$invalid_option', '$shift', '$!=', '$dup_or_return_intial_value', '$class', '$lambda', '$send', '$dup']);
  return (function($base, $parent_nesting) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $ArgumentValidator, self = $ArgumentValidator = $module($base, 'ArgumentValidator');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ArgumentValidator_validate_args$B_1, TMP_ArgumentValidator_invalid_option_2, TMP_ArgumentValidator_parse_arguments_3, TMP_ArgumentValidator_validate_initializer_8, TMP_ArgumentValidator_dup_or_return_intial_value_10;

        
        (function($base, $super, $parent_nesting) {
          function $InvalidOptionError(){};
          var self = $InvalidOptionError = $klass($base, $super, 'InvalidOptionError', $InvalidOptionError);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          return nil
        })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
        
        Opal.defn(self, '$validate_args!', TMP_ArgumentValidator_validate_args$B_1 = function(klass, $a_rest) {
          var $b, $c, self = this, args, $iter = TMP_ArgumentValidator_validate_args$B_1.$$p, block = $iter || nil, name = nil, initial_value = nil, opts = nil, $writer = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_ArgumentValidator_validate_args$B_1.$$p = null;
          
          $c = $send(self, 'parse_arguments', Opal.to_a(args), block.$to_proc()), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (initial_value = ($b[1] == null ? nil : $b[1])), (opts = ($b[2] == null ? nil : $b[2])), $c;
          ($truthy($b = opts['$[]']("scope")) ? $b : (($writer = ["scope", self.$default_scope(klass)]), $send(opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          
          $writer = ["initializer", self.$validate_initializer(initial_value, klass, opts)];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(block)) {
            
            $writer = ["block", block];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(opts['$[]']("reader"))) {
            
            $writer = ["reader", (function() {if (opts['$[]']("reader")['$=='](true)) {
              return name
              } else {
              return opts['$[]']("reader")
            }; return nil; })()];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return [name, opts];
        }, TMP_ArgumentValidator_validate_args$B_1.$$arity = -2);
        self.$private();
        
        Opal.defn(self, '$invalid_option', TMP_ArgumentValidator_invalid_option_2 = function $$invalid_option(message) {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'InvalidOptionError'), message)
        }, TMP_ArgumentValidator_invalid_option_2.$$arity = 1);
        
        Opal.defn(self, '$parse_arguments', TMP_ArgumentValidator_parse_arguments_3 = function $$parse_arguments($a_rest) {
          var $b, $c, self = this, args, message = nil, name = nil, initial_value = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          if ($truthy(args.$first()['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
            
            if ($truthy(["reader", "initializer", "scope"]['$include?'](args.$first().$keys().$first().$to_sym()))) {
              
              message = "" + "The name of the state must be specified first as " + "either 'state :name' or 'state name: nil'";
              self.$invalid_option(message);};
            $c = args['$[]'](0).$shift(), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (initial_value = ($b[1] == null ? nil : $b[1])), $c;
            } else {
            name = args.$shift()
          };
          return [name, initial_value, ($truthy($b = args['$[]'](0)) ? $b : $hash2([], {}))];
        }, TMP_ArgumentValidator_parse_arguments_3.$$arity = -1);
        
        Opal.defn(self, '$validate_initializer', TMP_ArgumentValidator_validate_initializer_8 = function $$validate_initializer(initial_value, klass, opts) {
          var TMP_4, TMP_5, TMP_6, TMP_7, self = this, method_name = nil;

          if ($truthy(initial_value['$!='](nil))) {
            return self.$dup_or_return_intial_value(initial_value)
          } else if ($truthy(opts['$[]']("initializer"))) {
            if ($truthy([Opal.const_get_relative($nesting, 'Symbol'), Opal.const_get_relative($nesting, 'String')]['$include?'](opts['$[]']("initializer").$class()))) {
              
              method_name = opts['$[]']("initializer");
              if ($truthy(["class", "shared"]['$include?'](opts['$[]']("scope")))) {
                return $send(self, 'lambda', [], (TMP_4 = function(){var self = TMP_4.$$s || this;

                return klass.$send("" + (method_name))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4))
                } else {
                return $send(self, 'lambda', [], (TMP_5 = function(instance){var self = TMP_5.$$s || this;
if (instance == null) instance = nil;
                return instance.$send("" + (method_name))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5))
              };
            } else if ($truthy(opts['$[]']("initializer")['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
              return opts['$[]']("initializer")
              } else {
              
              self.$invalid_option("'state' option 'initialize' must either be a Symbol or a Proc");
              return $send(self, 'lambda', [], (TMP_6 = function(){var self = TMP_6.$$s || this;

              return nil}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));
            }
            } else {
            return $send(self, 'lambda', [], (TMP_7 = function(){var self = TMP_7.$$s || this;

            return nil}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))
          }
        }, TMP_ArgumentValidator_validate_initializer_8.$$arity = 3);
        
        Opal.defn(self, '$dup_or_return_intial_value', TMP_ArgumentValidator_dup_or_return_intial_value_10 = function $$dup_or_return_intial_value(value) {
          var TMP_9, self = this;

          
          value = (function() { try {
            return value.$dup()
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
              try {
                return value
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          return $send(self, 'lambda', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

          return value}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
        }, TMP_ArgumentValidator_dup_or_return_intial_value_10.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BaseStoreClass'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-store/state_wrapper"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$extend', '$attr_reader', '$==', '$add_class_instance_vars', '$new', '$empty?', '$validate_args!', '$to_proc', '$add_readers', '$add_error_methods', '$state', '$singleton_class', '$add_methods', '$remove_methods', '$<<', '$send', '$[]', '$include?', '$class_eval', '$define_method', '$__send__', '$define_singleton_method', '$each', '$add_method', '$instance_variable_get', '$__from__', '$get_state', '$to_s', '$wrappers', '$respond_to?', '$class_state_wrapper', '$__state_wrapper', '$attr_accessor', '$allocate', '$__from__=', '$-']);
  return (function($base, $parent_nesting) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StateWrapper_new_17, TMP_StateWrapper_method_missing_18;

      
      self.$extend(Opal.const_get_relative($nesting, 'ArgumentValidator'));
      (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_inherited_1, TMP_add_class_instance_vars_2, TMP_define_state_methods_3, TMP_add_readers_7, TMP_add_error_methods_10, TMP_add_methods_11, TMP_add_method_13, TMP_remove_methods_15, TMP_default_scope_16;

        
        self.$attr_reader("instance_state_wrapper", "class_state_wrapper", "instance_mutator_wrapper", "class_mutator_wrapper", "wrappers");
        
        Opal.defn(self, '$inherited', TMP_inherited_1 = function $$inherited(subclass) {
          var self = this;

          if (self['$=='](Opal.const_get_relative($nesting, 'StateWrapper'))) {
            return subclass.$add_class_instance_vars(subclass)
            } else {
            return nil
          }
        }, TMP_inherited_1.$$arity = 1);
        
        Opal.defn(self, '$add_class_instance_vars', TMP_add_class_instance_vars_2 = function $$add_class_instance_vars(subclass) {
          var self = this;
          if (self.shared_state_wrapper == null) self.shared_state_wrapper = nil;
          if (self.shared_mutator_wrapper == null) self.shared_mutator_wrapper = nil;
          if (self.instance_state_wrapper == null) self.instance_state_wrapper = nil;
          if (self.instance_mutator_wrapper == null) self.instance_mutator_wrapper = nil;
          if (self.class_state_wrapper == null) self.class_state_wrapper = nil;
          if (self.class_mutator_wrapper == null) self.class_mutator_wrapper = nil;

          
          self.shared_state_wrapper = subclass;
          self.instance_state_wrapper = Opal.const_get_relative($nesting, 'Class').$new(self.shared_state_wrapper);
          self.class_state_wrapper = Opal.const_get_relative($nesting, 'Class').$new(self.shared_state_wrapper);
          self.shared_mutator_wrapper = Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'MutatorWrapper'));
          self.instance_mutator_wrapper = Opal.const_get_relative($nesting, 'Class').$new(self.shared_mutator_wrapper);
          self.class_mutator_wrapper = Opal.const_get_relative($nesting, 'Class').$new(self.shared_mutator_wrapper);
          return (self.wrappers = [self.instance_state_wrapper, self.instance_mutator_wrapper, self.class_state_wrapper, self.class_mutator_wrapper]);
        }, TMP_add_class_instance_vars_2.$$arity = 1);
        
        Opal.defn(self, '$define_state_methods', TMP_define_state_methods_3 = function $$define_state_methods(klass, $a_rest) {
          var $b, $c, self = this, args, $iter = TMP_define_state_methods_3.$$p, block = $iter || nil, name = nil, opts = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_define_state_methods_3.$$p = null;
          
          if ($truthy(args['$empty?']())) {
            return self};
          $c = $send(self, 'validate_args!', [klass].concat(Opal.to_a(args)), block.$to_proc()), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (opts = ($b[1] == null ? nil : $b[1])), $c;
          self.$add_readers(klass, name, opts);
          klass.$singleton_class().$state().$add_error_methods(name, opts);
          klass.$singleton_class().$state().$add_methods(klass, name, opts);
          klass.$singleton_class().$state().$remove_methods(name, opts);
          return klass.$send("" + "__" + (opts['$[]']("scope")) + "_states")['$<<']([name, opts]);
        }, TMP_define_state_methods_3.$$arity = -2);
        
        Opal.defn(self, '$add_readers', TMP_add_readers_7 = function $$add_readers(klass, name, opts) {
          var TMP_4, TMP_6, self = this;

          
          if ($truthy(opts['$[]']("reader"))) {
            } else {
            return nil
          };
          if ($truthy(["instance", "shared"]['$include?'](opts['$[]']("scope")))) {
            $send(klass, 'class_eval', [], (TMP_4 = function(){var self = TMP_4.$$s || this, TMP_5;

            return $send(self, 'define_method', ["" + (opts['$[]']("reader"))], (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$state().$__send__("" + (name))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4))};
          if ($truthy(["class", "shared"]['$include?'](opts['$[]']("scope")))) {
            return $send(klass, 'define_singleton_method', ["" + (opts['$[]']("reader"))], (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$state().$__send__("" + (name))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
            } else {
            return nil
          };
        }, TMP_add_readers_7.$$arity = 3);
        
        Opal.defn(self, '$add_error_methods', TMP_add_error_methods_10 = function $$add_error_methods(name, opts) {
          var TMP_8, self = this;
          if (self.shared_state_wrapper == null) self.shared_state_wrapper = nil;
          if (self.shared_mutator_wrapper == null) self.shared_mutator_wrapper = nil;

          
          if (opts['$[]']("scope")['$==']("shared")) {
            return nil};
          return $send([self.shared_state_wrapper, self.shared_mutator_wrapper], 'each', [], (TMP_8 = function(klass){var self = TMP_8.$$s || this, TMP_9;
if (klass == null) klass = nil;
          return $send(klass, 'define_singleton_method', ["" + (name)], (TMP_9 = function(){var self = TMP_9.$$s || this;

            return "nope!"}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9))}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
        }, TMP_add_error_methods_10.$$arity = 2);
        
        Opal.defn(self, '$add_methods', TMP_add_methods_11 = function $$add_methods(klass, name, opts) {
          var self = this;

          
          self.$instance_variable_get("" + "@" + (opts['$[]']("scope")) + "_state_wrapper").$add_method(klass, name, opts);
          return self.$instance_variable_get("" + "@" + (opts['$[]']("scope")) + "_mutator_wrapper").$add_method(klass, name, opts);
        }, TMP_add_methods_11.$$arity = 3);
        
        Opal.defn(self, '$add_method', TMP_add_method_13 = function $$add_method(klass, method_name, opts) {
          var TMP_12, self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return $send(self, 'define_method', ["" + (method_name)], (TMP_12 = function(){var self = TMP_12.$$s || this, from = nil;
            if (self.__from__ == null) self.__from__ = nil;

          
            from = (function() {if (opts['$[]']("scope")['$==']("shared")) {
              return klass.$state().$__from__()
              } else {
              return self.__from__
            }; return nil; })();
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$get_state(from, method_name.$to_s());}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12))
        }, TMP_add_method_13.$$arity = -3);
        
        Opal.defn(self, '$remove_methods', TMP_remove_methods_15 = function $$remove_methods(name, opts) {
          var TMP_14, self = this;

          
          if (opts['$[]']("scope")['$==']("shared")) {
            } else {
            return nil
          };
          return $send(self.$wrappers(), 'each', [], (TMP_14 = function(wrapper){var self = TMP_14.$$s || this;
if (wrapper == null) wrapper = nil;
          if ($truthy(wrapper['$respond_to?']("" + (name)))) {
              return wrapper.$send("remove_method", "" + (name))
              } else {
              return nil
            }}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
        }, TMP_remove_methods_15.$$arity = 2);
        return (Opal.defn(self, '$default_scope', TMP_default_scope_16 = function $$default_scope(klass) {
          var self = this;

          if (self['$=='](klass.$singleton_class().$__state_wrapper().$class_state_wrapper())) {
            return "instance"
            } else {
            return "class"
          }
        }, TMP_default_scope_16.$$arity = 1), nil) && 'default_scope';
      })(Opal.get_singleton_class(self), $nesting);
      self.$attr_accessor("__from__");
      Opal.defs(self, '$new', TMP_StateWrapper_new_17 = function(from) {
        var self = this, instance = nil, $writer = nil;

        
        instance = self.$allocate();
        
        $writer = [from];
        $send(instance, '__from__=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return instance;
      }, TMP_StateWrapper_new_17.$$arity = 1);
      return (Opal.defn(self, '$method_missing', TMP_StateWrapper_method_missing_18 = function $$method_missing(name, $a_rest) {
        var self = this, args, $iter = TMP_StateWrapper_method_missing_18.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_StateWrapper_method_missing_18.$$p = null;
        
        $gvars.method_missing = [name].concat(Opal.to_a(args));
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          return self
        })(Opal.get_singleton_class(self), $nesting).$add_method(nil, name);
        return $send(self, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc());
      }, TMP_StateWrapper_method_missing_18.$$arity = -2), nil) && 'method_missing';
    })($nesting[0], Opal.const_get_relative($nesting, 'BaseStoreClass'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-store/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'VERSION', "0.99.1")
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/store"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$init_store']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Store(){};
      var self = $Store = $klass($base, $super, 'Store', $Store);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Store_initialize_2;

      
      (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_inherited_1;

        return (Opal.defn(self, '$inherited', TMP_inherited_1 = function $$inherited(child) {
          var self = this;

          return child.$include(Opal.const_get_relative($nesting, 'Mixin'))
        }, TMP_inherited_1.$$arity = 1), nil) && 'inherited'
      })(Opal.get_singleton_class(self), $nesting);
      return (Opal.defn(self, '$initialize', TMP_Store_initialize_2 = function $$initialize() {
        var self = this;

        return self.$init_store()
      }, TMP_Store_initialize_2.$$arity = 0), nil) && 'initialize';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/application/boot"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$method_defined?', '$<<', '$receivers', '$set_var', '$attr_reader', '$new', '$each', '$call']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_on_dispatch_1, TMP_receivers_3;

        
        if ($truthy(self['$method_defined?']("on_dispatch"))) {
          } else {
          
          Opal.defn(self, '$on_dispatch', TMP_on_dispatch_1 = function $$on_dispatch() {
            var self = this, $iter = TMP_on_dispatch_1.$$p, block = $iter || nil;

            if ($iter) TMP_on_dispatch_1.$$p = null;
            return self.$receivers()['$<<'](block)
          }, TMP_on_dispatch_1.$$arity = 0)
        };
        if ($truthy(self['$method_defined?']("receivers"))) {
          return nil
          } else {
          return (Opal.defn(self, '$receivers', TMP_receivers_3 = function $$receivers() {
            var TMP_2, self = this;

            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Context'), 'set_var', [self, "@receivers", $hash2(["force"], {"force": true})], (TMP_2 = function(){var self = TMP_2.$$s || this;

            return []}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2))
          }, TMP_receivers_3.$$arity = 0), nil) && 'receivers'
        };
      })(Opal.get_singleton_class(self), $nesting)
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Application(){};
      var self = $Application = $klass($base, $super, 'Application', $Application);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), $a;

      if ($truthy((($a = Opal.const_get_relative($nesting, 'Boot', 'skip_raise')) ? 'constant' : nil))) {
        return nil
        } else {
        return (function($base, $super, $parent_nesting) {
          function $Boot(){};
          var self = $Boot = $klass($base, $super, 'Boot', $Boot);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boot_run_6;

          
          (function($base, $super, $parent_nesting) {
            function $ReactDummyParams(){};
            var self = $ReactDummyParams = $klass($base, $super, 'ReactDummyParams', $ReactDummyParams);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ReactDummyParams_initialize_4;

            
            self.$attr_reader("context");
            return (Opal.defn(self, '$initialize', TMP_ReactDummyParams_initialize_4 = function $$initialize(context) {
              var self = this;

              return (self.context = context)
            }, TMP_ReactDummyParams_initialize_4.$$arity = 1), nil) && 'initialize';
          })($nesting[0], null, $nesting);
          return Opal.defs(self, '$run', TMP_Boot_run_6 = function $$run($kwargs) {
            var TMP_5, self = this, context, params = nil;

            if ($kwargs == null || !$kwargs.$$is_hash) {
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else {
                throw Opal.ArgumentError.$new('expected kwargs');
              }
            }
            context = $kwargs.$$smap["context"];
            if (context == null) {
              context = nil
            }
            
            params = Opal.const_get_relative($nesting, 'ReactDummyParams').$new(context);
            return $send(self.$receivers(), 'each', [], (TMP_5 = function(receiver){var self = TMP_5.$$s || this;
if (receiver == null) receiver = nil;
            return receiver.$call(params)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
          }, TMP_Boot_run_6.$$arity = -1);
        })($nesting[0], Opal.const_get_relative($nesting, 'Operation'), $nesting)
      }
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/store/mixin"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$extend', '$define_singleton_method', '$singleton_class', '$new', '$define_state_methods', '$__state_wrapper', '$to_proc']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Store(){};
      var self = $Store = $klass($base, $super, 'Store', $Store);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $Mixin, self = $Mixin = $module($base, 'Mixin');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_included_3;

          return (Opal.defn(self, '$included', TMP_included_3 = function $$included(base) {
            var TMP_1, TMP_2, self = this;

            
            base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperStore'), 'InstanceMethods'));
            base.$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperStore'), 'ClassMethods'));
            base.$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperStore'), 'DispatchReceiver'));
            $send(base.$singleton_class(), 'define_singleton_method', ["__state_wrapper"], (TMP_1 = function(){var self = TMP_1.$$s || this, $a;
              if (self.__state_wrapper == null) self.__state_wrapper = nil;

            return (self.__state_wrapper = ($truthy($a = self.__state_wrapper) ? $a : Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperStore'), 'StateWrapper'))))}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
            return $send(base.$singleton_class(), 'define_singleton_method', ["state"], (TMP_2 = function($a_rest){var self = TMP_2.$$s || this, block, args;

              block = TMP_2.$$p || nil;
              if (block) TMP_2.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return $send(self.$__state_wrapper(), 'define_state_methods', [base].concat(Opal.to_a(args)), block.$to_proc())}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2));
          }, TMP_included_3.$$arity = 1), nil) && 'included'
        })(Opal.get_singleton_class(self), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/state"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$on_client?', '$attr_reader', '$!', '$empty?', '$[]', '$observers_by_name', '$respond_to?', '$each', '$dup', '$include?', '$+', '$[]=', '$-', '$==', '$merge!', '$states', '$new_observers', '$<<', '$set_state_synchronously?', '$new', '$after', '$set_state2', '$update_react_js_state', '$raise', '$current_observers', '$delete', '$define_method', '$instance_variable_get', '$instance_variable_set']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $State(){};
      var self = $State = $klass($base, $super, 'State', $State);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      Opal.const_set($nesting[0], 'ALWAYS_UPDATE_STATE_AFTER_RENDER', Opal.const_get_relative($nesting, 'Hyperloop')['$on_client?']());
      self.rendering_level = 0;
      return (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_has_observers$q_1, TMP_bulk_update_2, TMP_set_state2_4, TMP_initialize_states_5, TMP_get_state_6, TMP_set_state_16, TMP_will_be_observing$q_17, TMP_is_observing$q_18, TMP_update_states_to_observe_23, TMP_remove_26, TMP_set_state_context_to_27, TMP_states_29, TMP_30;

        
        self.$attr_reader("current_observer");
        
        Opal.defn(self, '$has_observers?', TMP_has_observers$q_1 = function(object, name) {
          var self = this;

          return self.$observers_by_name()['$[]'](object)['$[]'](name)['$empty?']()['$!']()
        }, TMP_has_observers$q_1.$$arity = 2);
        
        Opal.defn(self, '$bulk_update', TMP_bulk_update_2 = function $$bulk_update() {
          var self = this, $iter = TMP_bulk_update_2.$$p, $yield = $iter || nil, saved_bulk_update_flag = nil;
          if (self.bulk_update_flag == null) self.bulk_update_flag = nil;

          if ($iter) TMP_bulk_update_2.$$p = null;
          return (function() { try {
          
          saved_bulk_update_flag = self.bulk_update_flag;
          self.bulk_update_flag = true;
          return Opal.yieldX($yield, []);;
          } finally {
            (self.bulk_update_flag = saved_bulk_update_flag)
          }; })()
        }, TMP_bulk_update_2.$$arity = 0);
        
        Opal.defn(self, '$set_state2', TMP_set_state2_4 = function $$set_state2(object, name, value, updates, exclusions) {
          var TMP_3, self = this, object_needs_notification = nil, $writer = nil;

          if (exclusions == null) {
            exclusions = nil;
          }
          
          object_needs_notification = object['$respond_to?']("update_react_js_state");
          $send(self.$observers_by_name()['$[]'](object)['$[]'](name).$dup(), 'each', [], (TMP_3 = function(observer){var self = TMP_3.$$s || this, $a, $writer = nil;
if (observer == null) observer = nil;
          
            if ($truthy(($truthy($a = exclusions) ? exclusions['$include?'](observer) : $a))) {
              return nil;};
            
            $writer = [observer, $rb_plus(updates['$[]'](observer), [object, name, value])];
            $send(updates, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (object['$=='](observer)) {
              return (object_needs_notification = false)
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
          if ($truthy(object_needs_notification)) {
            
            $writer = [object, $rb_plus(updates['$[]'](object), [nil, name, value])];
            $send(updates, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return nil
          };
        }, TMP_set_state2_4.$$arity = -5);
        
        Opal.defn(self, '$initialize_states', TMP_initialize_states_5 = function $$initialize_states(object, initial_values) {
          var $a, self = this;

          return self.$states()['$[]'](object)['$merge!'](($truthy($a = initial_values) ? $a : $hash2([], {})))
        }, TMP_initialize_states_5.$$arity = 2);
        
        Opal.defn(self, '$get_state', TMP_get_state_6 = function $$get_state(object, name, current_observer) {
          var $a, self = this;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.current_observer == null) self.current_observer = nil;

          if (current_observer == null) {
            current_observer = self.current_observer;
          }
          
          if ($truthy(($truthy($a = current_observer) ? self.$new_observers()['$[]'](current_observer)['$[]'](object)['$include?'](name)['$!']() : $a))) {
            self.$new_observers()['$[]'](current_observer)['$[]'](object)['$<<'](name)};
          if ($truthy(($truthy($a = self.delayed_updates) ? self.delayed_updates['$[]'](object)['$[]'](name) : $a))) {
            self.delayed_updates['$[]'](object)['$[]'](name)['$[]'](1)['$<<'](current_observer)};
          return self.$states()['$[]'](object)['$[]'](name);
        }, TMP_get_state_6.$$arity = -3);
        
        Opal.defn(self, '$set_state', TMP_set_state_16 = function $$set_state(object, name, value, delay) {
          var $a, TMP_7, TMP_8, TMP_14, TMP_15, self = this, $writer = nil, updates = nil;
          if (self.bulk_update_flag == null) self.bulk_update_flag = nil;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.delayed_updater == null) self.delayed_updater = nil;
          if (self.rendering_level == null) self.rendering_level = nil;

          if (delay == null) {
            delay = Opal.const_get_relative($nesting, 'ALWAYS_UPDATE_STATE_AFTER_RENDER');
          }
          
          
          $writer = [name, value];
          $send(self.$states()['$[]'](object), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(($truthy($a = object['$respond_to?']("set_state_synchronously?")) ? object['$set_state_synchronously?']() : $a))) {
            delay = false};
          if ($truthy(($truthy($a = delay) ? $a : self.bulk_update_flag))) {
            
            self.delayed_updates = ($truthy($a = self.delayed_updates) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_7 = function(h, k){var self = TMP_7.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
            
              $writer = [k, $hash2([], {})];
              $send(h, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7)));
            
            $writer = [name, [value, Opal.const_get_relative($nesting, 'Set').$new()]];
            $send(self.delayed_updates['$[]'](object), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.delayed_updater = ($truthy($a = self.delayed_updater) ? $a : $send(self, 'after', [0.001], (TMP_8 = function(){var self = TMP_8.$$s || this, TMP_9, TMP_10, TMP_11, TMP_13, delayed_updates = nil, updates = nil;
              if (self.delayed_updates == null) self.delayed_updates = nil;

            
              delayed_updates = self.delayed_updates;
              self.delayed_updates = $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_9 = function(h, k){var self = TMP_9.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
              
                $writer = [k, $hash2([], {})];
                $send(h, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9));
              self.delayed_updater = nil;
              updates = $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_10 = function(hash, key){var self = TMP_10.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
              
                $writer = [key, Opal.const_get_relative($nesting, 'Array').$new()];
                $send(hash, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10));
              $send(delayed_updates, 'each', [], (TMP_11 = function(object, name_hash){var self = TMP_11.$$s || this, TMP_12;
if (object == null) object = nil;if (name_hash == null) name_hash = nil;
              return $send(name_hash, 'each', [], (TMP_12 = function(name, value_and_set){var self = TMP_12.$$s || this;
if (name == null) name = nil;if (value_and_set == null) value_and_set = nil;
                return self.$set_state2(object, name, value_and_set['$[]'](0), updates, value_and_set['$[]'](1))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11));
              return $send(updates, 'each', [], (TMP_13 = function(observer, args){var self = TMP_13.$$s || this;
if (observer == null) observer = nil;if (args == null) args = nil;
              return $send(observer, 'update_react_js_state', Opal.to_a(args))}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8)));
          } else if (self.rendering_level['$=='](0)) {
            
            updates = $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_14 = function(hash, key){var self = TMP_14.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
            
              $writer = [key, Opal.const_get_relative($nesting, 'Array').$new()];
              $send(hash, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14));
            self.$set_state2(object, name, value, updates);
            $send(updates, 'each', [], (TMP_15 = function(observer, args){var self = TMP_15.$$s || this;
if (observer == null) observer = nil;if (args == null) args = nil;
            return $send(observer, 'update_react_js_state', Opal.to_a(args))}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15));};
          return value;
        }, TMP_set_state_16.$$arity = -4);
        
        Opal.defn(self, '$will_be_observing?', TMP_will_be_observing$q_17 = function(object, name, current_observer) {
          var $a, self = this;

          return ($truthy($a = current_observer) ? self.$new_observers()['$[]'](current_observer)['$[]'](object)['$include?'](name) : $a)
        }, TMP_will_be_observing$q_17.$$arity = 3);
        
        Opal.defn(self, '$is_observing?', TMP_is_observing$q_18 = function(object, name, current_observer) {
          var $a, self = this;

          return ($truthy($a = current_observer) ? self.$observers_by_name()['$[]'](object)['$[]'](name)['$include?'](current_observer) : $a)
        }, TMP_is_observing$q_18.$$arity = 3);
        
        Opal.defn(self, '$update_states_to_observe', TMP_update_states_to_observe_23 = function $$update_states_to_observe(current_observer) {
          var TMP_19, TMP_21, self = this, observers = nil, $writer = nil;
          if (self.current_observer == null) self.current_observer = nil;

          if (current_observer == null) {
            current_observer = self.current_observer;
          }
          
          if ($truthy(current_observer)) {
            } else {
            self.$raise("update_states_to_observer called outside of watch block")
          };
          $send(self.$current_observers()['$[]'](current_observer), 'each', [], (TMP_19 = function(object, names){var self = TMP_19.$$s || this, TMP_20;
if (object == null) object = nil;if (names == null) names = nil;
          return $send(names, 'each', [], (TMP_20 = function(name){var self = TMP_20.$$s || this;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name).$delete(current_observer)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20))}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19));
          observers = (($writer = [current_observer, self.$new_observers()['$[]'](current_observer)]), $send(self.$current_observers(), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
          self.$new_observers().$delete(current_observer);
          return $send(observers, 'each', [], (TMP_21 = function(object, names){var self = TMP_21.$$s || this, TMP_22;
if (object == null) object = nil;if (names == null) names = nil;
          return $send(names, 'each', [], (TMP_22 = function(name){var self = TMP_22.$$s || this;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name)['$<<'](current_observer)}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22))}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21));
        }, TMP_update_states_to_observe_23.$$arity = -1);
        
        Opal.defn(self, '$remove', TMP_remove_26 = function $$remove() {
          var TMP_24, self = this;
          if (self.current_observer == null) self.current_observer = nil;

          
          if ($truthy(self.current_observer)) {
            } else {
            self.$raise("remove called outside of watch block")
          };
          $send(self.$current_observers()['$[]'](self.current_observer), 'each', [], (TMP_24 = function(object, names){var self = TMP_24.$$s || this, TMP_25;
if (object == null) object = nil;if (names == null) names = nil;
          return $send(names, 'each', [], (TMP_25 = function(name){var self = TMP_25.$$s || this;
              if (self.current_observer == null) self.current_observer = nil;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name).$delete(self.current_observer)}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25))}, TMP_24.$$s = self, TMP_24.$$arity = 2, TMP_24));
          return self.$current_observers().$delete(self.current_observer);
        }, TMP_remove_26.$$arity = 0);
        
        Opal.defn(self, '$set_state_context_to', TMP_set_state_context_to_27 = function $$set_state_context_to(observer, rendering) {
          var self = this, $iter = TMP_set_state_context_to_27.$$p, $yield = $iter || nil, saved_current_observer = nil, return_value = nil;
          if (self.current_observer == null) self.current_observer = nil;
          if (self.rendering_level == null) self.rendering_level = nil;

          if (rendering == null) {
            rendering = nil;
          }
          if ($iter) TMP_set_state_context_to_27.$$p = null;
          return (function() { try {
          
          saved_current_observer = self.current_observer;
          self.current_observer = observer;
          if ($truthy(rendering)) {
            self.rendering_level = $rb_plus(self.rendering_level, 1)};
          return_value = Opal.yieldX($yield, []);
          return return_value;
          } finally {
            ((self.current_observer = saved_current_observer), (function() {if ($truthy(rendering)) {
              return (self.rendering_level = $rb_minus(self.rendering_level, 1))
              } else {
              return nil
            }; return nil; })(), return_value)
          }; })()
        }, TMP_set_state_context_to_27.$$arity = -2);
        
        Opal.defn(self, '$states', TMP_states_29 = function $$states() {
          var $a, TMP_28, self = this;
          if (self.states == null) self.states = nil;

          return (self.states = ($truthy($a = self.states) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_28 = function(h, k){var self = TMP_28.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
          
            $writer = [k, $hash2([], {})];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_28.$$s = self, TMP_28.$$arity = 2, TMP_28))))
        }, TMP_states_29.$$arity = 0);
        return $send(["new_observers", "current_observers", "observers_by_name"], 'each', [], (TMP_30 = function(method_name){var self = TMP_30.$$s || this, TMP_31;
if (method_name == null) method_name = nil;
        return $send(self, 'define_method', [method_name], (TMP_31 = function(){var self = TMP_31.$$s || this, $a, TMP_32;

          return ($truthy($a = self.$instance_variable_get("" + "@" + (method_name))) ? $a : self.$instance_variable_set("" + "@" + (method_name), $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_32 = function(h, k){var self = TMP_32.$$s || this, TMP_33, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
            
              $writer = [k, $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_33 = function(h, k){var self = TMP_33.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
              
                $writer = [k, []];
                $send(h, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_33.$$s = self, TMP_33.$$arity = 2, TMP_33))];
              $send(h, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_32.$$s = self, TMP_32.$$arity = 2, TMP_32))))}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30));
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-store"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$import', '$!=']);
  
  self.$require("set");
  self.$require("hyperloop-config");
  Opal.const_get_relative($nesting, 'Hyperloop').$import("hyper-store");
  (function($base, $parent_nesting) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $BaseStoreClass(){};
      var self = $BaseStoreClass = $klass($base, $super, 'BaseStoreClass', $BaseStoreClass);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], $nesting);
  self.$require("hyper-store/class_methods");
  self.$require("hyper-store/dispatch_receiver");
  self.$require("hyper-store/instance_methods");
  self.$require("hyper-store/mutator_wrapper");
  self.$require("hyper-store/state_wrapper/argument_validator");
  self.$require("hyper-store/state_wrapper");
  self.$require("hyper-store/version");
  self.$require("hyperloop/store");
  self.$require("hyperloop/application/boot");
  self.$require("hyperloop/store/mixin");
  self.$require("react/state");
  if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
    return nil
    } else {
    return nil
  };
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/state_wrapper"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$instance_variable_get', '$__from__', '$end_with?', '$respond_to?', '$deprecation_warning', '$sub', '$__send__', '$mutate', '$chop', '$pre_component_method_missing']);
  return (function($base, $parent_nesting) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StateWrapper_$$_1, TMP_StateWrapper_$$$eq_2, TMP_StateWrapper_method_missing_3;

      
      
      Opal.defn(self, '$[]', TMP_StateWrapper_$$_1 = function(state) {
        var self = this;

        return self.$__from__().$instance_variable_get("@native").state[state] || nil
      }, TMP_StateWrapper_$$_1.$$arity = 1);
      
      Opal.defn(self, '$[]=', TMP_StateWrapper_$$$eq_2 = function(state, new_value) {
        var self = this;

        return self.$__from__().$instance_variable_get("@native").state[state] = new_value
      }, TMP_StateWrapper_$$$eq_2.$$arity = 2);
      Opal.alias(self, "pre_component_method_missing", "method_missing");
      return (Opal.defn(self, '$method_missing', TMP_StateWrapper_method_missing_3 = function $$method_missing(method, $a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($truthy(($truthy($b = method['$end_with?']("!")) ? self.$__from__()['$respond_to?']("deprecation_warning") : $b))) {
          
          self.$__from__().$deprecation_warning("" + "The mutator 'state." + (method) + "' has been deprecated.  Use 'mutate." + (method.$sub(/\!$/, "")) + "' instead.");
          return $send(self.$__from__().$mutate(), '__send__', [method.$chop()].concat(Opal.to_a(args)));
          } else {
          return $send(self, 'pre_component_method_missing', [method].concat(Opal.to_a(args)))
        }
      }, TMP_StateWrapper_method_missing_3.$$arity = -2), nil) && 'method_missing';
    })($nesting[0], Opal.const_get_relative($nesting, 'BaseStoreClass'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/component/api"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$set_or_replace_state_or_prop', '$to_proc', '$private', '$shallow_to_n']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $API, self = $API = $module($base, 'API');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_API_dom_node_1, TMP_API_mounted$q_2, TMP_API_force_update$B_3, TMP_API_set_props_4, TMP_API_set_state_5, TMP_API_set_state$B_6, TMP_API_set_or_replace_state_or_prop_7;

        
        
        Opal.defn(self, '$dom_node', TMP_API_dom_node_1 = function $$dom_node() {
          var self = this;

          return ReactDOM.findDOMNode(self.native)
        }, TMP_API_dom_node_1.$$arity = 0);
        
        Opal.defn(self, '$mounted?', TMP_API_mounted$q_2 = function() {
          var self = this;

          return (self.is_mounted === undefined) ? false : self.is_mounted
        }, TMP_API_mounted$q_2.$$arity = 0);
        
        Opal.defn(self, '$force_update!', TMP_API_force_update$B_3 = function() {
          var self = this;

          
          self.native.forceUpdate();
          return self;
        }, TMP_API_force_update$B_3.$$arity = 0);
        
        Opal.defn(self, '$set_props', TMP_API_set_props_4 = function $$set_props(prop) {
          var self = this, $iter = TMP_API_set_props_4.$$p, block = $iter || nil;

          if ($iter) TMP_API_set_props_4.$$p = null;
          return self.$raise("set_props: setProps() is no longer supported by react")
        }, TMP_API_set_props_4.$$arity = 1);
        Opal.alias(self, "set_props!", "set_props");
        
        Opal.defn(self, '$set_state', TMP_API_set_state_5 = function $$set_state(state) {
          var self = this, $iter = TMP_API_set_state_5.$$p, block = $iter || nil;

          if ($iter) TMP_API_set_state_5.$$p = null;
          return $send(self, 'set_or_replace_state_or_prop', [state, "setState"], block.$to_proc())
        }, TMP_API_set_state_5.$$arity = 1);
        
        Opal.defn(self, '$set_state!', TMP_API_set_state$B_6 = function(state) {
          var self = this, $iter = TMP_API_set_state$B_6.$$p, block = $iter || nil;

          if ($iter) TMP_API_set_state$B_6.$$p = null;
          
          $send(self, 'set_or_replace_state_or_prop', [state, "setState"], block.$to_proc());
          return self.native.forceUpdate();
        }, TMP_API_set_state$B_6.$$arity = 1);
        self.$private();
        
        Opal.defn(self, '$set_or_replace_state_or_prop', TMP_API_set_or_replace_state_or_prop_7 = function $$set_or_replace_state_or_prop(state_or_prop, method) {
          var self = this, $iter = TMP_API_set_or_replace_state_or_prop_7.$$p, block = $iter || nil;
          if (self["native"] == null) self["native"] = nil;

          if ($iter) TMP_API_set_or_replace_state_or_prop_7.$$p = null;
          
          if ($truthy(self["native"])) {
            } else {
            self.$raise("No native ReactComponent associated")
          };
          var state_prop_n = state_or_prop.$shallow_to_n();
          if ($truthy(block)) {
            
            if (self["native"].__opalInstanceInitializedState === true) {
              self["native"][method](state_prop_n, function(){
                block.$call();
              });
            } else {
              for (var sp in state_prop_n) {
                if (state_prop_n.hasOwnProperty(sp)) {
                  self["native"].state[sp] = state_prop_n[sp];
                }
              }
            }
          
            } else {
            
            if (self["native"].__opalInstanceInitializedState === true) {
              self["native"][method](state_prop_n);
            } else {
              for (var sp in state_prop_n) {
                if (state_prop_n.hasOwnProperty(sp)) {
                  self["native"].state[sp] = state_prop_n[sp];
                } 
              }
            }
          
          };
        }, TMP_API_set_or_replace_state_or_prop_7.$$arity = 2);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/component/class_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$deprecation_warning', '$==', '$[]', '$<<', '$each', '$is_a?', '$type', '$define_method', '$render', '$instance_eval', '$to_proc', '$empty?', '$method_missing', '$haml_class_name', '$new', '$props_wrapper', '$validator', '$validate', '$>', '$count', '$+', '$name', '$join', '$default_props', '$build', '$first', '$delete', '$merge!', '$optional', '$requires', '$all_other_params', '$props', '$arity', '$last', '$pop', '$state', '$[]=', '$-', '$singleton_class', '$__send__', '$mutate', '$native_mixins', '$static_call_backs', '$split', '$to_n', '$add_item_to_tree', '$Native', '$create_native_react_class', '$reverse', '$import_native_component', '$eval_native_react_component', '$raise', '$message', '$!=', '$class', '$length', '$inject', '$class_eval']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_deprecation_warning_1, TMP_ClassMethods_reactrb_component$q_2, TMP_ClassMethods_backtrace_3, TMP_ClassMethods_append_backtrace_5, TMP_ClassMethods_render_6, TMP_ClassMethods_method_missing_10, TMP_ClassMethods_validator_11, TMP_ClassMethods_prop_types_12, TMP_ClassMethods_default_props_13, TMP_ClassMethods_params_14, TMP_ClassMethods_props_wrapper_15, TMP_ClassMethods_param_16, TMP_ClassMethods_collect_other_params_as_18, TMP_ClassMethods_define_state_19, TMP_ClassMethods_export_state_22, TMP_ClassMethods_native_mixin_26, TMP_ClassMethods_native_mixins_27, TMP_ClassMethods_static_call_back_28, TMP_ClassMethods_static_call_backs_29, TMP_ClassMethods_export_component_30, TMP_ClassMethods_imports_32, TMP_ClassMethods_add_item_to_tree_34, TMP_ClassMethods_to_n_35;

        
        
        Opal.defn(self, '$deprecation_warning', TMP_ClassMethods_deprecation_warning_1 = function $$deprecation_warning(message) {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component').$deprecation_warning(self, message)
        }, TMP_ClassMethods_deprecation_warning_1.$$arity = 1);
        
        Opal.defn(self, '$reactrb_component?', TMP_ClassMethods_reactrb_component$q_2 = function() {
          var self = this;

          return true
        }, TMP_ClassMethods_reactrb_component$q_2.$$arity = 0);
        
        Opal.defn(self, '$backtrace', TMP_ClassMethods_backtrace_3 = function $$backtrace($a_rest) {
          var $b, self = this, args;
          if (self.dont_catch_exceptions == null) self.dont_catch_exceptions = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          self.dont_catch_exceptions = args['$[]'](0)['$==']("none");
          return (self.backtrace_off = ($truthy($b = self.dont_catch_exceptions) ? $b : args['$[]'](0)['$==']("off")));
        }, TMP_ClassMethods_backtrace_3.$$arity = -1);
        
        Opal.defn(self, '$append_backtrace', TMP_ClassMethods_append_backtrace_5 = function $$append_backtrace(message_array, backtrace) {
          var TMP_4, self = this;

          
          message_array['$<<']("" + "    " + (backtrace['$[]'](0)));
          return $send(backtrace['$[]']($range(1, -1, false)), 'each', [], (TMP_4 = function(line){var self = TMP_4.$$s || this;
if (line == null) line = nil;
          return message_array['$<<'](line)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        }, TMP_ClassMethods_append_backtrace_5.$$arity = 2);
        
        Opal.defn(self, '$render', TMP_ClassMethods_render_6 = function $$render(container, params) {
          var TMP_7, TMP_9, self = this, $iter = TMP_ClassMethods_render_6.$$p, block = $iter || nil;

          if (container == null) {
            container = nil;
          }
          if (params == null) {
            params = $hash2([], {});
          }
          if ($iter) TMP_ClassMethods_render_6.$$p = null;
          if ($truthy(container)) {
            
            if ($truthy(container['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Element')))) {
              container = container.$type()};
            return $send(self, 'define_method', ["render"], (TMP_7 = function(){var self = TMP_7.$$s || this, TMP_8;

            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', [container, params], (TMP_8 = function(){var self = TMP_8.$$s || this;

              if ($truthy(block)) {
                  return $send(self, 'instance_eval', [], block.$to_proc())
                  } else {
                  return nil
                }}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7));
            } else {
            return $send(self, 'define_method', ["render"], (TMP_9 = function(){var self = TMP_9.$$s || this;

            return $send(self, 'instance_eval', [], block.$to_proc())}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9))
          }
        }, TMP_ClassMethods_render_6.$$arity = -1);
        
        Opal.defn(self, '$method_missing', TMP_ClassMethods_method_missing_10 = function $$method_missing(name, $a_rest) {
          var self = this, args, $iter = TMP_ClassMethods_method_missing_10.$$p, children = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_ClassMethods_method_missing_10.$$p = null;
          
          if ($truthy(args['$empty?']())) {
            } else {
            $send(Opal.const_get_relative($nesting, 'Object'), 'method_missing', [name].concat(Opal.to_a(args)), children.$to_proc())
          };
          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', [self, $hash2(["class"], {"class": Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Element').$haml_class_name(name)})], children.$to_proc());
        }, TMP_ClassMethods_method_missing_10.$$arity = -2);
        
        Opal.defn(self, '$validator', TMP_ClassMethods_validator_11 = function $$validator() {
          var $a, self = this;
          if (self.validator == null) self.validator = nil;

          return (self.validator = ($truthy($a = self.validator) ? $a : Opal.const_get_relative($nesting, 'Validator').$new(self.$props_wrapper())))
        }, TMP_ClassMethods_validator_11.$$arity = 0);
        
        Opal.defn(self, '$prop_types', TMP_ClassMethods_prop_types_12 = function $$prop_types() {
          var self = this;

          if ($truthy(self.$validator())) {
            return $hash2(["_componentValidator"], {"_componentValidator": 
              function(props, propName, componentName) {
                var errors = self.$validator().$validate(Opal.const_get_relative($nesting, 'Hash').$new(props));
                return (function() {if ($truthy($rb_gt((errors).$count(), 0))) {
              return new Error($rb_plus("" + "In component `" + (self.$name()) + "`\n", (errors).$join("\n")))
              } else {
              return undefined
            }; return nil; })();
              }
            })
            } else {
            return $hash2([], {})
          }
        }, TMP_ClassMethods_prop_types_12.$$arity = 0);
        
        Opal.defn(self, '$default_props', TMP_ClassMethods_default_props_13 = function $$default_props() {
          var self = this;

          return self.$validator().$default_props()
        }, TMP_ClassMethods_default_props_13.$$arity = 0);
        
        Opal.defn(self, '$params', TMP_ClassMethods_params_14 = function $$params() {
          var self = this, $iter = TMP_ClassMethods_params_14.$$p, block = $iter || nil;

          if ($iter) TMP_ClassMethods_params_14.$$p = null;
          return $send(self.$validator(), 'build', [], block.$to_proc())
        }, TMP_ClassMethods_params_14.$$arity = 0);
        
        Opal.defn(self, '$props_wrapper', TMP_ClassMethods_props_wrapper_15 = function $$props_wrapper() {
          var $a, self = this;
          if (self.props_wrapper == null) self.props_wrapper = nil;

          return (self.props_wrapper = ($truthy($a = self.props_wrapper) ? $a : Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'PropsWrapper'))))
        }, TMP_ClassMethods_props_wrapper_15.$$arity = 0);
        
        Opal.defn(self, '$param', TMP_ClassMethods_param_16 = function $$param($a_rest) {
          var $b, self = this, args, options = nil, name = nil, default$ = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          if ($truthy(args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
            
            options = args['$[]'](0);
            name = options.$first()['$[]'](0);
            default$ = options.$first()['$[]'](1);
            options.$delete(name);
            options['$merge!']($hash2(["default"], {"default": default$}));
            } else {
            
            name = args['$[]'](0);
            options = ($truthy($b = args['$[]'](1)) ? $b : $hash2([], {}));
          };
          if ($truthy(options['$[]']("default"))) {
            return self.$validator().$optional(name, options)
            } else {
            return self.$validator().$requires(name, options)
          };
        }, TMP_ClassMethods_param_16.$$arity = -1);
        
        Opal.defn(self, '$collect_other_params_as', TMP_ClassMethods_collect_other_params_as_18 = function $$collect_other_params_as(name) {
          var TMP_17, self = this;

          return $send(self.$validator(), 'all_other_params', [name], (TMP_17 = function(){var self = TMP_17.$$s || this;

          return self.$props()}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17))
        }, TMP_ClassMethods_collect_other_params_as_18.$$arity = 1);
        Opal.alias(self, "other_params", "collect_other_params_as");
        Opal.alias(self, "others", "collect_other_params_as");
        
        Opal.defn(self, '$define_state', TMP_ClassMethods_define_state_19 = function $$define_state($a_rest) {
          var $b, TMP_20, TMP_21, self = this, states, $iter = TMP_ClassMethods_define_state_19.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          states = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            states[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_ClassMethods_define_state_19.$$p = null;
          
          self.$deprecation_warning("'define_state' is deprecated. Use the 'state' macro to declare states.");
          default_initial_value = (function() {if ($truthy(($truthy($b = block) ? block.$arity()['$=='](0) : $b))) {
            return Opal.yieldX(block, []);
            } else {
            return nil
          }; return nil; })();
          states_hash = (function() {if ($truthy(states.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
            return states.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          $send(states, 'each', [], (TMP_20 = function(name){var self = TMP_20.$$s || this;
if (name == null) name = nil;
          return self.$state($hash(name, default_initial_value))}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20));
          return $send(states_hash, 'each', [], (TMP_21 = function(name, value){var self = TMP_21.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return self.$state($hash(name, value))}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21));
        }, TMP_ClassMethods_define_state_19.$$arity = -1);
        
        Opal.defn(self, '$export_state', TMP_ClassMethods_export_state_22 = function $$export_state($a_rest) {
          var $b, TMP_23, TMP_24, self = this, states, $iter = TMP_ClassMethods_export_state_22.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          states = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            states[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_ClassMethods_export_state_22.$$p = null;
          
          self.$deprecation_warning("'export_state' is deprecated. Use the 'state' macro to declare states.");
          default_initial_value = (function() {if ($truthy(($truthy($b = block) ? block.$arity()['$=='](0) : $b))) {
            return Opal.yieldX(block, []);
            } else {
            return nil
          }; return nil; })();
          states_hash = (function() {if ($truthy(states.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
            return states.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          $send(states, 'each', [], (TMP_23 = function(name){var self = TMP_23.$$s || this, $writer = nil;
if (name == null) name = nil;
          
            $writer = [name, default_initial_value];
            $send(states_hash, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23));
          return $send(states_hash, 'each', [], (TMP_24 = function(name, value){var self = TMP_24.$$s || this, TMP_25;
if (name == null) name = nil;if (value == null) value = nil;
          
            self.$state($hash(name, value, "scope", "class", "reader", true));
            return $send(self.$singleton_class(), 'define_method', ["" + (name) + "!"], (TMP_25 = function($a_rest){var self = TMP_25.$$s || this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return $send(self.$mutate(), '__send__', [name].concat(Opal.to_a(args)))}, TMP_25.$$s = self, TMP_25.$$arity = -1, TMP_25));}, TMP_24.$$s = self, TMP_24.$$arity = 2, TMP_24));
        }, TMP_ClassMethods_export_state_22.$$arity = -1);
        
        Opal.defn(self, '$native_mixin', TMP_ClassMethods_native_mixin_26 = function $$native_mixin(item) {
          var self = this;

          return self.$native_mixins()['$<<'](item)
        }, TMP_ClassMethods_native_mixin_26.$$arity = 1);
        
        Opal.defn(self, '$native_mixins', TMP_ClassMethods_native_mixins_27 = function $$native_mixins() {
          var $a, self = this;
          if (self.native_mixins == null) self.native_mixins = nil;

          return (self.native_mixins = ($truthy($a = self.native_mixins) ? $a : []))
        }, TMP_ClassMethods_native_mixins_27.$$arity = 0);
        
        Opal.defn(self, '$static_call_back', TMP_ClassMethods_static_call_back_28 = function $$static_call_back(name) {
          var self = this, $iter = TMP_ClassMethods_static_call_back_28.$$p, block = $iter || nil, $writer = nil;

          if ($iter) TMP_ClassMethods_static_call_back_28.$$p = null;
          
          $writer = [name, block];
          $send(self.$static_call_backs(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_ClassMethods_static_call_back_28.$$arity = 1);
        
        Opal.defn(self, '$static_call_backs', TMP_ClassMethods_static_call_backs_29 = function $$static_call_backs() {
          var $a, self = this;
          if (self.static_call_backs == null) self.static_call_backs = nil;

          return (self.static_call_backs = ($truthy($a = self.static_call_backs) ? $a : $hash2([], {})))
        }, TMP_ClassMethods_static_call_backs_29.$$arity = 0);
        
        Opal.defn(self, '$export_component', TMP_ClassMethods_export_component_30 = function $$export_component(opts) {
          var $a, self = this, export_name = nil, first_name = nil, $writer = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          
          export_name = ($truthy($a = opts['$[]']("as")) ? $a : self.$name()).$split("::");
          first_name = export_name.$first();
          
          $writer = [first_name, self.$add_item_to_tree(self.$Native(Opal.global)['$[]'](first_name), $rb_plus([Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'API').$create_native_react_class(self)], export_name['$[]']($range(1, -1, false)).$reverse())).$to_n()];
          $send(self.$Native(Opal.global), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, TMP_ClassMethods_export_component_30.$$arity = -1);
        
        Opal.defn(self, '$imports', TMP_ClassMethods_imports_32 = function $$imports(component_name) {
          var TMP_31, self = this, e = nil;

          return (function() { try {
          try {
            
            Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'API').$import_native_component(self, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'API').$eval_native_react_component(component_name));
            return $send(self, 'define_method', ["render"], (TMP_31 = function(){var self = TMP_31.$$s || this;

            return nil}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31));
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
              try {
                return self.$raise("" + (self) + " cannot import '" + (component_name) + "': " + (e.$message()) + ".")
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
          } finally {
            self
          }; })()
        }, TMP_ClassMethods_imports_32.$$arity = 1);
        
        Opal.defn(self, '$add_item_to_tree', TMP_ClassMethods_add_item_to_tree_34 = function $$add_item_to_tree(current_tree, new_item) {
          var $a, TMP_33, self = this, $writer = nil;

          if ($truthy(($truthy($a = self.$Native(current_tree).$class()['$!='](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Object'))) ? $a : new_item.$length()['$=='](1)))) {
            return $send(new_item, 'inject', [], (TMP_33 = function(a, e){var self = TMP_33.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
            return $hash(e, a)}, TMP_33.$$s = self, TMP_33.$$arity = 2, TMP_33))
            } else {
            
            
            $writer = [new_item.$last(), self.$add_item_to_tree(self.$Native(current_tree)['$[]'](new_item.$last()), new_item['$[]']($range(0, -2, false)))];
            $send(self.$Native(current_tree), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return current_tree;
          }
        }, TMP_ClassMethods_add_item_to_tree_34.$$arity = 2);
        
        Opal.defn(self, '$to_n', TMP_ClassMethods_to_n_35 = function $$to_n() {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'API').$class_eval("@@component_classes")['$[]'](self)
        }, TMP_ClassMethods_to_n_35.$$arity = 0);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/component/props_wrapper"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$==', '$define_method', '$value_for', '$>', '$count', '$call', '$[]', '$props', '$to_proc', '$fetch_from_cache', '$respond_to?', '$_react_param_conversion', '$is_a?', '$collect', '$private', '$cache', '$equal?', '$tap', '$[]=', '$-', '$new', '$component', '$instance_variable_get']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $PropsWrapper(){};
        var self = $PropsWrapper = $klass($base, $super, 'PropsWrapper', $PropsWrapper);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_PropsWrapper_define_param_7, TMP_PropsWrapper_define_all_others_9, TMP_PropsWrapper_initialize_10, TMP_PropsWrapper_$$_11, TMP_PropsWrapper__reset_all_others_cache_12, TMP_PropsWrapper_fetch_from_cache_13, TMP_PropsWrapper_cache_16, TMP_PropsWrapper_props_17, TMP_PropsWrapper_value_for_18;

        def.cache = nil;
        
        self.$attr_reader("component");
        Opal.defs(self, '$define_param', TMP_PropsWrapper_define_param_7 = function $$define_param(name, param_type) {
          var TMP_1, TMP_2, TMP_3, TMP_4, self = this;

          if (param_type['$=='](Opal.const_get_relative($nesting, 'Observable'))) {
            
            $send(self, 'define_method', ["" + (name)], (TMP_1 = function(){var self = TMP_1.$$s || this;

            return self.$value_for(name)}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
            return $send(self, 'define_method', ["" + (name) + "!"], (TMP_2 = function($a_rest){var self = TMP_2.$$s || this, args, current_value = nil;
              if (self.dont_update_state == null) self.dont_update_state = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              current_value = self.$value_for(name);
              if ($truthy($rb_gt(args.$count(), 0))) {
                
                self.$props()['$[]'](name).$call(args['$[]'](0));
                return current_value;
                } else {
                
                try {
                  if ($truthy(self.dont_update_state)) {
                    } else {
                    self.$props()['$[]'](name).$call(current_value)
                  }
                } catch ($err) {
                  if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                    try {
                      nil
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                };
                return self.$props()['$[]'](name);
              };}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2));
          } else if (param_type['$=='](Opal.const_get_relative($nesting, 'Proc'))) {
            return $send(self, 'define_method', ["" + (name)], (TMP_3 = function($a_rest){var self = TMP_3.$$s || this, block, args;

              block = TMP_3.$$p || nil;
              if (block) TMP_3.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            if ($truthy(self.$props()['$[]'](name))) {
                return $send(self.$props()['$[]'](name), 'call', Opal.to_a(args), block.$to_proc())
                } else {
                return nil
              }}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3))
            } else {
            return $send(self, 'define_method', ["" + (name)], (TMP_4 = function(){var self = TMP_4.$$s || this, TMP_5;

            return $send(self, 'fetch_from_cache', [name], (TMP_5 = function(){var self = TMP_5.$$s || this, $a, TMP_6;

              if ($truthy(param_type['$respond_to?']("_react_param_conversion"))) {
                  return param_type.$_react_param_conversion(self.$props()['$[]'](name), nil)
                } else if ($truthy(($truthy($a = param_type['$is_a?'](Opal.const_get_relative($nesting, 'Array'))) ? param_type['$[]'](0)['$respond_to?']("_react_param_conversion") : $a))) {
                  return $send(self.$props()['$[]'](name), 'collect', [], (TMP_6 = function(param){var self = TMP_6.$$s || this;
if (param == null) param = nil;
                  return param_type['$[]'](0).$_react_param_conversion(param, nil)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
                  } else {
                  return self.$props()['$[]'](name)
                }}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4))
          }
        }, TMP_PropsWrapper_define_param_7.$$arity = 2);
        Opal.defs(self, '$define_all_others', TMP_PropsWrapper_define_all_others_9 = function $$define_all_others(name) {
          var TMP_8, self = this, $iter = TMP_PropsWrapper_define_all_others_9.$$p, $yield = $iter || nil;

          if ($iter) TMP_PropsWrapper_define_all_others_9.$$p = null;
          return $send(self, 'define_method', ["" + (name)], (TMP_8 = function(){var self = TMP_8.$$s || this, $a;
            if (self._all_others_cache == null) self._all_others_cache = nil;

          return (self._all_others_cache = ($truthy($a = self._all_others_cache) ? $a : Opal.yield1($yield, self.$props())))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8))
        }, TMP_PropsWrapper_define_all_others_9.$$arity = 1);
        
        Opal.defn(self, '$initialize', TMP_PropsWrapper_initialize_10 = function $$initialize(component) {
          var self = this;

          return (self.component = component)
        }, TMP_PropsWrapper_initialize_10.$$arity = 1);
        
        Opal.defn(self, '$[]', TMP_PropsWrapper_$$_11 = function(prop) {
          var self = this;

          return self.$props()['$[]'](prop)
        }, TMP_PropsWrapper_$$_11.$$arity = 1);
        
        Opal.defn(self, '$_reset_all_others_cache', TMP_PropsWrapper__reset_all_others_cache_12 = function $$_reset_all_others_cache() {
          var self = this;

          return (self._all_others_cache = nil)
        }, TMP_PropsWrapper__reset_all_others_cache_12.$$arity = 0);
        self.$private();
        
        Opal.defn(self, '$fetch_from_cache', TMP_PropsWrapper_fetch_from_cache_13 = function $$fetch_from_cache(name) {
          var $a, $b, TMP_14, self = this, $iter = TMP_PropsWrapper_fetch_from_cache_13.$$p, $yield = $iter || nil, last = nil, value = nil;

          if ($iter) TMP_PropsWrapper_fetch_from_cache_13.$$p = null;
          
          $b = self.$cache()['$[]'](name), $a = Opal.to_ary($b), (last = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(last['$equal?'](self.$props()['$[]'](name)))) {
            return value};
          return $send(Opal.yieldX($yield, []), 'tap', [], (TMP_14 = function(value){var self = TMP_14.$$s || this, $writer = nil;
if (value == null) value = nil;
          
            $writer = [name, [self.$props()['$[]'](name), value]];
            $send(self.$cache(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
        }, TMP_PropsWrapper_fetch_from_cache_13.$$arity = 1);
        
        Opal.defn(self, '$cache', TMP_PropsWrapper_cache_16 = function $$cache() {
          var $a, TMP_15, self = this;

          return (self.cache = ($truthy($a = self.cache) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_15 = function(h, k){var self = TMP_15.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
          
            $writer = [k, []];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15))))
        }, TMP_PropsWrapper_cache_16.$$arity = 0);
        
        Opal.defn(self, '$props', TMP_PropsWrapper_props_17 = function $$props() {
          var self = this;

          return self.$component().$props()
        }, TMP_PropsWrapper_props_17.$$arity = 0);
        return (Opal.defn(self, '$value_for', TMP_PropsWrapper_value_for_18 = function $$value_for(name) {
          var self = this;

          if ($truthy(self['$[]'](name))) {
            return self['$[]'](name).$instance_variable_get("@value")
            } else {
            return nil
          }
        }, TMP_PropsWrapper_value_for_18.$$arity = 1), nil) && 'value_for';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/component"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$new', '$to_a', '$mounted_components', '$each', '$include?', '$force_update!', '$include', '$class_eval', '$class_attribute', '$define_callback', '$add_after_error_hook', '$extend', '$deprecation_warning', '$name', '$class', '$init_store', '$event_camelize', '$to_s', '$call', '$[]', '$params', '$on_opal_client?', '$load_context', '$set_state_context_to', '$<<', '$run_callback', '$update_states_to_observe', '$_reset_all_others_cache', '$remove', '$delete', '$attr_reader', '$==', '$set_state', '$method_defined?', '$raise', '$render', '$respond_to?', '$waiting_on_resources', '$initialize_states', '$define_state', '$to_proc', '$log']);
  
  self.$require("react/ext/string");
  self.$require("react/ext/hash");
  self.$require("active_support/core_ext/class/attribute");
  self.$require("react/callbacks");
  self.$require("react/rendering_context");
  self.$require("hyper-store");
  self.$require("react/state_wrapper");
  self.$require("react/component/api");
  self.$require("react/component/class_methods");
  self.$require("react/component/props_wrapper");
  (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Component(){};
      var self = $Component = $klass($base, $super, 'Component', $Component);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_mounted_components_1, TMP_force_update$B_3;

        
        
        Opal.defn(self, '$mounted_components', TMP_mounted_components_1 = function $$mounted_components() {
          var $a, self = this;
          if (self.mounted_components == null) self.mounted_components = nil;

          return (self.mounted_components = ($truthy($a = self.mounted_components) ? $a : Opal.const_get_relative($nesting, 'Set').$new()))
        }, TMP_mounted_components_1.$$arity = 0);
        return (Opal.defn(self, '$force_update!', TMP_force_update$B_3 = function() {
          var TMP_2, self = this, components = nil;

          
          components = self.$mounted_components().$to_a();
          return $send(components, 'each', [], (TMP_2 = function(comp){var self = TMP_2.$$s || this;
if (comp == null) comp = nil;
          
            if ($truthy(self.$mounted_components()['$include?'](comp))) {
              } else {
              return nil;
            };
            return comp['$force_update!']();}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        }, TMP_force_update$B_3.$$arity = 0), nil) && 'force_update!';
      })(Opal.get_singleton_class(self), $nesting);
      return (function($base, $parent_nesting) {
        var $Mixin, self = $Mixin = $module($base, 'Mixin');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Mixin_included_6, TMP_Mixin_deprecation_warning_7, TMP_Mixin_deprecation_warning_8, TMP_Mixin_initialize_9, TMP_Mixin_emit_10, TMP_Mixin_component_will_mount_12, TMP_Mixin_component_did_mount_14, TMP_Mixin_component_will_receive_props_16, TMP_Mixin_component_will_update_18, TMP_Mixin_component_did_update_20, TMP_Mixin_component_will_unmount_22, TMP_Mixin_component_did_catch_24, TMP_Mixin_update_react_js_state_25, TMP_Mixin_set_state_synchronously$q_26, TMP_Mixin_render_27, TMP_Mixin__render_wrapper_30, TMP_Mixin_watch_31, TMP_Mixin_define_state_32;

        
        Opal.defs(self, '$included', TMP_Mixin_included_6 = function $$included(base) {
          var TMP_4, self = this;

          
          base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Store'), 'Mixin'));
          base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component'), 'API'));
          base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Callbacks'));
          base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component'), 'Tags'));
          base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component'), 'DslInstanceMethods'));
          base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component'), 'ShouldComponentUpdate'));
          $send(base, 'class_eval', [], (TMP_4 = function(){var self = TMP_4.$$s || this, TMP_5;

          
            self.$class_attribute("initial_state");
            self.$define_callback("before_mount");
            self.$define_callback("after_mount");
            self.$define_callback("before_receive_props");
            self.$define_callback("before_update");
            self.$define_callback("after_update");
            self.$define_callback("before_unmount");
            return $send(self, 'define_callback', ["after_error"], (TMP_5 = function(){var self = TMP_5.$$s || this;

            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'API').$add_after_error_hook(base)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
          return base.$extend(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component'), 'ClassMethods'));
        }, TMP_Mixin_included_6.$$arity = 1);
        Opal.defs(self, '$deprecation_warning', TMP_Mixin_deprecation_warning_7 = function $$deprecation_warning(message) {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component').$deprecation_warning(self.$name(), message)
        }, TMP_Mixin_deprecation_warning_7.$$arity = 1);
        
        Opal.defn(self, '$deprecation_warning', TMP_Mixin_deprecation_warning_8 = function $$deprecation_warning(message) {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component').$deprecation_warning(self.$class().$name(), message)
        }, TMP_Mixin_deprecation_warning_8.$$arity = 1);
        
        Opal.defn(self, '$initialize', TMP_Mixin_initialize_9 = function $$initialize(native_element) {
          var self = this;

          
          self["native"] = native_element;
          return self.$init_store();
        }, TMP_Mixin_initialize_9.$$arity = 1);
        
        Opal.defn(self, '$emit', TMP_Mixin_emit_10 = function $$emit(event_name, $a_rest) {
          var self = this, args, built_in_event_name = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Event'), 'BUILT_IN_EVENTS')['$include?']((built_in_event_name = "" + "on" + (event_name.$to_s().$event_camelize()))))) {
            return $send(self.$params()['$[]'](built_in_event_name), 'call', Opal.to_a(args))
            } else {
            return $send(self.$params()['$[]']("" + "on_" + (event_name)), 'call', Opal.to_a(args))
          }
        }, TMP_Mixin_emit_10.$$arity = -2);
        
        Opal.defn(self, '$component_will_mount', TMP_Mixin_component_will_mount_12 = function $$component_will_mount() {
          var TMP_11, self = this;

          
          if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'IsomorphicHelpers')['$on_opal_client?']())) {
            Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'IsomorphicHelpers').$load_context(true)};
          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State'), 'set_state_context_to', [self], (TMP_11 = function(){var self = TMP_11.$$s || this;

          
            Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component').$mounted_components()['$<<'](self);
            return self.$run_callback("before_mount");}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
        }, TMP_Mixin_component_will_mount_12.$$arity = 0);
        
        Opal.defn(self, '$component_did_mount', TMP_Mixin_component_did_mount_14 = function $$component_did_mount() {
          var TMP_13, self = this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State'), 'set_state_context_to', [self], (TMP_13 = function(){var self = TMP_13.$$s || this;

          
            self.$run_callback("after_mount");
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$update_states_to_observe();}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))
        }, TMP_Mixin_component_did_mount_14.$$arity = 0);
        
        Opal.defn(self, '$component_will_receive_props', TMP_Mixin_component_will_receive_props_16 = function $$component_will_receive_props(next_props) {
          var TMP_15, self = this;

          
          $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State'), 'set_state_context_to', [self], (TMP_15 = function(){var self = TMP_15.$$s || this;

          return self.$run_callback("before_receive_props", next_props)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
          return (self._receiving_props = true);
        }, TMP_Mixin_component_will_receive_props_16.$$arity = 1);
        
        Opal.defn(self, '$component_will_update', TMP_Mixin_component_will_update_18 = function $$component_will_update(next_props, next_state) {
          var TMP_17, self = this;
          if (self._receiving_props == null) self._receiving_props = nil;

          
          $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State'), 'set_state_context_to', [self], (TMP_17 = function(){var self = TMP_17.$$s || this;

          return self.$run_callback("before_update", next_props, next_state)}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17));
          if ($truthy(self._receiving_props)) {
            self.$params().$_reset_all_others_cache()};
          return (self._receiving_props = false);
        }, TMP_Mixin_component_will_update_18.$$arity = 2);
        
        Opal.defn(self, '$component_did_update', TMP_Mixin_component_did_update_20 = function $$component_did_update(prev_props, prev_state) {
          var TMP_19, self = this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State'), 'set_state_context_to', [self], (TMP_19 = function(){var self = TMP_19.$$s || this;

          
            self.$run_callback("after_update", prev_props, prev_state);
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$update_states_to_observe();}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19))
        }, TMP_Mixin_component_did_update_20.$$arity = 2);
        
        Opal.defn(self, '$component_will_unmount', TMP_Mixin_component_will_unmount_22 = function $$component_will_unmount() {
          var TMP_21, self = this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State'), 'set_state_context_to', [self], (TMP_21 = function(){var self = TMP_21.$$s || this;

          
            self.$run_callback("before_unmount");
            Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$remove();
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component').$mounted_components().$delete(self);}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))
        }, TMP_Mixin_component_will_unmount_22.$$arity = 0);
        
        Opal.defn(self, '$component_did_catch', TMP_Mixin_component_did_catch_24 = function $$component_did_catch(error, info) {
          var TMP_23, self = this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State'), 'set_state_context_to', [self], (TMP_23 = function(){var self = TMP_23.$$s || this;

          return self.$run_callback("after_error", error, info)}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23))
        }, TMP_Mixin_component_did_catch_24.$$arity = 2);
        self.$attr_reader("waiting_on_resources");
        
        Opal.defn(self, '$update_react_js_state', TMP_Mixin_update_react_js_state_25 = function $$update_react_js_state(object, name, value) {
          var self = this;

          if ($truthy(object)) {
            
            if (object['$=='](self)) {
              } else {
              name = "" + (object.$class()) + "." + (name)
            };
            return self.$set_state($hash("***_state_updated_at-***", Date.now() + Math.random(), name, value));
            } else {
            return self.$set_state($hash(name, value))
          }
        }, TMP_Mixin_update_react_js_state_25.$$arity = 3);
        
        Opal.defn(self, '$set_state_synchronously?', TMP_Mixin_set_state_synchronously$q_26 = function() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return self["native"]["__opalInstanceSyncSetState"]
        }, TMP_Mixin_set_state_synchronously$q_26.$$arity = 0);
        if ($truthy(self['$method_defined?']("render"))) {
          } else {
          
          Opal.defn(self, '$render', TMP_Mixin_render_27 = function $$render() {
            var self = this;

            return self.$raise("no render defined")
          }, TMP_Mixin_render_27.$$arity = 0)
        };
        
        Opal.defn(self, '$_render_wrapper', TMP_Mixin__render_wrapper_30 = function $$_render_wrapper() {
          var TMP_28, self = this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State'), 'set_state_context_to', [self, true], (TMP_28 = function(){var self = TMP_28.$$s || this, TMP_29, element = nil;

          
            element = $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', [nil], (TMP_29 = function(){var self = TMP_29.$$s || this, $a;

            return ($truthy($a = self.$render()) ? $a : "")}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29));
            if ($truthy(element['$respond_to?']("waiting_on_resources"))) {
              self.waiting_on_resources = element.$waiting_on_resources()};
            return element;}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28))
        }, TMP_Mixin__render_wrapper_30.$$arity = 0);
        
        Opal.defn(self, '$watch', TMP_Mixin_watch_31 = function $$watch(value) {
          var self = this, $iter = TMP_Mixin_watch_31.$$p, on_change = $iter || nil;

          if ($iter) TMP_Mixin_watch_31.$$p = null;
          return Opal.const_get_relative($nesting, 'Observable').$new(value, on_change)
        }, TMP_Mixin_watch_31.$$arity = 1);
        
        Opal.defn(self, '$define_state', TMP_Mixin_define_state_32 = function $$define_state($a_rest) {
          var self = this, args, $iter = TMP_Mixin_define_state_32.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Mixin_define_state_32.$$p = null;
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$initialize_states(self, $send(self.$class(), 'define_state', Opal.to_a(args), block.$to_proc()))
        }, TMP_Mixin_define_state_32.$$arity = -1);
      })($nesting[0], $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Component_included_33, TMP_Component_deprecation_warning_34;

      
      Opal.defs(self, '$included', TMP_Component_included_33 = function $$included(base) {
        var self = this;

        
        self.$deprecation_warning(base, "The module name React::Component has been deprecated.  Use Hyperloop::Component::Mixin instead.");
        return base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'), 'Mixin'));
      }, TMP_Component_included_33.$$arity = 1);
      Opal.defs(self, '$deprecation_warning', TMP_Component_deprecation_warning_34 = function $$deprecation_warning(name, message) {
        var $a, self = this;
        if (self.deprecation_messages == null) self.deprecation_messages = nil;

        
        self.deprecation_messages = ($truthy($a = self.deprecation_messages) ? $a : []);
        message = "" + "Warning: Deprecated feature used in " + (name) + ". " + (message);
        if ($truthy(self.deprecation_messages['$include?'](message))) {
          return nil
          } else {
          
          self.deprecation_messages['$<<'](message);
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'IsomorphicHelpers').$log(message, "warning");
        };
      }, TMP_Component_deprecation_warning_34.$$arity = 2);
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var $ComponentNoNotice, self = $ComponentNoNotice = $module($base, 'ComponentNoNotice');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ComponentNoNotice_included_35;

      Opal.defs(self, '$included', TMP_ComponentNoNotice_included_35 = function $$included(base) {
        var self = this;

        return base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'), 'Mixin'))
      }, TMP_ComponentNoNotice_included_35.$$arity = 1)
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/children"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$each', '$to_proc', '$lambda', '$render', '$to_enum', '$length', '$>', '$new', '$call', '$<<', '$alias_method']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Children(){};
      var self = $Children = $klass($base, $super, 'Children', $Children);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Children_initialize_1, TMP_Children_render_2, TMP_Children_to_proc_4, TMP_Children_each_5, TMP_Children_length_7;

      def.children = def.length = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
      
      Opal.defn(self, '$initialize', TMP_Children_initialize_1 = function $$initialize(children) {
        var self = this;

        return (self.children = children)
      }, TMP_Children_initialize_1.$$arity = 1);
      
      Opal.defn(self, '$render', TMP_Children_render_2 = function $$render() {
        var self = this;

        return $send(self, 'each', [], "render".$to_proc())
      }, TMP_Children_render_2.$$arity = 0);
      
      Opal.defn(self, '$to_proc', TMP_Children_to_proc_4 = function $$to_proc() {
        var TMP_3, self = this;

        return $send(self, 'lambda', [], (TMP_3 = function(){var self = TMP_3.$$s || this;

        return self.$render()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))
      }, TMP_Children_to_proc_4.$$arity = 0);
      
      Opal.defn(self, '$each', TMP_Children_each_5 = function $$each() {
        var TMP_6, self = this, $iter = TMP_Children_each_5.$$p, block = $iter || nil, collection = nil, element = nil;

        if ($iter) TMP_Children_each_5.$$p = null;
        
        if ((block !== nil)) {
          } else {
          return $send(self, 'to_enum', ["each"], (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$length()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
        };
        if ($truthy($rb_gt(self.$length(), 0))) {
          } else {
          return []
        };
        collection = [];
        
        React.Children.forEach(self.children, function(context){
          ((element = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Element').$new(context)), block.$call(element), collection['$<<'](element))
        })
      ;
        return collection;
      }, TMP_Children_each_5.$$arity = 0);
      
      Opal.defn(self, '$length', TMP_Children_length_7 = function $$length() {
        var $a, self = this;

        return (self.length = ($truthy($a = self.length) ? $a : React.Children.count(self.children)))
      }, TMP_Children_length_7.$$arity = 0);
      return self.$alias_method("size", "length");
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/component/dsl_instance_methods"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$new', '$props_wrapper', '$class']);
  
  self.$require("react/children");
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $DslInstanceMethods, self = $DslInstanceMethods = $module($base, 'DslInstanceMethods');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DslInstanceMethods_children_1, TMP_DslInstanceMethods_params_2, TMP_DslInstanceMethods_props_3, TMP_DslInstanceMethods_refs_4;

        
        
        Opal.defn(self, '$children', TMP_DslInstanceMethods_children_1 = function $$children() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return Opal.const_get_relative($nesting, 'Children').$new(self["native"].props.children)
        }, TMP_DslInstanceMethods_children_1.$$arity = 0);
        
        Opal.defn(self, '$params', TMP_DslInstanceMethods_params_2 = function $$params() {
          var $a, self = this;
          if (self.params == null) self.params = nil;

          return (self.params = ($truthy($a = self.params) ? $a : self.$class().$props_wrapper().$new(self)))
        }, TMP_DslInstanceMethods_params_2.$$arity = 0);
        
        Opal.defn(self, '$props', TMP_DslInstanceMethods_props_3 = function $$props() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return Opal.const_get_relative($nesting, 'Hash').$new(self["native"].props)
        }, TMP_DslInstanceMethods_props_3.$$arity = 0);
        
        Opal.defn(self, '$refs', TMP_DslInstanceMethods_refs_4 = function $$refs() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return Opal.const_get_relative($nesting, 'Hash').$new(self["native"].refs)
        }, TMP_DslInstanceMethods_refs_4.$$arity = 0);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/component/should_component_update"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$set_state_context_to', '$respond_to?', '$!', '$call_needs_update', '$props_changed?', '$native_state_changed?', '$define_singleton_method', '$needs_update?', '$new', '$!=']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $ShouldComponentUpdate, self = $ShouldComponentUpdate = $module($base, 'ShouldComponentUpdate');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ShouldComponentUpdate_should_component_update$q_2, TMP_ShouldComponentUpdate_call_needs_update_5, TMP_ShouldComponentUpdate_native_state_changed$q_6, TMP_ShouldComponentUpdate_props_changed$q_7;

        
        
        Opal.defn(self, '$should_component_update?', TMP_ShouldComponentUpdate_should_component_update$q_2 = function(next_props, next_state) {
          var TMP_1, self = this;

          return $send(Opal.const_get_relative($nesting, 'State'), 'set_state_context_to', [self, false], (TMP_1 = function(){var self = TMP_1.$$s || this, $a;

          if ($truthy(self['$respond_to?']("needs_update?"))) {
              return self.$call_needs_update(next_props, next_state)['$!']()['$!']()
              } else {
              
              return ($truthy($a = self['$props_changed?'](next_props)) ? $a : self['$native_state_changed?'](next_state));
            }}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1))
        }, TMP_ShouldComponentUpdate_should_component_update$q_2.$$arity = 2);
        
        Opal.defn(self, '$call_needs_update', TMP_ShouldComponentUpdate_call_needs_update_5 = function $$call_needs_update(next_params, next_state) {
          var TMP_3, TMP_4, self = this, component = nil;

          
          component = self;
          $send(next_params, 'define_singleton_method', ["changed?"], (TMP_3 = function(){var self = TMP_3.$$s || this;

          return component['$props_changed?'](self)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3));
          $send(next_state, 'define_singleton_method', ["changed?"], (TMP_4 = function(){var self = TMP_4.$$s || this;

          return component['$native_state_changed?'](next_state)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
          return self['$needs_update?'](next_params, next_state);
        }, TMP_ShouldComponentUpdate_call_needs_update_5.$$arity = 2);
        
        Opal.defn(self, '$native_state_changed?', TMP_ShouldComponentUpdate_native_state_changed$q_6 = function(next_state_hash) {
          var self = this, state_hash = nil;
          if (self["native"] == null) self["native"] = nil;

          
          state_hash = Opal.const_get_relative($nesting, 'Hash').$new(self["native"].state);
          return next_state_hash['$!='](state_hash);
        }, TMP_ShouldComponentUpdate_native_state_changed$q_6.$$arity = 1);
        
        Opal.defn(self, '$props_changed?', TMP_ShouldComponentUpdate_props_changed$q_7 = function(next_props) {
          var self = this, props = nil;
          if (self["native"] == null) self["native"] = nil;

          
          props = Opal.const_get_relative($nesting, 'Hash').$new(self["native"].props);
          return next_props['$!='](props);
        }, TMP_ShouldComponentUpdate_props_changed$q_7.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/component/tags"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$+', '$render', '$to_proc', '$each', '$define_method', '$upcase', '$const_set', '$==', '$count', '$is_a?', '$first', '$p', '$alias_method', '$downcase', '$=~', '$include?', '$create_element', '$find_component', '$method_missing', '$find_name_and_parent', '$new', '$build_only', '$extend', '$private', '$name', '$split', '$>', '$length', '$last', '$[]', '$inject', '$const_get', '$lookup_const', '$!', '$method_defined?', '$raise', '$reverse', '$to_s', '$class', '$detect', '$const_defined?']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Tags, self = $Tags = $module($base, 'Tags');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Tags_present_1, TMP_Tags_2, TMP_Tags_html_tag_class_for_5, TMP_Tags_method_missing_6, TMP_Tags_find_component_13, TMP_Tags_lookup_const_16;

        
        Opal.const_set($nesting[0], 'HTML_TAGS', $rb_plus(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"], ["circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]));
        
        Opal.defn(self, '$present', TMP_Tags_present_1 = function $$present(component, $a_rest) {
          var self = this, params, $iter = TMP_Tags_present_1.$$p, children = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          params = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            params[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_Tags_present_1.$$p = null;
          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc())
        }, TMP_Tags_present_1.$$arity = -2);
        $send(Opal.const_get_relative($nesting, 'HTML_TAGS'), 'each', [], (TMP_Tags_2 = function(tag){var self = TMP_Tags_2.$$s || this, TMP_3, TMP_4;
if (tag == null) tag = nil;
        
          $send(self, 'define_method', [tag.$upcase()], (TMP_3 = function($a_rest){var self = TMP_3.$$s || this, children, params;

            children = TMP_3.$$p || nil;
            if (children) TMP_3.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', [tag].concat(Opal.to_a(params)), children.$to_proc())}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3));
          self.$const_set(tag.$upcase(), tag);
          if (tag['$==']("p")) {
            return $send(self, 'define_method', [tag], (TMP_4 = function($a_rest){var self = TMP_4.$$s || this, children, params, $b, $c;

              children = TMP_4.$$p || nil;
              if (children) TMP_4.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              params = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                params[$arg_idx - 0] = arguments[$arg_idx];
              }
            if ($truthy(($truthy($b = ($truthy($c = children) ? $c : params.$count()['$=='](0))) ? $b : (($c = params.$count()['$=='](1)) ? params.$first()['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : params.$count()['$=='](1))))) {
                return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', [tag].concat(Opal.to_a(params)), children.$to_proc())
                } else {
                return $send(Opal.const_get_relative($nesting, 'Kernel'), 'p', Opal.to_a(params))
              }}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4))
            } else {
            return self.$alias_method(tag, tag.$upcase())
          };}, TMP_Tags_2.$$s = self, TMP_Tags_2.$$arity = 1, TMP_Tags_2));
        Opal.defs(self, '$html_tag_class_for', TMP_Tags_html_tag_class_for_5 = function $$html_tag_class_for(tag) {
          var $a, self = this, downcased_tag = nil;

          
          downcased_tag = tag.$downcase();
          if ($truthy(($truthy($a = tag['$=~'](/[A-Z]+/)) ? Opal.const_get_relative($nesting, 'HTML_TAGS')['$include?'](downcased_tag) : $a))) {
            return Opal.const_get_relative($nesting, 'Object').$const_set(tag, Opal.const_get_relative($nesting, 'React').$create_element(downcased_tag))
            } else {
            return nil
          };
        }, TMP_Tags_html_tag_class_for_5.$$arity = 1);
        
        Opal.defn(self, '$method_missing', TMP_Tags_method_missing_6 = function $$method_missing(name, $a_rest) {
          var self = this, params, $iter = TMP_Tags_method_missing_6.$$p, children = $iter || nil, component = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          params = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            params[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_Tags_method_missing_6.$$p = null;
          
          component = self.$find_component(name);
          if ($truthy(component)) {
            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc())};
          return $send(Opal.const_get_relative($nesting, 'Object'), 'method_missing', [name].concat(Opal.to_a(params)), children.$to_proc());
        }, TMP_Tags_method_missing_6.$$arity = -2);
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_included_10, TMP_find_name_and_parent_12;

          
          
          Opal.defn(self, '$included', TMP_included_10 = function $$included(component) {
            var $a, $b, TMP_7, self = this, name = nil, parent = nil, tag_names_module = nil;

            
            $b = self.$find_name_and_parent(component), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (parent = ($a[1] == null ? nil : $a[1])), $b;
            tag_names_module = $send(Opal.const_get_relative($nesting, 'Module'), 'new', [], (TMP_7 = function(){var self = TMP_7.$$s || this, TMP_8, TMP_9;

            
              $send(self, 'define_method', [name], (TMP_8 = function($c_rest){var self = TMP_8.$$s || this, children, params;

                children = TMP_8.$$p || nil;
                if (children) TMP_8.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                params = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  params[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc())}, TMP_8.$$s = self, TMP_8.$$arity = -1, TMP_8));
              return $send(self, 'define_method', ["" + (name) + "_as_node"], (TMP_9 = function($c_rest){var self = TMP_9.$$s || this, children, params;

                children = TMP_9.$$p || nil;
                if (children) TMP_9.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                params = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  params[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'build_only', [component].concat(Opal.to_a(params)), children.$to_proc())}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9));}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7));
            return parent.$extend(tag_names_module);
          }, TMP_included_10.$$arity = 1);
          self.$private();
          return (Opal.defn(self, '$find_name_and_parent', TMP_find_name_and_parent_12 = function $$find_name_and_parent(component) {
            var $a, TMP_11, self = this, split_name = nil;

            
            split_name = ($truthy($a = component.$name()) ? component.$name().$split("::") : $a);
            if ($truthy(($truthy($a = split_name) ? $rb_gt(split_name.$length(), 1) : $a))) {
              return [split_name.$last(), $send(split_name, 'inject', [[Opal.const_get_relative($nesting, 'Module')]], (TMP_11 = function(a, e){var self = TMP_11.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
              return $rb_plus(a, [a.$last().$const_get(e)])}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11))['$[]'](-2)]
              } else {
              return nil
            };
          }, TMP_find_name_and_parent_12.$$arity = 1), nil) && 'find_name_and_parent';
        })(Opal.get_singleton_class(self), $nesting);
        self.$private();
        
        Opal.defn(self, '$find_component', TMP_Tags_find_component_13 = function $$find_component(name) {
          var $a, self = this, component = nil;

          
          component = self.$lookup_const(name);
          if ($truthy(($truthy($a = component) ? component['$method_defined?']("render")['$!']() : $a))) {
            self.$raise("" + (name) + " does not appear to be a react component.")};
          return component;
        }, TMP_Tags_find_component_13.$$arity = 1);
        
        Opal.defn(self, '$lookup_const', TMP_Tags_lookup_const_16 = function $$lookup_const(name) {
          var TMP_14, TMP_15, self = this, scopes = nil, scope = nil;

          
          if ($truthy(name['$=~'](/^[A-Z]/))) {
            } else {
            return nil
          };
          scopes = $send(self.$class().$name().$to_s().$split("::"), 'inject', [[Opal.const_get_relative($nesting, 'Module')]], (TMP_14 = function(nesting, next_const){var self = TMP_14.$$s || this;
if (nesting == null) nesting = nil;if (next_const == null) next_const = nil;
          return $rb_plus(nesting, [nesting.$last().$const_get(next_const)])}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14)).$reverse();
          scope = $send(scopes, 'detect', [], (TMP_15 = function(s){var self = TMP_15.$$s || this;
if (s == null) s = nil;
          return s['$const_defined?'](name)}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15));
          if ($truthy(scope)) {
            return scope.$const_get(name)
            } else {
            return nil
          };
        }, TMP_Tags_lookup_const_16.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/component/base"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$to_s', '$deprecation_warning', '$include']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Base(){};
        var self = $Base = $klass($base, $super, 'Base', $Base);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Base_inherited_1;

        return Opal.defs(self, '$inherited', TMP_Base_inherited_1 = function $$inherited(child) {
          var self = this;

          
          if (child.$to_s()['$==']("React::Component::HyperTestDummy")) {
            } else {
            Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component').$deprecation_warning(child, "The class name React::Component::Base has been deprecated.  Use Hyperloop::Component instead.")
          };
          return child.$include(Opal.const_get_relative($nesting, 'ComponentNoNotice'));
        }, TMP_Base_inherited_1.$$arity = 1)
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Event_initialize_1;

      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      self.$alias_native("bubbles", "bubbles");
      self.$alias_native("cancelable", "cancelable");
      self.$alias_native("current_target", "currentTarget");
      self.$alias_native("default_prevented", "defaultPrevented");
      self.$alias_native("event_phase", "eventPhase");
      self.$alias_native("is_trusted?", "isTrusted");
      self.$alias_native("native_event", "nativeEvent");
      self.$alias_native("target", "target");
      self.$alias_native("timestamp", "timeStamp");
      self.$alias_native("event_type", "type");
      self.$alias_native("prevent_default", "preventDefault");
      self.$alias_native("stop_propagation", "stopPropagation");
      self.$alias_native("clipboard_data", "clipboardData");
      self.$alias_native("alt_key", "altKey");
      self.$alias_native("char_code", "charCode");
      self.$alias_native("ctrl_key", "ctrlKey");
      self.$alias_native("get_modifier_state", "getModifierState");
      self.$alias_native("key", "key");
      self.$alias_native("key_code", "keyCode");
      self.$alias_native("locale", "locale");
      self.$alias_native("location", "location");
      self.$alias_native("meta_key", "metaKey");
      self.$alias_native("repeat", "repeat");
      self.$alias_native("shift_key", "shiftKey");
      self.$alias_native("which", "which");
      self.$alias_native("related_target", "relatedTarget");
      self.$alias_native("button", "button");
      self.$alias_native("buttons", "buttons");
      self.$alias_native("client_x", "clientX");
      self.$alias_native("client_y", "clientY");
      self.$alias_native("get_modifier_state", "getModifierState");
      self.$alias_native("page_x", "pageX");
      self.$alias_native("page_y", "pageY");
      self.$alias_native("screen_x", "screen_x");
      self.$alias_native("screen_y", "screen_y");
      self.$alias_native("changed_touches", "changedTouches");
      self.$alias_native("target_touches", "targetTouches");
      self.$alias_native("touches", "touches");
      self.$alias_native("detail", "detail");
      self.$alias_native("view", "view");
      self.$alias_native("delta_mode", "deltaMode");
      self.$alias_native("delta_x", "deltaX");
      self.$alias_native("delta_y", "deltaY");
      self.$alias_native("delta_z", "deltaZ");
      Opal.const_set($nesting[0], 'BUILT_IN_EVENTS', ["onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onClick", "onContextMenu", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onSelect", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll", "onWheel"]);
      return (Opal.defn(self, '$initialize', TMP_Event_initialize_1 = function $$initialize(native_event) {
        var self = this;

        return (self["native"] = native_event)
      }, TMP_Event_initialize_1.$$arity = 1), nil) && 'initialize';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/object"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$_reactrb_tag_original_const_missing', '$html_tag_class_for', '$raise']);
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_const_missing_1;

      
      Opal.alias(self, "_reactrb_tag_original_const_missing", "const_missing");
      return (Opal.defn(self, '$const_missing', TMP_const_missing_1 = function $$const_missing(const_name) {
        var $a, self = this, e = nil;

        try {
          return self.$_reactrb_tag_original_const_missing(const_name)
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {e = $err;
            try {
              return ($truthy($a = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component'), 'Tags').$html_tag_class_for(const_name)) ? $a : self.$raise(e))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_const_missing_1.$$arity = 1), nil) && 'const_missing';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/to_key"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$object_id']);
  
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_to_key_1;

    return (Opal.defn(self, '$to_key', TMP_Object_to_key_1 = function $$to_key() {
      var self = this;

      return self.$object_id()
    }, TMP_Object_to_key_1.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Number(){};
    var self = $Number = $klass($base, $super, 'Number', $Number);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Number_to_key_2;

    return (Opal.defn(self, '$to_key', TMP_Number_to_key_2 = function $$to_key() {
      var self = this;

      return self
    }, TMP_Number_to_key_2.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_key_3;

    return (Opal.defn(self, '$to_key', TMP_Boolean_to_key_3 = function $$to_key() {
      var self = this;

      return self
    }, TMP_Boolean_to_key_3.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/ext/opal-jquery/element"] = function(Opal) {
  var TMP_1, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$const_defined?', '$instance_eval', '$dom_node', '$find', '$define_method', '$to_n', '$new', '$class_eval', '$render', '$to_proc', '$create_element', '$expose']);
  if ($truthy(Opal.const_get_relative($nesting, 'Object')['$const_defined?']("Element"))) {
    return $send(Opal.const_get_relative($nesting, 'Element'), 'instance_eval', [], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_find_2, TMP_$$_3, TMP_4;

    
      Opal.defs(self, '$find', TMP_find_2 = function $$find(selector) {
        var self = this;

        
        if ($truthy(selector.$dom_node !== undefined)) {
          selector = (function() { try {
            return selector.$dom_node()
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
              try {
                return selector
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})()};
        return $(selector);
      }, TMP_find_2.$$arity = 1);
      Opal.defs(self, '$[]', TMP_$$_3 = function(selector) {
        var self = this;

        return self.$find(selector)
      }, TMP_$$_3.$$arity = 1);
      $send(self, 'define_method', ["render"], (TMP_4 = function(container, params){var self = TMP_4.$$s || this, block, TMP_5, klass = nil;

        block = TMP_4.$$p || nil;
        if (block) TMP_4.$$p = null;
        if (container == null) {
          container = nil;
        }
        if (params == null) {
          params = $hash2([], {});
        }
      
        if ($truthy(self.$to_n()._reactrb_component_class === undefined)) {
          self.$to_n()._reactrb_component_class = Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'))};
        klass = self.$to_n()._reactrb_component_class;
        $send(klass, 'class_eval', [], (TMP_5 = function(){var self = TMP_5.$$s || this;

        return $send(self, 'render', [container, params], block.$to_proc())}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
        return Opal.const_get_relative($nesting, 'React').$render(Opal.const_get_relative($nesting, 'React').$create_element(self.$to_n()._reactrb_component_class), self);}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4));
      
    $.fn.mount_components = function() {
      this.each(function(e) { ReactRailsUJS.mountComponents(e[0]) })
      return this;
    }
  ;
      return Opal.const_get_relative($nesting, 'Element').$expose("mount_components");}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1))
    } else {
    return nil
  }
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/config"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy;

  Opal.add_stubs(['$!=']);
  if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
    return nil
    } else {
    return nil
  }
};

/* Generated by Opal 0.11.3 */
Opal.modules["json"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$raise', '$new', '$push', '$[]=', '$-', '$[]', '$create_id', '$json_create', '$const_get', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  
  (function($base, $parent_nesting) {
    var $JSON, self = $JSON = $module($base, 'JSON');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_JSON_$$_1, TMP_JSON_parse_2, TMP_JSON_parse$B_3, TMP_JSON_load_4, TMP_JSON_from_object_5, TMP_JSON_generate_6, TMP_JSON_dump_7, $writer = nil;

    
    (function($base, $super, $parent_nesting) {
      function $JSONError(){};
      var self = $JSONError = $klass($base, $super, 'JSONError', $JSONError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ParserError(){};
      var self = $ParserError = $klass($base, $super, 'ParserError', $ParserError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'JSONError'), $nesting);
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (($writer = [k, to_opal(value[k], options)]), $send((hash), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]'](Opal.const_get_relative($nesting, 'JSON').$create_id())) != nil) {
              return Opal.const_get_qualified('::', 'Object').$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = ["json_class"];
    $send(self, 'create_id=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.defs(self, '$[]', TMP_JSON_$$_1 = function(value, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](value))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      }
    }, TMP_JSON_$$_1.$$arity = -2);
    Opal.defs(self, '$parse', TMP_JSON_parse_2 = function $$parse(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})))
    }, TMP_JSON_parse_2.$$arity = -2);
    Opal.defs(self, '$parse!', TMP_JSON_parse$B_3 = function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$parse(source, options)
    }, TMP_JSON_parse$B_3.$$arity = -2);
    Opal.defs(self, '$load', TMP_JSON_load_4 = function $$load(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options)
    }, TMP_JSON_load_4.$$arity = -2);
    Opal.defs(self, '$from_object', TMP_JSON_from_object_5 = function $$from_object(js_object, options) {
      var $a, self = this, $writer = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      
      ($truthy($a = options['$[]']("object_class")) ? $a : (($writer = ["object_class", Opal.const_get_relative($nesting, 'Hash')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      ($truthy($a = options['$[]']("array_class")) ? $a : (($writer = ["array_class", Opal.const_get_relative($nesting, 'Array')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      return to_opal(js_object, options.$$smap);
    }, TMP_JSON_from_object_5.$$arity = -2);
    Opal.defs(self, '$generate', TMP_JSON_generate_6 = function $$generate(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return obj.$to_json(options)
    }, TMP_JSON_generate_6.$$arity = -2);
    Opal.defs(self, '$dump', TMP_JSON_dump_7 = function $$dump(obj, io, limit) {
      var self = this, string = nil;

      if (io == null) {
        io = nil;
      }
      if (limit == null) {
        limit = nil;
      }
      
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    }, TMP_JSON_dump_7.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_to_json_8;

    return (Opal.defn(self, '$to_json', TMP_Object_to_json_8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, TMP_Object_to_json_8.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_to_json_9;

    
    Opal.defn(self, '$to_json', TMP_Enumerable_to_json_9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, TMP_Enumerable_to_json_9.$$arity = 0)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_json_10;

    return (Opal.defn(self, '$to_json', TMP_Array_to_json_10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_Array_to_json_10.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_json_11;

    return (Opal.defn(self, '$to_json', TMP_Boolean_to_json_11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false'
    }, TMP_Boolean_to_json_11.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_to_json_12;

    return (Opal.defn(self, '$to_json', TMP_Hash_to_json_12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    
    }, TMP_Hash_to_json_12.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_json_13;

    return (Opal.defn(self, '$to_json', TMP_NilClass_to_json_13 = function $$to_json() {
      var self = this;

      return "null"
    }, TMP_NilClass_to_json_13.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_json_14;

    return (Opal.defn(self, '$to_json', TMP_Numeric_to_json_14 = function $$to_json() {
      var self = this;

      return self.toString()
    }, TMP_Numeric_to_json_14.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return Opal.alias(self, "to_json", "inspect")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_json_15;

    return (Opal.defn(self, '$to_json', TMP_Time_to_json_15 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, TMP_Time_to_json_15.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Date_to_json_16, TMP_Date_as_json_17;

    
    
    Opal.defn(self, '$to_json', TMP_Date_to_json_16 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, TMP_Date_to_json_16.$$arity = 0);
    return (Opal.defn(self, '$as_json', TMP_Date_as_json_17 = function $$as_json() {
      var self = this;

      return self.$to_s()
    }, TMP_Date_as_json_17.$$arity = 0), nil) && 'as_json';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["reactive-ruby/isomorphic_helpers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$!=', '$!', '$unique_id', '$on_opal_server?', '$log', '$new', '$is_a?', '$==', '$production?', '$env', '$+', '$[]', '$class', '$on_opal_client?', '$join', '$collect', '$prerender_footer_blocks', '$call', '$attr_reader', '$[]=', '$-', '$run', '$each', '$before_first_mount_blocks', '$send_to_opal', '$eval', '$length', '$load!', '$tr', '$<<', '$first', '$send_to_server', '$to_json', '$parse', '$controller', '$context', '$register_before_first_mount_block', '$to_proc', '$register_prerender_footer_block', '$send', '$result']);
  
  self.$require("react/config");
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $IsomorphicHelpers, self = $IsomorphicHelpers = $module($base, 'IsomorphicHelpers');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IsomorphicHelpers_included_1, TMP_IsomorphicHelpers_load_context_2, TMP_IsomorphicHelpers_context_3, TMP_IsomorphicHelpers_log_4, TMP_IsomorphicHelpers_on_opal_server$q_5, TMP_IsomorphicHelpers_on_opal_client$q_6, TMP_IsomorphicHelpers_log_7, TMP_IsomorphicHelpers_on_opal_server$q_8, TMP_IsomorphicHelpers_on_opal_client$q_9, TMP_IsomorphicHelpers_prerender_footers_11;

      
      Opal.defs(self, '$included', TMP_IsomorphicHelpers_included_1 = function $$included(base) {
        var self = this;

        return base.$extend(Opal.const_get_relative($nesting, 'ClassMethods'))
      }, TMP_IsomorphicHelpers_included_1.$$arity = 1);
      if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
        nil
        } else {
        Opal.defs(self, '$load_context', TMP_IsomorphicHelpers_load_context_2 = function $$load_context(unique_id, name) {
          var $a, $b, self = this, message = nil;
          if (self.context == null) self.context = nil;

          if (unique_id == null) {
            unique_id = nil;
          }
          if (name == null) {
            name = nil;
          }
          
          if ($truthy(($truthy($a = ($truthy($b = unique_id['$!']()) ? $b : self.context['$!']())) ? $a : self.context.$unique_id()['$!='](unique_id)))) {
            
            if ($truthy(self['$on_opal_server?']())) {
              
              try {
                console.history = []
              } catch ($err) {
                if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                  try {
                    nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };
              message = "" + "************************ React Prerendering Context Initialized " + (name) + " ***********************";
              } else {
              message = "************************ React Browser Context Initialized ****************************"
            };
            self.$log(message);
            self.context = Opal.const_get_relative($nesting, 'Context').$new(unique_id);};
          return self.context;
        }, TMP_IsomorphicHelpers_load_context_2.$$arity = -1)
      };
      Opal.defs(self, '$context', TMP_IsomorphicHelpers_context_3 = function $$context() {
        var self = this;
        if (self.context == null) self.context = nil;

        return self.context
      }, TMP_IsomorphicHelpers_context_3.$$arity = 0);
      Opal.defs(self, '$log', TMP_IsomorphicHelpers_log_4 = function $$log(message, message_type) {
        var $a, $b, self = this, style = nil;

        if (message_type == null) {
          message_type = "info";
        }
        
        if ($truthy(message['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
          } else {
          message = [message]
        };
        if ($truthy(($truthy($a = ($truthy($b = message_type['$==']("info")) ? $b : message_type['$==']("warning"))) ? Opal.const_get_relative($nesting, 'Hyperloop').$env()['$production?']() : $a))) {
          return nil};
        if (message_type['$==']("info")) {
          
          if ($truthy(self['$on_opal_server?']())) {
            style = "background: #00FFFF; color: red"
            } else {
            style = "background: #222; color: #bada55"
          };
          message = $rb_plus([$rb_plus("%c", message['$[]'](0)), style], message['$[]']($range(1, -1, false)));
          return console.log.apply(console, message);
        } else if (message_type['$==']("warning")) {
          return console.warn.apply(console, message)
          } else {
          return console.error.apply(console, message)
        };
      }, TMP_IsomorphicHelpers_log_4.$$arity = -2);
      if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
        nil
        } else {
        
        Opal.defs(self, '$on_opal_server?', TMP_IsomorphicHelpers_on_opal_server$q_5 = function() {
          var self = this;

          return typeof Opal.global.document === 'undefined'
        }, TMP_IsomorphicHelpers_on_opal_server$q_5.$$arity = 0);
        Opal.defs(self, '$on_opal_client?', TMP_IsomorphicHelpers_on_opal_client$q_6 = function() {
          var self = this;

          return self['$on_opal_server?']()['$!']()
        }, TMP_IsomorphicHelpers_on_opal_client$q_6.$$arity = 0);
      };
      
      Opal.defn(self, '$log', TMP_IsomorphicHelpers_log_7 = function $$log($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'log', Opal.to_a(args))
      }, TMP_IsomorphicHelpers_log_7.$$arity = -1);
      
      Opal.defn(self, '$on_opal_server?', TMP_IsomorphicHelpers_on_opal_server$q_8 = function() {
        var self = this;

        return self.$class()['$on_opal_server?']()
      }, TMP_IsomorphicHelpers_on_opal_server$q_8.$$arity = 0);
      
      Opal.defn(self, '$on_opal_client?', TMP_IsomorphicHelpers_on_opal_client$q_9 = function() {
        var self = this;

        return self.$class()['$on_opal_client?']()
      }, TMP_IsomorphicHelpers_on_opal_client$q_9.$$arity = 0);
      Opal.defs(self, '$prerender_footers', TMP_IsomorphicHelpers_prerender_footers_11 = function $$prerender_footers(controller) {
        var TMP_10, self = this, footer = nil;

        if (controller == null) {
          controller = nil;
        }
        
        footer = $send(Opal.const_get_relative($nesting, 'Context').$prerender_footer_blocks(), 'collect', [], (TMP_10 = function(block){var self = TMP_10.$$s || this;
if (block == null) block = nil;
        return block.$call(controller)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10)).$join("\n");
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil};
        return footer;
      }, TMP_IsomorphicHelpers_prerender_footers_11.$$arity = -1);
      (function($base, $super, $parent_nesting) {
        function $Context(){};
        var self = $Context = $klass($base, $super, 'Context', $Context);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Context_define_isomorphic_method_12, TMP_Context_before_first_mount_blocks_13, TMP_Context_prerender_footer_blocks_14, TMP_Context_initialize_16, TMP_Context_load_opal_context_17, TMP_Context_eval_18, TMP_Context_send_to_opal_20, TMP_Context_register_before_first_mount_block_21, TMP_Context_register_prerender_footer_block_22;

        def.unique_id = def.cname = def.ctx = nil;
        
        self.$attr_reader("controller");
        self.$attr_reader("unique_id");
        Opal.defs(self, '$define_isomorphic_method', TMP_Context_define_isomorphic_method_12 = function $$define_isomorphic_method(method_name) {
          var $a, $b, self = this, $iter = TMP_Context_define_isomorphic_method_12.$$p, block = $iter || nil, $writer = nil;

          if ($iter) TMP_Context_define_isomorphic_method_12.$$p = null;
          
          (Opal.class_variable_set($Context, '@@ctx_methods', ($truthy($a = (($b = $Context.$$cvars['@@ctx_methods']) == null ? nil : $b)) ? $a : $hash2([], {}))));
          
          $writer = [method_name, block];
          $send((($a = $Context.$$cvars['@@ctx_methods']) == null ? nil : $a), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, TMP_Context_define_isomorphic_method_12.$$arity = 1);
        Opal.defs(self, '$before_first_mount_blocks', TMP_Context_before_first_mount_blocks_13 = function $$before_first_mount_blocks() {
          var $a, self = this;
          if (self.before_first_mount_blocks == null) self.before_first_mount_blocks = nil;

          return (self.before_first_mount_blocks = ($truthy($a = self.before_first_mount_blocks) ? $a : []))
        }, TMP_Context_before_first_mount_blocks_13.$$arity = 0);
        Opal.defs(self, '$prerender_footer_blocks', TMP_Context_prerender_footer_blocks_14 = function $$prerender_footer_blocks() {
          var $a, self = this;
          if (self.prerender_footer_blocks == null) self.prerender_footer_blocks = nil;

          return (self.prerender_footer_blocks = ($truthy($a = self.prerender_footer_blocks) ? $a : []))
        }, TMP_Context_prerender_footer_blocks_14.$$arity = 0);
        
        Opal.defn(self, '$initialize', TMP_Context_initialize_16 = function $$initialize(unique_id, ctx, controller, cname) {
          var TMP_15, self = this;

          if (ctx == null) {
            ctx = nil;
          }
          if (controller == null) {
            controller = nil;
          }
          if (cname == null) {
            cname = nil;
          }
          
          self.unique_id = unique_id;
          self.cname = cname;
          if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
            nil};
          Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Application'), 'Boot').$run($hash2(["context"], {"context": self}));
          return $send(self.$class().$before_first_mount_blocks(), 'each', [], (TMP_15 = function(block){var self = TMP_15.$$s || this;
if (block == null) block = nil;
          return block.$call(self)}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15));
        }, TMP_Context_initialize_16.$$arity = -2);
        
        Opal.defn(self, '$load_opal_context', TMP_Context_load_opal_context_17 = function $$load_opal_context() {
          var self = this;

          return self.$send_to_opal("load_context", self.unique_id, self.cname)
        }, TMP_Context_load_opal_context_17.$$arity = 0);
        
        Opal.defn(self, '$eval', TMP_Context_eval_18 = function(js) {
          var self = this;

          if ($truthy(self.ctx)) {
            return self.ctx.$eval(js)
            } else {
            return nil
          }
        }, TMP_Context_eval_18.$$arity = 1);
        
        Opal.defn(self, '$send_to_opal', TMP_Context_send_to_opal_20 = function $$send_to_opal(method_name, $a_rest) {
          var TMP_19, self = this, args, method_args = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          
          if ($truthy(self.ctx)) {
            } else {
            return nil
          };
          if (args.$length()['$=='](0)) {
            args = [1]};
          Opal.const_get_qualified(Opal.const_get_qualified('::', 'ReactiveRuby'), 'ComponentLoader').$new(self.ctx)['$load!']();
          method_args = $send(args, 'collect', [], (TMP_19 = function(arg){var self = TMP_19.$$s || this, quarg = nil;
if (arg == null) arg = nil;
          
            quarg = ("" + (arg)).$tr("\"", "'");
            return "" + "\"" + (quarg) + "\"";}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19)).$join(", ");
          return self.ctx.$eval("" + "Opal.React.$const_get('IsomorphicHelpers').$" + (method_name) + "(" + (method_args) + ")");
        }, TMP_Context_send_to_opal_20.$$arity = -2);
        Opal.defs(self, '$register_before_first_mount_block', TMP_Context_register_before_first_mount_block_21 = function $$register_before_first_mount_block() {
          var self = this, $iter = TMP_Context_register_before_first_mount_block_21.$$p, block = $iter || nil;

          if ($iter) TMP_Context_register_before_first_mount_block_21.$$p = null;
          return self.$before_first_mount_blocks()['$<<'](block)
        }, TMP_Context_register_before_first_mount_block_21.$$arity = 0);
        return Opal.defs(self, '$register_prerender_footer_block', TMP_Context_register_prerender_footer_block_22 = function $$register_prerender_footer_block() {
          var self = this, $iter = TMP_Context_register_prerender_footer_block_22.$$p, block = $iter || nil;

          if ($iter) TMP_Context_register_prerender_footer_block_22.$$p = null;
          return self.$prerender_footer_blocks()['$<<'](block)
        }, TMP_Context_register_prerender_footer_block_22.$$arity = 0);
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        function $IsomorphicProcCall(){};
        var self = $IsomorphicProcCall = $klass($base, $super, 'IsomorphicProcCall', $IsomorphicProcCall);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IsomorphicProcCall_result_23, TMP_IsomorphicProcCall_initialize_24, TMP_IsomorphicProcCall_when_on_client_25, TMP_IsomorphicProcCall_send_to_server_26, TMP_IsomorphicProcCall_when_on_server_27;

        def.result = def.name = nil;
        
        self.$attr_reader("context");
        
        Opal.defn(self, '$result', TMP_IsomorphicProcCall_result_23 = function $$result() {
          var self = this;

          if ($truthy(self.result)) {
            return self.result.$first()
            } else {
            return nil
          }
        }, TMP_IsomorphicProcCall_result_23.$$arity = 0);
        
        Opal.defn(self, '$initialize', TMP_IsomorphicProcCall_initialize_24 = function $$initialize(name, block, context, $a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 3;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 3] = arguments[$arg_idx];
          }
          
          self.name = name;
          self.context = context;
          $send(block, 'call', [self].concat(Opal.to_a(args)));
          return (self.result = ($truthy($b = self.result) ? $b : $send(self, 'send_to_server', Opal.to_a(args))));
        }, TMP_IsomorphicProcCall_initialize_24.$$arity = -4);
        
        Opal.defn(self, '$when_on_client', TMP_IsomorphicProcCall_when_on_client_25 = function $$when_on_client() {
          var self = this, $iter = TMP_IsomorphicProcCall_when_on_client_25.$$p, block = $iter || nil;

          if ($iter) TMP_IsomorphicProcCall_when_on_client_25.$$p = null;
          if ($truthy(Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']())) {
            return (self.result = [block.$call()])
            } else {
            return nil
          }
        }, TMP_IsomorphicProcCall_when_on_client_25.$$arity = 0);
        
        Opal.defn(self, '$send_to_server', TMP_IsomorphicProcCall_send_to_server_26 = function $$send_to_server($a_rest) {
          var self = this, args, method_string = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($truthy(Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_server?']())) {
            
            method_string = $rb_plus($rb_plus($rb_plus($rb_plus("ServerSideIsomorphicMethod.", self.name), "("), args.$to_json()), ")");
            return (self.result = [Opal.const_get_relative($nesting, 'JSON').$parse(eval(method_string))]);
            } else {
            return nil
          }
        }, TMP_IsomorphicProcCall_send_to_server_26.$$arity = -1);
        return (Opal.defn(self, '$when_on_server', TMP_IsomorphicProcCall_when_on_server_27 = function $$when_on_server() {
          var $a, self = this, $iter = TMP_IsomorphicProcCall_when_on_server_27.$$p, block = $iter || nil;

          if ($iter) TMP_IsomorphicProcCall_when_on_server_27.$$p = null;
          if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']()) ? $a : Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_server?']()))) {
            return nil
            } else {
            return (self.result = [block.$call().$to_json()])
          }
        }, TMP_IsomorphicProcCall_when_on_server_27.$$arity = 0), nil) && 'when_on_server';
      })($nesting[0], null, $nesting);
      (function($base, $parent_nesting) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_on_opal_server$q_28, TMP_ClassMethods_on_opal_client$q_29, TMP_ClassMethods_log_30, TMP_ClassMethods_controller_31, TMP_ClassMethods_before_first_mount_32, TMP_ClassMethods_prerender_footer_33, TMP_ClassMethods_isomorphic_method_34;

        
        
        Opal.defn(self, '$on_opal_server?', TMP_ClassMethods_on_opal_server$q_28 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_server?']()
        }, TMP_ClassMethods_on_opal_server$q_28.$$arity = 0);
        
        Opal.defn(self, '$on_opal_client?', TMP_ClassMethods_on_opal_client$q_29 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']()
        }, TMP_ClassMethods_on_opal_client$q_29.$$arity = 0);
        
        Opal.defn(self, '$log', TMP_ClassMethods_log_30 = function $$log($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'log', Opal.to_a(args))
        }, TMP_ClassMethods_log_30.$$arity = -1);
        
        Opal.defn(self, '$controller', TMP_ClassMethods_controller_31 = function $$controller() {
          var self = this;

          return Opal.const_get_relative($nesting, 'IsomorphicHelpers').$context().$controller()
        }, TMP_ClassMethods_controller_31.$$arity = 0);
        
        Opal.defn(self, '$before_first_mount', TMP_ClassMethods_before_first_mount_32 = function $$before_first_mount() {
          var self = this, $iter = TMP_ClassMethods_before_first_mount_32.$$p, block = $iter || nil;

          if ($iter) TMP_ClassMethods_before_first_mount_32.$$p = null;
          return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'IsomorphicHelpers'), 'Context'), 'register_before_first_mount_block', [], block.$to_proc())
        }, TMP_ClassMethods_before_first_mount_32.$$arity = 0);
        
        Opal.defn(self, '$prerender_footer', TMP_ClassMethods_prerender_footer_33 = function $$prerender_footer() {
          var self = this, $iter = TMP_ClassMethods_prerender_footer_33.$$p, block = $iter || nil;

          if ($iter) TMP_ClassMethods_prerender_footer_33.$$p = null;
          return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'IsomorphicHelpers'), 'Context'), 'register_prerender_footer_block', [], block.$to_proc())
        }, TMP_ClassMethods_prerender_footer_33.$$arity = 0);
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil
          } else {
          
          self.$require("json");
          
          Opal.defn(self, '$isomorphic_method', TMP_ClassMethods_isomorphic_method_34 = function $$isomorphic_method(name) {
            var TMP_35, self = this, $iter = TMP_ClassMethods_isomorphic_method_34.$$p, block = $iter || nil;

            if ($iter) TMP_ClassMethods_isomorphic_method_34.$$p = null;
            return $send(self.$class(), 'send', ["define_method", name], (TMP_35 = function($a_rest){var self = TMP_35.$$s || this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'IsomorphicHelpers'), 'IsomorphicProcCall'), 'new', [name, block, self].concat(Opal.to_a(args))).$result()}, TMP_35.$$s = self, TMP_35.$$arity = -1, TMP_35))
          }, TMP_ClassMethods_isomorphic_method_34.$$arity = 1);
        };
      })($nesting[0], $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["active_support/core_ext/object/try"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$zero?', '$arity', '$instance_eval', '$public_send']);
  
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_try_1, TMP_Object_try$B_2;

    
    
    Opal.defn(self, '$try', TMP_Object_try_1 = function($a_rest) {
      var $b, self = this, a, $iter = TMP_Object_try_1.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_try_1.$$p = null;
      if ($truthy(($truthy($b = a['$empty?']()) ? $b : self['$respond_to?'](a.$first())))) {
        return $send(self, 'try!', Opal.to_a(a), b.$to_proc())
        } else {
        return nil
      }
    }, TMP_Object_try_1.$$arity = -1);
    return (Opal.defn(self, '$try!', TMP_Object_try$B_2 = function($a_rest) {
      var $b, self = this, a, $iter = TMP_Object_try$B_2.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_try$B_2.$$p = null;
      if ($truthy(($truthy($b = a['$empty?']()) ? (b !== nil) : $b))) {
        if ($truthy(b.$arity()['$zero?']())) {
          return $send(self, 'instance_eval', [], b.$to_proc())
          } else {
          return Opal.yield1(b, self);
        }
        } else {
        return $send(self, 'public_send', Opal.to_a(a), b.$to_proc())
      }
    }, TMP_Object_try$B_2.$$arity = -1), nil) && 'try!';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_try_3, TMP_NilClass_try$B_4;

    
    
    Opal.defn(self, '$try', TMP_NilClass_try_3 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil
    }, TMP_NilClass_try_3.$$arity = -1);
    return (Opal.defn(self, '$try!', TMP_NilClass_try$B_4 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil
    }, TMP_NilClass_try$B_4.$$arity = -1), nil) && 'try!';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/top_level"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$+', '$create_element', '$to_proc', '$!', '$Native', '$to_n', '$raise', '$include', '$class', '$kind_of?', '$build']);
  
  self.$require("native");
  self.$require("active_support/core_ext/object/try");
  self.$require("react/component/tags");
  self.$require("react/component/base");
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_React_html_tag$q_1, TMP_React_html_attr$q_2, TMP_React_create_element_3, TMP_React_render_4, TMP_React_is_valid_element_5, TMP_React_is_valid_element$q_6, TMP_React_render_to_string_8, TMP_React_render_to_static_markup_10, TMP_React_unmount_component_at_node_11;

    
    Opal.const_set($nesting[0], 'ATTRIBUTES', $rb_plus(["accept", "acceptCharset", "accessKey", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoPlay", "cellPadding", "cellSpacing", "charSet", "checked", "classID", "className", "cols", "colSpan", "content", "contentEditable", "contextMenu", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "dir", "disabled", "download", "draggable", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "height", "hidden", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "label", "lang", "list", "loop", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "multiple", "muted", "name", "noValidate", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "readOnly", "rel", "required", "role", "rows", "rowSpan", "sandbox", "scope", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "spellCheck", "src", "srcDoc", "srcSet", "start", "step", "style", "tabIndex", "target", "title", "type", "useMap", "value", "width", "wmode", "dangerouslySetInnerHTML"], ["clipPath", "cx", "cy", "d", "dx", "dy", "fill", "fillOpacity", "fontFamily", "fontSize", "fx", "fy", "gradientTransform", "gradientUnits", "markerEnd", "markerMid", "markerStart", "offset", "opacity", "patternContentUnits", "patternUnits", "points", "preserveAspectRatio", "r", "rx", "ry", "spreadMethod", "stopColor", "stopOpacity", "stroke", "strokeDasharray", "strokeLinecap", "strokeOpacity", "strokeWidth", "textAnchor", "transform", "version", "viewBox", "x1", "x2", "x", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlSpace", "y1", "y2", "y"]));
    Opal.const_set($nesting[0], 'HASH_ATTRIBUTES', ["data", "aria"]);
    Opal.const_set($nesting[0], 'HTML_TAGS', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component'), 'Tags'), 'HTML_TAGS'));
    Opal.defs(self, '$html_tag?', TMP_React_html_tag$q_1 = function(name) {
      var self = this, tags = nil;

      
      tags = Opal.const_get_relative($nesting, 'HTML_TAGS');
      
      for(var i = 0; i < tags.length; i++) {
        if(tags[i] === name)
          return true;
      }
      return false;
    ;
    }, TMP_React_html_tag$q_1.$$arity = 1);
    Opal.defs(self, '$html_attr?', TMP_React_html_attr$q_2 = function(name) {
      var self = this, attrs = nil;

      
      attrs = Opal.const_get_relative($nesting, 'ATTRIBUTES');
      
      for(var i = 0; i < attrs.length; i++) {
        if(attrs[i] === name)
          return true;
      }
      return false;
    ;
    }, TMP_React_html_attr$q_2.$$arity = 1);
    Opal.defs(self, '$create_element', TMP_React_create_element_3 = function $$create_element(type, properties) {
      var self = this, $iter = TMP_React_create_element_3.$$p, block = $iter || nil;

      if (properties == null) {
        properties = $hash2([], {});
      }
      if ($iter) TMP_React_create_element_3.$$p = null;
      return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'API'), 'create_element', [type, properties], block.$to_proc())
    }, TMP_React_create_element_3.$$arity = -2);
    Opal.defs(self, '$render', TMP_React_render_4 = function $$render(element, container) {
      var self = this, $iter = TMP_React_render_4.$$p, $yield = $iter || nil, component = nil;

      if ($iter) TMP_React_render_4.$$p = null;
      
      
        console.error(
          "Warning: Using deprecated behavior of `React.render`,",
          "require \"react/top_level_render\" to get the correct behavior."
        );
    ;
      container = container.$$class ? container[0] : container;
      if ($truthy((typeof ReactDOM === 'undefined')['$!']())) {
        component = self.$Native(ReactDOM.render(element.$to_n(), container, function(){(function() {if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
          } else {
          return nil
        }; return nil; })()}))
        } else {
        self.$raise("render is not defined.  In React >= v15 you must import it with ReactDOM")
      };
      component.$class().$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Component'), 'API'));
      return component;
    }, TMP_React_render_4.$$arity = 2);
    Opal.defs(self, '$is_valid_element', TMP_React_is_valid_element_5 = function $$is_valid_element(element) {
      var $a, self = this;

      
       console.error("Warning: `is_valid_element` is deprecated in favor of `is_valid_element?`."); ;
      return ($truthy($a = element['$kind_of?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Element'))) ? React.isValidElement(element.$to_n()) : $a);
    }, TMP_React_is_valid_element_5.$$arity = 1);
    Opal.defs(self, '$is_valid_element?', TMP_React_is_valid_element$q_6 = function(element) {
      var $a, self = this;

      return ($truthy($a = element['$kind_of?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Element'))) ? React.isValidElement(element.$to_n()) : $a)
    }, TMP_React_is_valid_element$q_6.$$arity = 1);
    Opal.defs(self, '$render_to_string', TMP_React_render_to_string_8 = function $$render_to_string(element) {
      var TMP_7, self = this;

      
       console.error("Warning: `React.render_to_string` is deprecated in favor of `React::Server.render_to_string`."); ;
      if ($truthy((typeof ReactDOMServer === 'undefined')['$!']())) {
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'build', [], (TMP_7 = function(){var self = TMP_7.$$s || this;

        return ReactDOMServer.renderToString(element.$to_n())}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))
        } else {
        return self.$raise("renderToString is not defined.  In React >= v15 you must import it with ReactDOMServer")
      };
    }, TMP_React_render_to_string_8.$$arity = 1);
    Opal.defs(self, '$render_to_static_markup', TMP_React_render_to_static_markup_10 = function $$render_to_static_markup(element) {
      var TMP_9, self = this;

      
       console.error("Warning: `React.render_to_static_markup` is deprecated in favor of `React::Server.render_to_static_markup`."); ;
      if ($truthy((typeof ReactDOMServer === 'undefined')['$!']())) {
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext'), 'build', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

        return ReactDOMServer.renderToStaticMarkup(element.$to_n())}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9))
        } else {
        return self.$raise("renderToStaticMarkup is not defined.  In React >= v15 you must import it with ReactDOMServer")
      };
    }, TMP_React_render_to_static_markup_10.$$arity = 1);
    Opal.defs(self, '$unmount_component_at_node', TMP_React_unmount_component_at_node_11 = function $$unmount_component_at_node(node) {
      var self = this;

      if ($truthy((typeof ReactDOM === 'undefined')['$!']())) {
        return ReactDOM.unmountComponentAtNode(node.$$class ? node[0] : node)
        } else {
        return self.$raise("unmountComponentAtNode is not defined.  In React >= v15 you must import it with ReactDOM")
      }
    }, TMP_React_unmount_component_at_node_11.$$arity = 1);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/top_level_render"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$to_n']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_React_render_1;

    Opal.defs(self, '$render', TMP_React_render_1 = function $$render(element, container) {
      var self = this, $iter = TMP_React_render_1.$$p, $yield = $iter || nil, cb = nil, native$ = nil;

      if ($iter) TMP_React_render_1.$$p = null;
      
      if ($truthy(typeof ReactDOM === 'undefined')) {
        self.$raise("ReactDOM.render is not defined.  In React >= v15 you must import it with ReactDOM")};
      container = container.$$class ? container[0] : container;
      if (($yield !== nil)) {
        
        cb = 
        function(){
          setTimeout(function(){
            Opal.yieldX($yield, [])
          }, 0)
        }
      ;
        native$ = ReactDOM.render(element.$to_n(), container, cb);
        } else {
        native$ = ReactDOM.render(element.$to_n(), container)
      };
      if ($truthy(native$.__opalInstance !== undefined && native$.__opalInstance !== null)) {
        return native$.__opalInstance
      } else if ($truthy(ReactDOM.findDOMNode !== undefined && native$.nodeType === undefined)) {
        return ReactDOM.findDOMNode(native$)
        } else {
        return native$
      };
    }, TMP_React_render_1.$$arity = 2)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["rails-helpers/top_level_rails_component"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$export_component', '$param', '$backtrace', '$top_level_render', '$start_with?', '$component_name', '$params', '$<<', '$const_get', '$each', '$search_path', '$class', '$name', '$controller', '$!=', '$method_defined?', '$render', '$render_params', '$raise', '$join', '$search_path=', '$-', '$!', '$include?', '$add_to_react_search_path']);
  
  (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $TopLevelRailsComponent(){};
      var self = $TopLevelRailsComponent = $klass($base, $super, 'TopLevelRailsComponent', $TopLevelRailsComponent);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TopLevelRailsComponent_search_path_1, TMP_TopLevelRailsComponent_render_2, TMP_TopLevelRailsComponent_top_level_render_5;

      
      self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'), 'Mixin'));
      Opal.defs(self, '$search_path', TMP_TopLevelRailsComponent_search_path_1 = function $$search_path() {
        var $a, self = this;
        if (self.search_path == null) self.search_path = nil;

        return (self.search_path = ($truthy($a = self.search_path) ? $a : [Opal.const_get_relative($nesting, 'Object')]))
      }, TMP_TopLevelRailsComponent_search_path_1.$$arity = 0);
      self.$export_component();
      self.$param("component_name");
      self.$param("controller");
      self.$param("render_params");
      self.$backtrace("off");
      
      Opal.defn(self, '$render', TMP_TopLevelRailsComponent_render_2 = function $$render() {
        var self = this;

        return self.$top_level_render()
      }, TMP_TopLevelRailsComponent_render_2.$$arity = 0);
      return (Opal.defn(self, '$top_level_render', TMP_TopLevelRailsComponent_top_level_render_5 = function $$top_level_render() {
        var TMP_3, TMP_4, $a, self = this, paths_searched = nil, component = nil;

        
        paths_searched = [];
        component = nil;
        if ($truthy(self.$params().$component_name()['$start_with?']("::"))) {
          
          paths_searched['$<<'](self.$params().$component_name());
          component = (function() { try {
            return Opal.const_get_relative($nesting, 'Object').$const_get(self.$params().$component_name())
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          } else {
          
          (function(){var $brk = Opal.new_brk(); try {return $send(self.$class().$search_path(), 'each', [], (TMP_3 = function(scope){var self = TMP_3.$$s || this;
if (scope == null) scope = nil;
          
            paths_searched['$<<']("" + (scope.$name()) + "::" + (self.$params().$controller()) + "::" + (self.$params().$component_name()));
            component = (function() { try {
              return scope.$const_get(self.$params().$controller(), false).$const_get(self.$params().$component_name(), false)
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
                try {
                  return nil
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }})();
            if ($truthy(component['$!='](nil))) {
              
              Opal.brk(nil, $brk)
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3.$$brk = $brk, TMP_3.$$arity = 1, TMP_3))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          if ($truthy(component)) {
            } else {
            (function(){var $brk = Opal.new_brk(); try {return $send(self.$class().$search_path(), 'each', [], (TMP_4 = function(scope){var self = TMP_4.$$s || this;
if (scope == null) scope = nil;
            
              paths_searched['$<<']("" + (scope.$name()) + "::" + (self.$params().$component_name()));
              component = (function() { try {
                return scope.$const_get(self.$params().$component_name(), false)
              } catch ($err) {
                if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }})();
              if ($truthy(component['$!='](nil))) {
                
                Opal.brk(nil, $brk)
                } else {
                return nil
              };}, TMP_4.$$s = self, TMP_4.$$brk = $brk, TMP_4.$$arity = 1, TMP_4))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
          };
        };
        if ($truthy(($truthy($a = component) ? component['$method_defined?']("render") : $a))) {
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'RenderingContext').$render(component, self.$params().$render_params())};
        return self.$raise("" + "Could not find component class '" + (self.$params().$component_name()) + "' for params.controller '" + (self.$params().$controller()) + "' in any component directory. Tried [" + (paths_searched.$join(", ")) + "]");
      }, TMP_TopLevelRailsComponent_top_level_render_5.$$arity = 0), nil) && 'top_level_render';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_add_to_react_search_path_6;

    return (Opal.defn(self, '$add_to_react_search_path', TMP_Module_add_to_react_search_path_6 = function $$add_to_react_search_path(replace_search_path) {
      var self = this, $writer = nil;

      if (replace_search_path == null) {
        replace_search_path = nil;
      }
      if ($truthy(replace_search_path)) {
        
        $writer = [[self]];
        $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'TopLevelRailsComponent'), 'search_path=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      } else if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'TopLevelRailsComponent').$search_path()['$include?'](self)['$!']())) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'TopLevelRailsComponent').$search_path()['$<<'](self)
        } else {
        return nil
      }
    }, TMP_Module_add_to_react_search_path_6.$$arity = -1), nil) && 'add_to_react_search_path'
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    self.$add_to_react_search_path()
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.3 */
Opal.modules["reactive-ruby/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Component(){};
      var self = $Component = $klass($base, $super, 'Component', $Component);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return Opal.const_set($nesting[0], 'VERSION', "0.99.1")
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-component"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$import', '$js_import', '$==', '$include']);
  
  self.$require("hyperloop-config");
  Opal.const_get_relative($nesting, 'Hyperloop').$import("hyper-store");
  Opal.const_get_relative($nesting, 'Hyperloop').$js_import("react/react-source-browser", $hash2(["client_only", "defines"], {"client_only": true, "defines": ["ReactDOM", "React"]}));
  Opal.const_get_relative($nesting, 'Hyperloop').$js_import("react/react-source-server", $hash2(["server_only", "defines"], {"server_only": true, "defines": "React"}));
  Opal.const_get_relative($nesting, 'Hyperloop').$import("browser/delay", $hash2(["client_only"], {"client_only": true}));
  Opal.const_get_relative($nesting, 'Hyperloop').$js_import("react_ujs", $hash2(["defines"], {"defines": "ReactRailsUJS"}));
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    (function($base, $parent_nesting) {
      var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting);
    self.$require("native");
    self.$require("react/observable");
    self.$require("react/validator");
    self.$require("react/element");
    self.$require("react/api");
    self.$require("react/component");
    self.$require("react/component/dsl_instance_methods");
    self.$require("react/component/should_component_update");
    self.$require("react/component/tags");
    self.$require("react/component/base");
    self.$require("react/event");
    self.$require("react/rendering_context");
    self.$require("react/state");
    self.$require("react/object");
    self.$require("react/to_key");
    self.$require("react/ext/opal-jquery/element");
    self.$require("reactive-ruby/isomorphic_helpers");
    self.$require("react/top_level");
    self.$require("react/top_level_render");
    self.$require("rails-helpers/top_level_rails_component");
    self.$require("reactive-ruby/version");
    return (function($base, $parent_nesting) {
      var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Component_inherited_1;

        return Opal.defs(self, '$inherited', TMP_Component_inherited_1 = function $$inherited(child) {
          var self = this;

          return child.$include(Opal.const_get_relative($nesting, 'Mixin'))
        }, TMP_Component_inherited_1.$$arity = 1)
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting);
    } else {
    return nil
  };
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/router"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$imports']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return self.$imports("ReactRouter")
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'NativeLibrary'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/router/dom"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$imports']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $DOM(){};
        var self = $DOM = $klass($base, $super, 'DOM', $DOM);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return self.$imports("ReactRouterDOM")
      })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'NativeLibrary'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["react/router/history"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$new', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $History(){};
        var self = $History = $klass($base, $super, 'History', $History);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_History_current_1, TMP_History_initialize_2, TMP_History_to_n_3;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        Opal.defs(self, '$current', TMP_History_current_1 = function $$current() {
          var self = this;

          return self.$new(History)
        }, TMP_History_current_1.$$arity = 0);
        
        Opal.defn(self, '$initialize', TMP_History_initialize_2 = function $$initialize(native$) {
          var self = this;

          return (self["native"] = native$)
        }, TMP_History_initialize_2.$$arity = 1);
        
        Opal.defn(self, '$to_n', TMP_History_to_n_3 = function $$to_n() {
          var self = this;

          return self["native"]
        }, TMP_History_to_n_3.$$arity = 0);
        self.$alias_native("create_browser_history", "createBrowserHistory");
        self.$alias_native("create_hash_history", "createHashHistory");
        self.$alias_native("create_location", "createLocation");
        self.$alias_native("create_memory_history", "createMemoryHistory");
        return self.$alias_native("create_path", "createPath");
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-router/isomorphic_methods"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$include', '$isomorphic_method', '$when_on_client', '$send_to_server', '$when_on_server', '$fullpath', '$request', '$controller', '$context']);
  return (function($base, $parent_nesting) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $IsomorphicMethods(){};
      var self = $IsomorphicMethods = $klass($base, $super, 'IsomorphicMethods', $IsomorphicMethods);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IsomorphicMethods_1;

      
      self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'IsomorphicHelpers'));
      return $send(self, 'isomorphic_method', ["request_fullpath"], (TMP_IsomorphicMethods_1 = function(f){var self = TMP_IsomorphicMethods_1.$$s || this, TMP_2, TMP_3;
if (f == null) f = nil;
      
        $send(f, 'when_on_client', [], (TMP_2 = function(){var self = TMP_2.$$s || this;

        return window.location.pathname}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
        f.$send_to_server();
        return $send(f, 'when_on_server', [], (TMP_3 = function(){var self = TMP_3.$$s || this;

        return f.$context().$controller().$request().$fullpath()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3));}, TMP_IsomorphicMethods_1.$$s = self, TMP_IsomorphicMethods_1.$$arity = 1, TMP_IsomorphicMethods_1));
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-router/history"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$new', '$native_block', '$to_n', '$native_listen', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $History(){};
      var self = $History = $klass($base, $super, 'History', $History);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_History_initialize_1, TMP_History_to_n_2, TMP_History_location_3, TMP_History_block_5, TMP_History_listen_7;

      def["native"] = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      
      Opal.defn(self, '$initialize', TMP_History_initialize_1 = function $$initialize(native$) {
        var self = this;

        return (self["native"] = native$)
      }, TMP_History_initialize_1.$$arity = 1);
      
      Opal.defn(self, '$to_n', TMP_History_to_n_2 = function $$to_n() {
        var self = this;

        return self["native"]
      }, TMP_History_to_n_2.$$arity = 0);
      
      Opal.defn(self, '$location', TMP_History_location_3 = function $$location() {
        var self = this;

        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'Location').$new(self["native"].location)
      }, TMP_History_location_3.$$arity = 0);
      
      Opal.defn(self, '$block', TMP_History_block_5 = function $$block(message) {
        var TMP_4, self = this, $iter = TMP_History_block_5.$$p, $yield = $iter || nil;

        if (message == null) {
          message = nil;
        }
        if ($iter) TMP_History_block_5.$$p = null;
        if ($truthy(message)) {
          return self.$native_block(message.$to_n())
          } else {
          return $send(self, 'native_block', [], (TMP_4 = function(location, action){var self = TMP_4.$$s || this;
if (location == null) location = nil;if (action == null) action = nil;
          return Opal.yieldX($yield, [Opal.const_get_relative($nesting, 'Location').$new(location), action]);}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4))
        }
      }, TMP_History_block_5.$$arity = -1);
      
      Opal.defn(self, '$listen', TMP_History_listen_7 = function $$listen() {
        var TMP_6, self = this, $iter = TMP_History_listen_7.$$p, $yield = $iter || nil;

        if ($iter) TMP_History_listen_7.$$p = null;
        return $send(self, 'native_listen', [], (TMP_6 = function(location, action){var self = TMP_6.$$s || this;
if (location == null) location = nil;if (action == null) action = nil;
        return Opal.yieldX($yield, [Opal.const_get_relative($nesting, 'Location').$new(location), action]);}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6))
      }, TMP_History_listen_7.$$arity = 0);
      self.$alias_native("action");
      self.$alias_native("native_block", "block");
      self.$alias_native("create_href", "createHref");
      self.$alias_native("entries");
      self.$alias_native("go");
      self.$alias_native("go_back", "goBack");
      self.$alias_native("go_forward", "goForward");
      self.$alias_native("index");
      self.$alias_native("length");
      self.$alias_native("native_listen", "listen");
      self.$alias_native("push", "push");
      return self.$alias_native("replace", "replace");
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-router/location"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$include', '$blank?', '$search', '$[]', '$map', '$split', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Location(){};
      var self = $Location = $klass($base, $super, 'Location', $Location);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Location_initialize_1, TMP_Location_to_n_2, TMP_Location_query_4;

      def["native"] = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      
      Opal.defn(self, '$initialize', TMP_Location_initialize_1 = function $$initialize(native$) {
        var self = this;

        return (self["native"] = native$)
      }, TMP_Location_initialize_1.$$arity = 1);
      
      Opal.defn(self, '$to_n', TMP_Location_to_n_2 = function $$to_n() {
        var self = this;

        return self["native"]
      }, TMP_Location_to_n_2.$$arity = 0);
      
      Opal.defn(self, '$query', TMP_Location_query_4 = function $$query() {
        var TMP_3, self = this;

        
        if ($truthy(self.$search()['$blank?']())) {
          return $hash2([], {})};
        return Opal.const_get_relative($nesting, 'Hash')['$[]']($send(self.$search()['$[]']($range(1, -1, false)).$split("&"), 'map', [], (TMP_3 = function(part){var self = TMP_3.$$s || this, $a, $b, name = nil, value = nil;
if (part == null) part = nil;
        
          $b = part.$split("="), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
          return [decodeURIComponent(name), decodeURIComponent(value)];}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3)));
      }, TMP_Location_query_4.$$arity = 0);
      self.$alias_native("pathname");
      self.$alias_native("search");
      self.$alias_native("hash");
      self.$alias_native("state");
      return self.$alias_native("key");
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-router/match"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Match(){};
      var self = $Match = $klass($base, $super, 'Match', $Match);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Match_initialize_1, TMP_Match_to_n_2;

      def["native"] = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      
      Opal.defn(self, '$initialize', TMP_Match_initialize_1 = function $$initialize(native$) {
        var self = this;

        return (self["native"] = native$)
      }, TMP_Match_initialize_1.$$arity = 1);
      
      Opal.defn(self, '$to_n', TMP_Match_to_n_2 = function $$to_n() {
        var self = this;

        return self["native"]
      }, TMP_Match_to_n_2.$$arity = 0);
      self.$alias_native("params");
      self.$alias_native("is_exact", "isExact");
      self.$alias_native("path");
      return self.$alias_native("url");
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-router/class_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$>', '$count', '$first', '$send', '$new', '$to_n', '$history', '$on_opal_server?', '$prerender_router', '$to_proc', '$render_router', '$private', '$create_browser_history', '$current', '$create_hash_history', '$create_memory_history', '$define_method', '$class', '$Router', '$instance_eval', '$tap', '$split', '$request_fullpath', '$[]=', '$-', '$StaticRouter']);
  return (function($base, $parent_nesting) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $NoHistoryError(){};
      var self = $NoHistoryError = $klass($base, $super, 'NoHistoryError', $NoHistoryError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
    (function($base, $parent_nesting) {
      var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_history_1, TMP_ClassMethods_location_2, TMP_ClassMethods_route_3, TMP_ClassMethods_browser_history_4, TMP_ClassMethods_hash_history_5, TMP_ClassMethods_memory_history_6, TMP_ClassMethods_render_router_7, TMP_ClassMethods_prerender_router_10;

      
      
      Opal.defn(self, '$history', TMP_ClassMethods_history_1 = function $$history($a_rest) {
        var $b, self = this, args;
        if (self.__history_type == null) self.__history_type = nil;
        if (self.__history == null) self.__history = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($truthy($rb_gt(args.$count(), 0))) {
          return (self.__history_type = args.$first())
        } else if ($truthy(self.__history_type)) {
          return (self.__history = ($truthy($b = self.__history) ? $b : self.$send("" + (self.__history_type) + "_history")))
          } else {
          return nil
        }
      }, TMP_ClassMethods_history_1.$$arity = -1);
      
      Opal.defn(self, '$location', TMP_ClassMethods_location_2 = function $$location() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Location').$new(self.$history().$to_n().location)
      }, TMP_ClassMethods_location_2.$$arity = 0);
      
      Opal.defn(self, '$route', TMP_ClassMethods_route_3 = function $$route() {
        var self = this, $iter = TMP_ClassMethods_route_3.$$p, block = $iter || nil;

        if ($iter) TMP_ClassMethods_route_3.$$p = null;
        if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'IsomorphicHelpers')['$on_opal_server?']())) {
          return $send(self, 'prerender_router', [], block.$to_proc())
          } else {
          return $send(self, 'render_router', [], block.$to_proc())
        }
      }, TMP_ClassMethods_route_3.$$arity = 0);
      self.$private();
      
      Opal.defn(self, '$browser_history', TMP_ClassMethods_browser_history_4 = function $$browser_history() {
        var $a, self = this;
        if (self.__browser_history == null) self.__browser_history = nil;

        return (self.__browser_history = ($truthy($a = self.__browser_history) ? $a : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'History').$current().$create_browser_history()))
      }, TMP_ClassMethods_browser_history_4.$$arity = 0);
      
      Opal.defn(self, '$hash_history', TMP_ClassMethods_hash_history_5 = function $$hash_history($a_rest) {
        var $b, self = this, args;
        if (self.__hash_history == null) self.__hash_history = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return (self.__hash_history = ($truthy($b = self.__hash_history) ? $b : $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'History').$current(), 'create_hash_history', Opal.to_a(args))))
      }, TMP_ClassMethods_hash_history_5.$$arity = -1);
      
      Opal.defn(self, '$memory_history', TMP_ClassMethods_memory_history_6 = function $$memory_history($a_rest) {
        var $b, self = this, args;
        if (self.__memory_history == null) self.__memory_history = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return (self.__memory_history = ($truthy($b = self.__memory_history) ? $b : $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'History').$current(), 'create_memory_history', Opal.to_a(args))))
      }, TMP_ClassMethods_memory_history_6.$$arity = -1);
      
      Opal.defn(self, '$render_router', TMP_ClassMethods_render_router_7 = function $$render_router() {
        var TMP_8, self = this, $iter = TMP_ClassMethods_render_router_7.$$p, block = $iter || nil;

        if ($iter) TMP_ClassMethods_render_router_7.$$p = null;
        return $send(self, 'define_method', ["render"], (TMP_8 = function(){var self = TMP_8.$$s || this, TMP_9;

        
          if ($truthy(self.$history())) {
            } else {
            self.$class().$history("browser")
          };
          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'Router', [$hash2(["history"], {"history": self.$history().$to_n()})], (TMP_9 = function(){var self = TMP_9.$$s || this;

          return $send(self, 'instance_eval', [], block.$to_proc())}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8))
      }, TMP_ClassMethods_render_router_7.$$arity = 0);
      
      Opal.defn(self, '$prerender_router', TMP_ClassMethods_prerender_router_10 = function $$prerender_router() {
        var TMP_11, self = this, $iter = TMP_ClassMethods_prerender_router_10.$$p, block = $iter || nil;

        if ($iter) TMP_ClassMethods_prerender_router_10.$$p = null;
        return $send(self, 'define_method', ["render"], (TMP_11 = function(){var self = TMP_11.$$s || this, TMP_12, TMP_13, location = nil;

        
          location = $send($hash2([], {}), 'tap', [], (TMP_12 = function(hash){var self = TMP_12.$$s || this, $a, $b, pathname = nil, search = nil, $writer = nil;
if (hash == null) hash = nil;
          
            $b = Opal.const_get_relative($nesting, 'IsomorphicMethods').$request_fullpath().$split("?", 2), $a = Opal.to_ary($b), (pathname = ($a[0] == null ? nil : $a[0])), (search = ($a[1] == null ? nil : $a[1])), $b;
            
            $writer = ["pathname", pathname];
            $send(hash, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["search", (function() {if ($truthy(search)) {
              return "" + "?" + (search)
              } else {
              return ""
            }; return nil; })()];
            $send(hash, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'StaticRouter', [$hash2(["location", "context"], {"location": location.$to_n(), "context": $hash2([], {}).$to_n()})], (TMP_13 = function(){var self = TMP_13.$$s || this;

          return $send(self, 'instance_eval', [], block.$to_proc())}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13));}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11))
      }, TMP_ClassMethods_prerender_router_10.$$arity = 0);
    })($nesting[0], $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-router/component_methods"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_n', '$tap', '$[]=', '$-', '$[]', '$delete', '$Link', '$to_proc', '$any?', '$&', '$keys', '$get_state', '$NavLink', '$Redirect', '$new', '$lambda', '$format_params', '$create_element', '$values', '$Route', '$Switch']);
  return (function($base, $parent_nesting) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $ComponentMethods, self = $ComponentMethods = $module($base, 'ComponentMethods');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ComponentMethods_Link_1, TMP_ComponentMethods_NavLink_3, TMP_ComponentMethods_Redirect_4, TMP_ComponentMethods_format_params_5, TMP_ComponentMethods_Route_6, TMP_ComponentMethods_Switch_9;

      
      
      Opal.defn(self, '$Link', TMP_ComponentMethods_Link_1 = function $$Link(to, opts) {
        var TMP_2, self = this, $iter = TMP_ComponentMethods_Link_1.$$p, children = $iter || nil, $writer = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_ComponentMethods_Link_1.$$p = null;
        
        
        $writer = ["to", $send($hash2([], {}), 'tap', [], (TMP_2 = function(hash){var self = TMP_2.$$s || this;
if (hash == null) hash = nil;
        
          
          $writer = ["pathname", to];
          $send(hash, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(opts['$[]']("search"))) {
            
            $writer = ["search", opts.$delete("search")];
            $send(hash, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(opts['$[]']("hash"))) {
            
            $writer = ["hash", opts.$delete("hash")];
            $send(hash, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return nil
          };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2)).$to_n()];
        $send(opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'DOM'), 'Link', [opts], children.$to_proc());
      }, TMP_ComponentMethods_Link_1.$$arity = -2);
      
      Opal.defn(self, '$NavLink', TMP_ComponentMethods_NavLink_3 = function $$NavLink(to, opts) {
        var self = this, $iter = TMP_ComponentMethods_NavLink_3.$$p, children = $iter || nil, $writer = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_ComponentMethods_NavLink_3.$$p = null;
        
        
        $writer = ["to", to.$to_n()];
        $send(opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(opts['$[]']("active_class"))) {
          
          $writer = ["activeClassName", opts.$delete("active_class").$to_n()];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(opts['$[]']("active_style"))) {
          
          $writer = ["activeStyle", opts.$delete("active_style").$to_n()];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(opts['$[]']("active"))) {
          
          $writer = ["isActive", opts.$delete("active").$to_n()];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(["activeClassName", "activeStyle", "isActive"]['$&'](opts.$keys())['$any?']())) {
          Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$get_state(Opal.const_get_relative($nesting, 'HyperRouter'), "location")};
        return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'DOM'), 'NavLink', [opts], children.$to_proc());
      }, TMP_ComponentMethods_NavLink_3.$$arity = -2);
      
      Opal.defn(self, '$Redirect', TMP_ComponentMethods_Redirect_4 = function $$Redirect(to, opts) {
        var self = this, $writer = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        
        $writer = ["to", to.$to_n()];
        $send(opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router').$Redirect(opts);
      }, TMP_ComponentMethods_Redirect_4.$$arity = -2);
      
      Opal.defn(self, '$format_params', TMP_ComponentMethods_format_params_5 = function $$format_params(e) {
        var self = this;

        return $hash2(["match", "location", "history"], {"match": Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'Match').$new(e.match), "location": Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'Location').$new(e.location), "history": Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'History').$new(e.history)})
      }, TMP_ComponentMethods_format_params_5.$$arity = 1);
      
      Opal.defn(self, '$Route', TMP_ComponentMethods_Route_6 = function $$Route(to, opts) {
        var TMP_7, TMP_8, self = this, $iter = TMP_ComponentMethods_Route_6.$$p, block = $iter || nil, $writer = nil, component = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_ComponentMethods_Route_6.$$p = null;
        
        
        $writer = ["path", to.$to_n()];
        $send(opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(opts['$[]']("mounts"))) {
          
          component = opts.$delete("mounts");
          
          $writer = ["component", $send(self, 'lambda', [], (TMP_7 = function(e){var self = TMP_7.$$s || this, route_params = nil;
if (e == null) e = nil;
          
            route_params = self.$format_params(e);
            return Opal.const_get_relative($nesting, 'React').$create_element(component, route_params).$to_n();}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;};
        if ($truthy(block)) {
          
          $writer = ["render", $send(self, 'lambda', [], (TMP_8 = function(e){var self = TMP_8.$$s || this, route_params = nil;
if (e == null) e = nil;
          
            route_params = self.$format_params(e);
            return Opal.yield1(block, route_params.$values()).$to_n();}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router').$Route(opts);
      }, TMP_ComponentMethods_Route_6.$$arity = -2);
      
      Opal.defn(self, '$Switch', TMP_ComponentMethods_Switch_9 = function $$Switch() {
        var self = this, $iter = TMP_ComponentMethods_Switch_9.$$p, children = $iter || nil;

        if ($iter) TMP_ComponentMethods_Switch_9.$$p = null;
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'Switch', [], children.$to_proc())
      }, TMP_ComponentMethods_Switch_9.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyper-router/instance_methods"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$history', '$class', '$location']);
  return (function($base, $parent_nesting) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $InstanceMethods, self = $InstanceMethods = $module($base, 'InstanceMethods');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_InstanceMethods_history_1, TMP_InstanceMethods_location_2;

      
      
      Opal.defn(self, '$history', TMP_InstanceMethods_history_1 = function $$history() {
        var self = this;

        return self.$class().$history()
      }, TMP_InstanceMethods_history_1.$$arity = 0);
      
      Opal.defn(self, '$location', TMP_InstanceMethods_location_2 = function $$location() {
        var self = this;

        return self.$class().$location()
      }, TMP_InstanceMethods_location_2.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/router/base"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$extend', '$include', '$class_eval', '$after_mount', '$listen', '$history', '$set_state', '$before_unmount', '$call']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $Base, self = $Base = $module($base, 'Base');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Base_included_5;

        Opal.defs(self, '$included', TMP_Base_included_5 = function $$included(base) {
          var TMP_1, self = this;

          
          base.$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ClassMethods'));
          base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'InstanceMethods'));
          base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ComponentMethods'));
          return $send(base, 'class_eval', [], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2, TMP_4;

          
            $send(self, 'after_mount', [], (TMP_2 = function(){var self = TMP_2.$$s || this, TMP_3;

            return (self._react_router_unlisten = $send(self.$history(), 'listen', [], (TMP_3 = function(location, _action){var self = TMP_3.$$s || this;
if (location == null) location = nil;if (_action == null) _action = nil;
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'State').$set_state(Opal.const_get_relative($nesting, 'HyperRouter'), "location", location)}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3)))}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
            return $send(self, 'before_unmount', [], (TMP_4 = function(){var self = TMP_4.$$s || this;
              if (self._react_router_unlisten == null) self._react_router_unlisten = nil;

            if ($truthy(self._react_router_unlisten)) {
                return self._react_router_unlisten.$call()
                } else {
                return nil
              }}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
        }, TMP_Base_included_5.$$arity = 1)
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/router/browser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$extend', '$history', '$include']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $Browser, self = $Browser = $module($base, 'Browser');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Browser_included_1;

        Opal.defs(self, '$included', TMP_Browser_included_1 = function $$included(base) {
          var self = this;

          
          base.$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ClassMethods'));
          base.$history("browser");
          base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'InstanceMethods'));
          return base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ComponentMethods'));
        }, TMP_Browser_included_1.$$arity = 1)
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/router/mixin"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$class_eval', '$param', '$define_method', '$match', '$params', '$location', '$history']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $Mixin, self = $Mixin = $module($base, 'Mixin');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_included_5;

          return (Opal.defn(self, '$included', TMP_included_5 = function $$included(base) {
            var TMP_1, self = this;

            
            base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'), 'Mixin'));
            base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ComponentMethods'));
            return $send(base, 'class_eval', [], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2, TMP_3, TMP_4;

            
              self.$param("match", $hash2(["default"], {"default": nil}));
              self.$param("location", $hash2(["default"], {"default": nil}));
              self.$param("history", $hash2(["default"], {"default": nil}));
              $send(self, 'define_method', ["match"], (TMP_2 = function(){var self = TMP_2.$$s || this;

              return self.$params().$match()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
              $send(self, 'define_method', ["location"], (TMP_3 = function(){var self = TMP_3.$$s || this;

              return self.$params().$location()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3));
              return $send(self, 'define_method', ["history"], (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$params().$history()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
          }, TMP_included_5.$$arity = 1), nil) && 'included'
        })(Opal.get_singleton_class(self), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/router/component"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_inherited_1;

          return (Opal.defn(self, '$inherited', TMP_inherited_1 = function $$inherited(base) {
            var self = this;

            return base.$include(Opal.const_get_relative($nesting, 'Mixin'))
          }, TMP_inherited_1.$$arity = 1), nil) && 'inherited'
        })(Opal.get_singleton_class(self), $nesting)
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/router/hash"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$extend', '$history', '$include']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $Hash, self = $Hash = $module($base, 'Hash');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_included_1;

        Opal.defs(self, '$included', TMP_Hash_included_1 = function $$included(base) {
          var self = this;

          
          base.$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ClassMethods'));
          base.$history("hash");
          base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'InstanceMethods'));
          return base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ComponentMethods'));
        }, TMP_Hash_included_1.$$arity = 1)
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/router/memory"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$extend', '$history', '$include']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $Memory, self = $Memory = $module($base, 'Memory');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Memory_included_1;

        Opal.defs(self, '$included', TMP_Memory_included_1 = function $$included(base) {
          var self = this;

          
          base.$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ClassMethods'));
          base.$history("memory");
          base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'InstanceMethods'));
          return base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ComponentMethods'));
        }, TMP_Memory_included_1.$$arity = 1)
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/router/static"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$prerender_router', '$to_proc', '$extend', '$include']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $Static, self = $Static = $module($base, 'Static');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Static_included_2;

        
        (function($base, $parent_nesting) {
          var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_route_1;

          
          Opal.defn(self, '$route', TMP_ClassMethods_route_1 = function $$route() {
            var self = this, $iter = TMP_ClassMethods_route_1.$$p, block = $iter || nil;

            if ($iter) TMP_ClassMethods_route_1.$$p = null;
            return $send(self, 'prerender_router', [], block.$to_proc())
          }, TMP_ClassMethods_route_1.$$arity = 0)
        })($nesting[0], $nesting);
        Opal.defs(self, '$included', TMP_Static_included_2 = function $$included(base) {
          var self = this;

          
          base.$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ClassMethods'));
          base.$extend(Opal.const_get_relative($nesting, 'ClassMethods'));
          base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'InstanceMethods'));
          return base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HyperRouter'), 'ComponentMethods'));
        }, TMP_Static_included_2.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
Opal.modules["hyperloop/router"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include']);
  return (function($base, $parent_nesting) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Router_inherited_1;

      return Opal.defs(self, '$inherited', TMP_Router_inherited_1 = function $$inherited(child) {
        var self = this;

        
        child.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'), 'Mixin'));
        return child.$include(Opal.const_get_relative($nesting, 'Base'));
      }, TMP_Router_inherited_1.$$arity = 1)
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $BrowserRouter(){};
      var self = $BrowserRouter = $klass($base, $super, 'BrowserRouter', $BrowserRouter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BrowserRouter_inherited_2;

      return Opal.defs(self, '$inherited', TMP_BrowserRouter_inherited_2 = function $$inherited(child) {
        var self = this;

        
        child.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'), 'Mixin'));
        return child.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Router'), 'Browser'));
      }, TMP_BrowserRouter_inherited_2.$$arity = 1)
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $HashRouter(){};
      var self = $HashRouter = $klass($base, $super, 'HashRouter', $HashRouter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HashRouter_inherited_3;

      return Opal.defs(self, '$inherited', TMP_HashRouter_inherited_3 = function $$inherited(child) {
        var self = this;

        
        child.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'), 'Mixin'));
        return child.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Router'), 'Hash'));
      }, TMP_HashRouter_inherited_3.$$arity = 1)
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $MemoryRouter(){};
      var self = $MemoryRouter = $klass($base, $super, 'MemoryRouter', $MemoryRouter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MemoryRouter_inherited_4;

      return Opal.defs(self, '$inherited', TMP_MemoryRouter_inherited_4 = function $$inherited(child) {
        var self = this;

        
        child.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'), 'Mixin'));
        return child.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Router'), 'Memory'));
      }, TMP_MemoryRouter_inherited_4.$$arity = 1)
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $StaticRouter(){};
      var self = $StaticRouter = $klass($base, $super, 'StaticRouter', $StaticRouter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StaticRouter_inherited_5;

      return Opal.defs(self, '$inherited', TMP_StaticRouter_inherited_5 = function $$inherited(child) {
        var self = this;

        
        child.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Component'), 'Mixin'));
        return child.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperloop'), 'Router'), 'Static'));
      }, TMP_StaticRouter_inherited_5.$$arity = 1)
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.3 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$js_import', '$import', '$==']);
  
  self.$require("hyper-component");
  Opal.const_get_relative($nesting, 'Hyperloop').$js_import("hyper-router/react-router-source", $hash2(["defines"], {"defines": ["ReactRouter", "ReactRouterDOM", "History"]}));
  Opal.const_get_relative($nesting, 'Hyperloop').$import("hyper-router");
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("react/router");
    self.$require("react/router/dom");
    self.$require("react/router/history");
    self.$require("hyper-router/isomorphic_methods");
    self.$require("hyper-router/history");
    self.$require("hyper-router/location");
    self.$require("hyper-router/match");
    self.$require("hyper-router/class_methods");
    self.$require("hyper-router/component_methods");
    self.$require("hyper-router/instance_methods");
    self.$require("hyperloop/router/base");
    self.$require("hyperloop/router/browser");
    self.$require("hyperloop/router/mixin");
    self.$require("hyperloop/router/component");
    self.$require("hyperloop/router/hash");
    self.$require("hyperloop/router/memory");
    self.$require("hyperloop/router/static");
    return self.$require("hyperloop/router");
    } else {
    return nil
  };
})(Opal);
